-- Testing script



\timing

Timing is on.
-- D1 & D2

select * from simple_search('nuget');

 post_id  |body

  7067201 | <p>There is an experimental release by Microsoft of <a href="http://www.microsoft.com/download/en/details.aspx?id=26651" rel="nofollow">Interactive Extensions to LINQ</a> (also <a href="https://www.nuget.org/packages/Ix-Main/" rel="nofollow">on NuGet</a>, see <a href="https://www.nuget.org/profiles/rxteam" rel="nofollow">RxTeams's profile</a> for more links). The <a href="http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-Interactive-Extensions-Ix" rel="nofollow">Channel 9 video</a> explains it well.</p>&#xA;&#xA;<p>Its docs are only provided in XML format. I have run this <a href="http://files.me.com/jwigger/cwysjb" rel="nofollow">documentation in Sandcastle</a> to allow it to be in a more readable format.  Unzip the docs archive and look for <em>index.html</em>.</p>&#xA;&#xA;<p>Among many other goodies, it provides the expected ForEach implementation. It allows you to write code like this:</p>&#xA;&#xA;<pre><code>int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8 };&#xA;&#xA;numbers.ForEach(x =&gt; Console.WriteLine(x*x));&#xA;</code></pre>&#xA;
 12185975 | <p>I've got the v2 version of the Razor engine from NuGet. I'd like to compile Razor views on-the-fly using its API. However, it seems to be fully non-documented.</p>&#xA;&#xA;<p>Every single type and member has the following documentation:  </p>&#xA;&#xA;<blockquote>&#xA;  <p>This type/member supports the .NET Framework infrastructure and is&#xA;  not intended to be used directly from your code.</p>&#xA;</blockquote>&#xA;&#xA;<p>This is very irritating, since these are all public types and public members.<br>&#xA;I've seen some 3rd party stuff which does compile Razor views using this library, so I know that the task should be doable too.</p>&#xA;&#xA;<p>So, is there any actual usable documentation on how to use this API anywhere?</p>&#xA;
 19068419 | <p>A nuget package based on xps2img is now available:&#xA;<a href="https://www.nuget.org/packages/xps2img/" rel="nofollow">https://www.nuget.org/packages/xps2img/</a></p>&#xA;&#xA;<p>Api available here:&#xA;<a href="https://github.com/peters/xps2img#usage" rel="nofollow">https://github.com/peters/xps2img#usage</a></p>&#xA;
 20800507 | <p>I am having problems updating Nuget packages in Visual Studio 2013 for a solution.</p>&#xA;&#xA;<p>I right-clicked the solution, chose "Manage packages for solution", then choose "Update All" in the update tab.</p>&#xA;&#xA;<p>It all seemed to update fine, however, in the update tab, the packages that were updated are still showing as needing to update. If I then go to update them again, the list of projects shows each project that has the package, and each checkbox is disabled, as if it already knows they have been updated. So as far as I can tell, every project has been updated.</p>&#xA;&#xA;<p>I have restarted Visual Studio</p>&#xA;&#xA;<p>Anyone else come across this before?</p>&#xA;
 20873090 | <p>Note that the <strong>MoreLINQ</strong> NuGet provides the <code>ForEach</code> extension method you're looking for (as well as a <code>Pipe</code> method which executes the delegate and yields its result).  See:</p>&#xA;&#xA;<ul>&#xA;<li><a href="https://www.nuget.org/packages/morelinq" rel="nofollow">https://www.nuget.org/packages/morelinq</a></li>&#xA;<li><a href="https://code.google.com/p/morelinq/wiki/OperatorsOverview" rel="nofollow">https://code.google.com/p/morelinq/wiki/OperatorsOverview</a></li>&#xA;</ul>&#xA;
 24991035 | <p>Hi i'm running ServiceStack with Ormlite and I encountered this error. Previously it is working fine. I'm not sure what I have changed that caused this error. I just used a simple db.Select() call and it throws this error. I tried various ways, like updating the nuget packages, clean and rebuild the project, etc and none of them works.</p>&#xA;&#xA;<pre><code>System.InvalidProgramException was caught&#xA;  _HResult=-2146233030&#xA;  _message=JIT Compiler encountered an internal limitation.&#xA;  HResult=-2146233030&#xA;  IsTransient=false&#xA;  Message=JIT Compiler encountered an internal limitation.&#xA;  Source=ServiceStack.OrmLite&#xA;  StackTrace:&#xA;       at ServiceStack.OrmLite.OrmLiteConfig.get_ExecFilter()&#xA;       at ServiceStack.OrmLite.ReadConnectionExtensions.Exec[T](IDbConnection dbConn, Func`2 filter)&#xA;       at ServiceStack.OrmLite.ReadConnectionExtensions.Select[T](IDbConnection dbConn, Expression`1 predicate)&#xA;   InnerException: &#xA;</code></pre>&#xA;&#xA;<p>can anyone suggest what might went wrong?</p>&#xA;
 25093840 | <p>Like <a href="http://stackoverflow.com/a/22620144/1037948">this answer</a> suggesting filters, consider the "extended" version -- <a href="http://www.strathweb.com/2012/05/output-caching-in-asp-net-web-api/" rel="nofollow">http://www.strathweb.com/2012/05/output-caching-in-asp-net-web-api/</a></p>&#xA;&#xA;<p>It used to be available as a NuGet package <code>Strathweb.CacheOutput.WebApi2</code>, but <a href="https://github.com/filipw/AspNetWebApi-OutputCache/issues/74" rel="nofollow">doesn't seem to be hosted anymore</a>, and is instead on GitHub -- <a href="https://github.com/filipw/AspNetWebApi-OutputCache" rel="nofollow">https://github.com/filipw/AspNetWebApi-OutputCache</a></p>&#xA;
 25415673 | <p>Check your packages folder.  It seems to me that this problem occurs when Nuget cannot, for whatever reason, delete the old package version.  So if you've got a "MyLib 4.0.3.0" folder and a "MyLib 4.0.5.0" folder, then it will show both of them in the list of installed packages, and it will think that MyLib needs to be updated.</p>&#xA;
 28094568 | <p>You need to write that yourself, based on <code>Task.Delay</code> (which internally uses a <code>System.Threading.Timer</code>) that creates a task that completes after a certain time:</p>&#xA;&#xA;<pre><code>async Task AutoRefresh(TimeSpan interval, CancellationToken token)&#xA;{&#xA;    while (!token.IsCancellationRequested)&#xA;    {&#xA;        RefreshChart();&#xA;        await Task.Delay(interval);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can call it at startup with the specific interval and a <code>CancellationToken</code> to signal when it should stop. This will return a task you can <code>await</code> at the end to make sure you don't have any unhandled exceptions:</p>&#xA;&#xA;<pre><code>// start&#xA;var interval = GetIntervalFromUser();&#xA;_cts = new CancellationTokenSource();&#xA;_autoRefreshTask = AutoRefresh(interval, cts.Token);&#xA;&#xA;// end&#xA;_cts.Cancel();&#xA;try&#xA;{&#xA;    await _autoRefreshTask;&#xA;}&#xA;catch (Exception e)&#xA;{&#xA;    // handle exception&#xA;}&#xA;</code></pre>&#xA;&#xA;<hr>&#xA;&#xA;<p>You can use <code>async-await</code> in .Net 4.0 with the <a href="https://www.nuget.org/packages/Microsoft.Bcl.Async/" rel="nofollow"><code>Microsoft.Bcl.Async</code> nuget</a></p>&#xA;
(9 rows)

Time: 192,167 ms


-- D3

SELECT * from exact_match('regions', 'blocks', 'constructors');

 postid |                                                                                                                                                                                                                                                                                                      postbody                                                                                                                                                                                                                                                                                                       

   9063 | <p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx" rel="nofollow">Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;
(1 row)

Time: 623,938 ms


-- D4

SELECT * from best_match('constructors', 'regions', 'blocks');

  postid  | rank |body

     9063 |    3 | <p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx" rel="nofollow">Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;
   296515 |    2 | <p>Our Business Objects all have Regions - and we love them.</p>&#xA;&#xA;<p>We have;</p>&#xA;&#xA;<ul>&#xA;<li>Business Properties and Methods</li>&#xA;<li>Shared Methods</li>&#xA;<li>Constructors</li>&#xA;<li>Authorization</li>&#xA;<li>Data Access</li>&#xA;<li>Events</li>&#xA;</ul>&#xA;&#xA;<p>We have a few others depending on the type of Business Object we are dealing with (Subscriber etc)</p>&#xA;&#xA;<p>For many classes regions just get in the way - but for our standard business objects they save us a ton of time.   These Business Objects are code gen'd, so they are very consistent.  Can get to where I want to be way faster than the clutter if they aren't, and the consistency makes it easy to find each other's stuff.</p>&#xA;
     9033 |    2 | <p>This came to my mind after I learned the following from <a href="http://www.stackoverflow.com/questions/8941/generic-type-checking">this question</a>:</p>&#xA;&#xA;<pre><code>where T : struct&#xA;</code></pre>&#xA;&#xA;<p>We, C# developers, all know the basics of C#. I mean declarations, conditionals, loops, operators, etc.</p>&#xA;&#xA;<p>Some of us even mastered the stuff like <a href="http://msdn.microsoft.com/en-us/library/512aeb7t.aspx" rel="nofollow">Generics</a>, <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx" rel="nofollow">anonymous types</a>, <a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx" rel="nofollow">lambdas</a>, <a href="http://msdn.microsoft.com/en-us/library/bb397676.aspx" rel="nofollow">LINQ</a>, ...</p>&#xA;&#xA;<p>But what are the most hidden features or tricks of C# that even C# fans, addicts, experts barely know?</p>&#xA;&#xA;<h1>Here are the revealed features so far:</h1>&#xA;&#xA;<p><br /></p>&#xA;&#xA;<h2>Keywords</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx" rel="nofollow"><code>yield</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035">Michael Stum</a></li>&#xA;<li><code>var</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035">Michael Stum</a></li>&#xA;<li><code>using()</code> statement by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036">kokos</a></li>&#xA;<li><code>readonly</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036">kokos</a></li>&#xA;<li><code>as</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9041#9041">Mike Stone</a></li>&#xA;<li><code>as</code> / <code>is</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9070#9070">Ed Swangren</a></li>&#xA;<li><code>as</code> / <code>is</code> (improved) by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9092#9092">Rocketpants</a></li>&#xA;<li><code>default</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9639#9639">deathofrats</a></li>&#xA;<li><code>global::</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/12152#12152">pzycoman</a></li>&#xA;<li><code>using()</code> blocks by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/12316#12316">AlexCuse</a></li>&#xA;<li><code>volatile</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/59691#59691">Jakub ┼áturc</a></li>&#xA;<li><code>extern alias</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/37926#37926">Jakub ┼áturc</a></li>&#xA;</ul>&#xA;&#xA;<h2>Attributes</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx" rel="nofollow"><code>DefaultValueAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9035#9035">Michael Stum</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.obsoleteattribute.aspx" rel="nofollow"><code>ObsoleteAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9037#9037">DannySmurf</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerdisplayattribute.aspx" rel="nofollow"><code>DebuggerDisplayAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9048#9048">Stu</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerbrowsableattribute.aspx" rel="nofollow"><code>DebuggerBrowsable</code></a> and <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerstepthroughattribute.aspx" rel="nofollow"><code>DebuggerStepThrough</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/33474#33474">bdukes</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.threadstaticattribute%28VS.71%29.aspx" rel="nofollow"><code>ThreadStaticAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/13932#13932">marxidad</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/system.flagsattribute.aspx" rel="nofollow"><code>FlagsAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/21752#21752">Martin Clarke</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/4xssyw96.aspx" rel="nofollow"><code>ConditionalAttribute</code></a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/35342#35342">AndrewBurns</a></li>&#xA;</ul>&#xA;&#xA;<h2>Syntax</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx" rel="nofollow"><code>??</code></a> (coalesce nulls) operator by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036">kokos</a></li>&#xA;<li>Number flaggings by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9038#9038">Nick Berardi</a></li>&#xA;<li><code>where T:new</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9067#9067">Lars M├ªhlum</a></li>&#xA;<li>Implicit generics by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099">Keith</a></li>&#xA;<li>One-parameter lambdas by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099">Keith</a></li>&#xA;<li>Auto properties by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099">Keith</a></li>&#xA;<li>Namespace aliases by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099">Keith</a></li>&#xA;<li>Verbatim string literals with @ by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9114#9114">Patrick</a></li>&#xA;<li><code>enum</code> values by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/11738#11738">lfoust</a></li>&#xA;<li>@variablenames by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/14088#14088">marxidad</a></li>&#xA;<li><code>event</code> operators by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/14277#14277">marxidad</a></li>&#xA;<li>Format string brackets by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/15321#15321">Portman</a></li>&#xA;<li>Property accessor accessibility modifiers by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/15715#15715">xanadont</a></li>&#xA;<li>Conditional (ternary) operator (<code>?:</code>) by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/16450#16450">JasonS</a></li>&#xA;<li><code>checked</code> and <code>unchecked</code> operators by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/355991#355991">Binoj Antony</a></li>&#xA;<li><code>implicit and explicit</code> operators by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/121470#121470">Flory</a></li>&#xA;</ul>&#xA;&#xA;<h2>Language Features</h2>&#xA;&#xA;<ul>&#xA;<li>Nullable types by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9055#9055">Brad Barker</a></li>&#xA;<li>Anonymous types by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9099#9099">Keith</a></li>&#xA;<li><code>__makeref __reftype __refvalue</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9125#9125">Judah Himango</a></li>&#xA;<li>Object initializers by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9547#9547">lomaxx</a></li>&#xA;<li>Format strings by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/10207#10207">David in Dakota</a></li>&#xA;<li>Extension Methods by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/13932#13932">marxidad</a></li>&#xA;<li><code>partial</code> methods by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/16395#16395">Jon Erickson</a></li>&#xA;<li>Preprocessor directives by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/16482#16482">John Asbeck</a></li>&#xA;<li><code>DEBUG</code> pre-processor directive by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/29081#29081">Robert Durgin</a></li>&#xA;<li>Operator overloading by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/24914#24914">SefBkn</a></li>&#xA;<li>Type inferrence by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/28811#28811">chakrit</a></li>&#xA;<li>Boolean operators <a href="http://www.java2s.com/Tutorial/CSharp/0160__Operator-Overload/truefalseoperatorforComplex.htm" rel="nofollow">taken to next level</a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/32148#32148">Rob Gough</a></li>&#xA;<li>Pass value-type variable as interface without boxing by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/1820538#1820538">Roman Boiko</a></li>&#xA;<li>Programmatically determine declared variable type by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/1789985#1789985">Roman Boiko</a></li>&#xA;<li>Static Constructors by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/100321#100321">Chris</a></li>&#xA;<li>Easier-on-the-eyes / condensed ORM-mapping using LINQ by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/2026781#2026781">roosteronacid</a></li>&#xA;<li><code>__arglist</code> by <a href="http://stackoverflow.com/a/1836944/171819">Zac Bowling</a></li>&#xA;</ul>&#xA;&#xA;<h2>Visual Studio Features</h2>&#xA;&#xA;<ul>&#xA;<li>Select block of text in editor by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/1699477#1699477" title="block text selecting with alt key">Himadri</a></li>&#xA;<li>Snippets by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9037#9037">DannySmurf</a>  </li>&#xA;</ul>&#xA;&#xA;<h2>Framework</h2>&#xA;&#xA;<ul>&#xA;<li><code>TransactionScope</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042">KiwiBastard</a></li>&#xA;<li><code>DependantTransaction</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042">KiwiBastard</a></li>&#xA;<li><code>Nullable&lt;T&gt;</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9118#9118">IainMH</a></li>&#xA;<li><code>Mutex</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9181#9181">Diago</a></li>&#xA;<li><code>System.IO.Path</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9401#9401">ageektrapped</a></li>&#xA;<li><code>WeakReference</code> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/14723#14723">Juan Manuel</a></li>&#xA;</ul>&#xA;&#xA;<h2>Methods and Properties</h2>&#xA;&#xA;<ul>&#xA;<li><code>String.IsNullOrEmpty()</code> method by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042">KiwiBastard</a></li>&#xA;<li><code>List.ForEach()</code> method by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9042#9042">KiwiBastard</a></li>&#xA;<li><code>BeginInvoke()</code>, <code>EndInvoke()</code> methods by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9581#9581">Will Dean</a></li>&#xA;<li><code>Nullable&lt;T&gt;.HasValue</code> and <code>Nullable&lt;T&gt;.Value</code> properties by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/15393#15393">Rismo</a></li>&#xA;<li><code>GetValueOrDefault</code> method by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/18158#18158">John Sheehan</a></li>&#xA;</ul>&#xA;&#xA;<h2>Tips &amp; Tricks</h2>&#xA;&#xA;<ul>&#xA;<li>Nice method for event handlers by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9282#9282">Andreas H.R. Nilsson</a></li>&#xA;<li>Uppercase comparisons by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/12137#12137">John</a></li>&#xA;<li>Access anonymous types without reflection by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/13441#13441">dp</a></li>&#xA;<li>A quick way to lazily instantiate collection properties by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/58945#58945">Will</a></li>&#xA;<li>JavaScript-like anonymous inline-functions by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/1399130#1399130">roosteronacid</a></li>&#xA;</ul>&#xA;&#xA;<h2>Other</h2>&#xA;&#xA;<ul>&#xA;<li>netmodules by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/9036#9036">kokos</a>  </li>&#xA;<li><a href="http://www.albahari.com/nutshell/linqbridge.html" rel="nofollow">LINQBridge</a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/10886#10886">Duncan Smart</a>  </li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/concurrency/default.aspx" rel="nofollow">Parallel Extensions</a> by <a href="http://stackoverflow.com/questions/9033/hidden-features-of-c/31293#31293">Joel Coehoorn</a></li>&#xA;</ul>&#xA;
   169288 |    2 | <p>Often times, both partials and #regions are used as a crutch for bad design (e.g. class is too big or tries to do too many things).</p>&#xA;&#xA;<p>The <em>best</em> use I've had for #regions so far is the grouping of functionality that is seen in many different classes. For example, value objects that have getters, setters, constructors and supporting fields. I might very well group those ideas into regions. Its a matter of opinion, however, as to whether that makes code cleaner or harder to read.</p>&#xA;
     5929 |    2 | <p>This was talked about on <a href="http://www.codinghorror.com/blog/archives/001147.html">Coding Horror</a>.</p>&#xA;&#xA;<p>My personal belief is that is that they are useful, but like anything in excess can be too much. </p>&#xA;&#xA;<p>I use it to order my code blocks into :&#xA;<br>Enumerations&#xA;<br>Declarations&#xA;<br>Constructors&#xA;<br>Methods&#xA;<br>Event Handlers&#xA;<br>Properties</p>&#xA;
   217785 |    2 | <p>Region folding would be fine if I didn't have to manually maintain region groupings based on features of my code that are intrinsic to the language. For example, the compiler already knows it's a constructor. The IDE's code model already knows it's a constructor. But if I want to see a view of the code where the constructors are grouped together, for some reason I have to restate the fact that these things are constructors, by physically placing them together and then putting a group around them. The same goes for any other way of slicing up a class/struct/interface. What if I change my mind and want to see the public/protected/private stuff separated out into groups first, and then grouped by member kind?</p>&#xA;&#xA;<p>Using regions to mark out public properties (for example) is as bad as entering a redundant comment that adds nothing to what is already discernable from the code itself.</p>&#xA;&#xA;<p>Anyway, to avoid having to use regions for that purpose, I wrote a free, open source Visual Studio 2008 IDE add-in called Ora. It provides a grouped view automatically, making it far less necessary to maintain physical grouping or to use regions. <a href="http://www.codeplex.com/ora" rel="nofollow">You may find it useful</a>.</p>&#xA;
 19941412 |    2 | <p>here's the VB equivalent code to Samuel's answer that i use. notice i actually have 2 extensions functions, but i must admit i don't know why they are there. i copied my C# version years ago (maybe from this site) and it had both extension functions, but for what reason, i don't fully understand. i just copied it and how to use it, and i half understand all that goes on 'under the hood' with these complicated functions.</p>&#xA;&#xA;<pre><code>#Const System_ComponentModel = True&#xA;#Const System_Drawing = False&#xA;&#xA;Option Compare Binary&#xA;Option Explicit On&#xA;Option Strict On&#xA;&#xA;Imports System.Collections&#xA;Imports System.Runtime.CompilerServices ' for Extension() attribute&#xA;Imports System.Text&#xA;#If System_ComponentModel Then&#xA;Imports System.ComponentModel&#xA;#End If&#xA;#If System_Drawing Then&#xA;Imports System.Drawing&#xA;#End If&#xA;&#xA;Public Module MyExtensions&#xA;&#xA;    ' other #Region blocks are removed. i use many in my Extensions&#xA;    ' module/class. the below code is only the 2 relevant extension&#xA;    ' for this 'SafeInvoke' functionality. but i use other regions&#xA;    ' such as "String extensions" and "Numeric extensions". i use&#xA;    ' the above System_ComponentModel and System_Drawing compiler&#xA;    ' directives to include or exclude blocks of code that i want&#xA;    ' to either include or exclude in a project, which allows me to&#xA;    ' easily compare my code in one project with the same file in&#xA;    ' other projects to syncronise new changes across projects.&#xA;    ' you can scrap pretty much all the code above,&#xA;    ' but i'm giving it here so you see it in the full context.&#xA;&#xA;    #Region "ISynchronizeInvoke extensions"&#xA;&#xA;    #If System_ComponentModel Then&#xA;&#xA;        &lt;Extension()&gt;&#xA;        Public Function SafeInvoke(Of T As ISynchronizeInvoke, TResult)(isi As T, callFunction As Func(Of T, TResult)) As TResult&#xA;            If (isi.InvokeRequired) Then&#xA;                Dim result As IAsyncResult = isi.BeginInvoke(callFunction, New Object() {isi})&#xA;                Dim endresult As Object = isi.EndInvoke(result)&#xA;                Return DirectCast(endresult, TResult)&#xA;            Else&#xA;                Return callFunction(isi)&#xA;            End If&#xA;        End Function&#xA;&#xA;        ''' &lt;summary&gt;&#xA;        ''' This can be used in VB with:&#xA;        ''' txtMyTextBox.SafeInvoke(Sub(d) d.Text = "This is my new Text value.")&#xA;        ''' or:&#xA;        ''' txtMyTextBox.SafeInvoke(Sub(d) d.Text = myTextStringVariable)&#xA;        ''' &lt;/summary&gt;&#xA;        ''' &lt;typeparam name="T"&gt;&lt;/typeparam&gt;&#xA;        ''' &lt;param name="isi"&gt;&lt;/param&gt;&#xA;        ''' &lt;param name="callFunction"&gt;&lt;/param&gt;&#xA;        ''' &lt;remarks&gt;&lt;/remarks&gt;&#xA;        &lt;Extension()&gt;&#xA;        Public Sub SafeInvoke(Of T As ISynchronizeInvoke)(isi As T, callFunction As Action(Of T))&#xA;            If isi.InvokeRequired Then&#xA;                isi.BeginInvoke(callFunction, New Object() {isi})&#xA;            Else&#xA;                callFunction(isi)&#xA;            End If&#xA;        End Sub&#xA;&#xA;    #End If&#xA;&#xA;    #End Region&#xA;&#xA;    ' other #Region blocks are removed from here too.&#xA;&#xA;End Module&#xA;</code></pre>&#xA;&#xA;<p>And the C# version is:</p>&#xA;&#xA;<pre><code>#define System_ComponentModel&#xA;#undef  System_Drawing&#xA;&#xA;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;&#xA;#if System_ComponentModel&#xA;using System.ComponentModel;&#xA;#endif&#xA;#if System_Drawing&#xA;using System.Drawing;&#xA;#endif&#xA;&#xA;namespace MyCompany.Extensions&#xA;{&#xA;    static partial class MyExtensions&#xA;    {&#xA;&#xA;        // other #Region blocks are removed. i use many in my Extensions&#xA;        // module/class. the below code is only the 2 relevant extension&#xA;        // for this 'SafeInvoke' functionality. but i use other regions&#xA;        // such as "String extensions" and "Numeric extensions". i use&#xA;        // the above System_ComponentModel and System_Drawing compiler&#xA;        // directives to include or exclude blocks of code that i want&#xA;        // to either include or exclude in a project, which allows me to&#xA;        // easily compare my code in one project with the same file in&#xA;        // other projects to syncronise new changes across projects.&#xA;        // you can scrap pretty much all the code above,&#xA;        // but i'm giving it here so you see it in the full context.&#xA;&#xA;        #region ISynchronizeInvoke extensions&#xA;#if System_ComponentModel&#xA;&#xA;        public static TResult SafeInvoke&lt;T, TResult&gt;(this T isi, Func&lt;T, TResult&gt; callFunction) where T : ISynchronizeInvoke&#xA;        {&#xA;            if (isi.InvokeRequired)&#xA;            {&#xA;                IAsyncResult result = isi.BeginInvoke(callFunction, new object[] { isi });&#xA;                object endResult = isi.EndInvoke(result); return (TResult)endResult;&#xA;            }&#xA;            else&#xA;                return callFunction(isi);&#xA;        }&#xA;&#xA;        /// &lt;summary&gt;&#xA;        /// This can be used in C# with:&#xA;        /// txtMyTextBox.SafeInvoke(d =&gt; d.Text = "This is my new Text value.");&#xA;        /// or:&#xA;        /// txtMyTextBox.SafeInvoke(d =&gt; d.Text = myTextStringVariable);&#xA;        /// &lt;/summary&gt;&#xA;        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;&#xA;        /// &lt;param name="isi"&gt;&lt;/param&gt;&#xA;        /// &lt;param name="callFunction"&gt;&lt;/param&gt;&#xA;        public static void SafeInvoke&lt;T&gt;(this T isi, Action&lt;T&gt; callFunction) where T : ISynchronizeInvoke&#xA;        {&#xA;            if (isi.InvokeRequired) isi.BeginInvoke(callFunction, new object[] { isi });&#xA;            else&#xA;                callFunction(isi);&#xA;        }&#xA;&#xA;#endif&#xA;        #endregion&#xA;&#xA;        // other #Region blocks are removed from here too.&#xA;&#xA;    } // static class MyExtensions&#xA;&#xA;} // namespace&#xA;</code></pre>&#xA;&#xA;<p>Happy coding!</p>&#xA;
    75026 |    1 | <p>Delphi makes good use of virtual constructors in the VCL GUI framework: </p>&#xA;&#xA;<pre><code>type&#xA;  TComponent = class&#xA;  public&#xA;    constructor Create(AOwner: TComponent); virtual; // virtual constructor&#xA;  end;&#xA;&#xA;  TMyEdit = class(TComponent)&#xA;  public&#xA;    constructor Create(AOwner: TComponent); override; // override virtual constructor&#xA;  end;&#xA;&#xA;  TMyButton = class(TComponent)&#xA;  public&#xA;    constructor Create(AOwner: TComponent); override; // override virtual constructor&#xA;  end;&#xA;&#xA;  TComponentClass = class of TComponent;&#xA;&#xA;function CreateAComponent(ComponentClass: TComponentClass; AOwner: TComponent): TComponent;&#xA;begin&#xA;  Result := ComponentClass.Create(AOwner);&#xA;end;&#xA;&#xA;var&#xA;  MyEdit: TMyEdit;&#xA;  MyButton: TMyButton;&#xA;begin&#xA;  MyEdit := CreateAComponent(TMyEdit, Form) as TMyEdit;&#xA;  MyButton := CreateAComponent(TMyButton, Form) as TMyButton;&#xA;end;&#xA;</code></pre>&#xA;
 26896352 |    1 | <p>Although this has been answered many times before, I feel I need to clarify one thing: C# <em>supports</em> generic type inference on constructors. The problem is, it doesn't support neither adding generic parameters to constructors nor <em>type</em> generic type inference. Wanting to infer generic type argument of the <em>type itself</em> is basically the same as requiring <code>Foo.Bar(0)</code> to infer to <code>Foo&lt;int&gt;.Bar(0)</code>.</p>&#xA;
   568641 |    1 | <p>People complain about removing 'goto' from the language. I happen to think that any sort of conditional jump is highly overrated and that 'if' 'while' 'switch' and a general purpose 'for' loop are highly overrated and should be used with extreme caution.</p>&#xA;&#xA;<p>Everytime you make a comparison and conditional jump a tiny bit of complexity is added and this complexity adds up quickly once the call stack gets a couple hundred items deep.</p>&#xA;&#xA;<p>My first choice is to avoid the conditional, but if it isn't practical my next preference is to keep the conditional complexity in constructors or factory methods.</p>&#xA;&#xA;<p>Clearly this isn't practical for many projects and algorithms (like control flow loops), but it is something I enjoy pushing on.</p>&#xA;&#xA;<p>-Rick</p>&#xA;
   146454 |    1 | <p><em>POD</em> stands for <em>Plain Old Data</em> - that is, a <code>struct</code> (or <code>class</code>) without constructors, destructors and virtual members functions. <a href="http://en.wikipedia.org/wiki/Plain_Old_Data_Structures">Wikipedias article on POD</a> goes into a bit more detail and defines it as:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A Plain Old Data Structure in C++ is an aggregate class that contains only PODS as members, has no user-defined destructor, no user-defined copy assignment operator, and no nonstatic members of pointer-to-member type.</p>&#xA;</blockquote>&#xA;&#xA;<p>Greater detail can be found in <a href="http://stackoverflow.com/a/4178176/734069">this answer for C++98/03</a>. C++11 changed the rules surrounding POD, relaxing them greatly, thus <a href="http://stackoverflow.com/a/7189821/734069">necessitating a follow-up answer here</a>.</p>&#xA;
 11730161 |    1 | <p>I don't generally use code regions, except in one specific case - dependency properties.  Although dependecy properties are a pleasure to work with in most respects, their declaraions are an eyesore and they quickly clutter your code.  (As if managing GUI code was not already enough of a challenge...)</p>&#xA;&#xA;<p>I like to give the region the same exact name as the CLR property declaration (copy/paste it in there).  That way you can see the scope, type and name when it's collapsed - which is really all you care about 95% of the time.</p>&#xA;&#xA;<pre><code>   #region public int ObjectDepthThreshold&#xA;&#xA;    public int ObjectDepthThreshold&#xA;    {&#xA;        get { return (int)GetValue(ObjectDepthThresholdProperty); }&#xA;        set { SetValue(ObjectDepthThresholdProperty, value); }&#xA;    }&#xA;&#xA;    public static readonly DependencyProperty ObjectDepthThresholdProperty = DependencyProperty.Register(&#xA;        &amp;quot;ObjectDepthThreshold&amp;quot;,&#xA;        typeof(int),&#xA;        typeof(GotoXControls),&#xA;        new FrameworkPropertyMetadata((int)GotoXServiceState.OBJECT_DEPTH_THRESHOLD_DEFAULT,&#xA;            FrameworkPropertyMetadataOptions.AffectsRender,&#xA;            new PropertyChangedCallback(OnControlValueChanged)&#xA;        )&#xA;    );&#xA;&#xA;    #endregion&#xA;</code></pre>&#xA;&#xA;<p>When it's collapsed you just see</p>&#xA;&#xA;<pre><code>public int ObjectDepthThreshold&#xA;</code></pre>&#xA;&#xA;<p>If I have more than one dependency property, I like to start the next #region on the very next line.  That way you end up with all of them grouped together in your class, and the code is compact and readable.</p>&#xA;&#xA;<p>BTW if you just want to peek at the declaration, mouse hover over it.</p>&#xA;
   848055 |    1 | <p>You <em>might</em> be able to improve it by copying in cache-aligned blocks rather than by rows, as at the moment the stride of either src dest will be a miss ( depending whether delphi is row major or column major ).</p>&#xA;
   683155 |    1 | <p>The best answer is the one above about default arguments, but I had fun writing this, and it certainly does fit the bill for "multiple constructors". Use at your own risk.</p>&#xA;&#xA;<p>What about the <a href="http://docs.python.org/reference/datamodel.html#object.%5F%5Fnew%5F%5F"><strong>new</strong></a> method.</p>&#xA;&#xA;<p>"Typical implementations create a new instance of the class by invoking the superclassΓÇÖs <strong>new</strong>() method using super(currentclass, cls).<strong>new</strong>(cls[, ...]) with appropriate arguments and then modifying the newly-created instance as necessary before returning it."</p>&#xA;&#xA;<p>So you can have the <strong>new</strong> method modify your class definition by attaching the appropriate constructor method.</p>&#xA;&#xA;<pre><code>class Cheese(object):&#xA;    def __new__(cls, *args, **kwargs):&#xA;&#xA;        obj = super(Cheese, cls).__new__(cls)&#xA;        num_holes = kwargs.get('num_holes', random_holes())&#xA;&#xA;        if num_holes == 0:&#xA;            cls.__init__ = cls.foomethod&#xA;        else:&#xA;            cls.__init__ = cls.barmethod&#xA;&#xA;        return obj&#xA;&#xA;    def foomethod(self, *args, **kwargs):&#xA;        print "foomethod called as __init__ for Cheese"&#xA;&#xA;    def barmethod(self, *args, **kwargs):&#xA;        print "barmethod called as __init__ for Cheese"&#xA;&#xA;if __name__ == "__main__":&#xA;    parm = Cheese(num_holes=5)&#xA;</code></pre>&#xA;
   408918 |    1 | <p>I don't think there are any predefined 'preprocessor' symbols. However you can achieve what you want like this:</p>&#xA;&#xA;<ol>&#xA;<li><p>Create different configurations of your project, one for every version of CLR you want to support. </p></li>&#xA;<li><p>Choose a symbol like <code>VERSION2</code>, <code>VERSION3</code> etc. per CLR version.</p></li>&#xA;<li><p>In every configuration, define the one symbol associated with it and undefine all others. </p></li>&#xA;<li><p>Use these symbols in conditional compilation blocks.</p></li>&#xA;</ol>&#xA;
    96316 |    1 | <p>Header file guards necessitate macros.</p>&#xA;&#xA;<p>Are there any other areas that <strong>necessitate</strong> macros?  Not many (if any).</p>&#xA;&#xA;<p>Are there any other situations that benefit from macros?  YES!!!</p>&#xA;&#xA;<p>One place I use macros is with very repetitive code.  For example, when wrapping C++ code to be used with other interfaces (.NET, COM, Python, etc...), I need to catch different types of exceptions.  Here's how I do that:</p>&#xA;&#xA;<pre><code>#define HANDLE_EXCEPTIONS \&#xA;catch (::mylib::exception&amp; e) { \&#xA;    throw gcnew MyDotNetLib::Exception(e); \&#xA;} \&#xA;catch (::std::exception&amp; e) { \&#xA;    throw gcnew MyDotNetLib::Exception(e, __LINE__, __FILE__); \&#xA;} \&#xA;catch (...) { \&#xA;    throw gcnew MyDotNetLib::UnknownException(__LINE__, __FILE__); \&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>I have to put these catches in every wrapper function.  Rather than type out the full catch blocks each time, I just type:</p>&#xA;&#xA;<pre><code>void Foo()&#xA;{&#xA;    try {&#xA;        ::mylib::Foo()&#xA;    }&#xA;    HANDLE_EXCEPTIONS&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This also makes maintenance easier.  If I ever have to add a new exception type, there's only one place I need to add it.</p>&#xA;&#xA;<p>There are other useful examples too:  many of which include the <code>__FILE__</code> and <code>__LINE__</code> preprocessor macros.</p>&#xA;&#xA;<p>Anyway, macros are very useful when used correctly.  Macros are not evil -- their <strong>misuse</strong> is evil.</p>&#xA;
  9626059 |    1 | <p>Obviously, window.onbeforeunload has encountered its fair share of problems with Chrome as I've seen from all the problems I've encountered. What's the most recent work around?</p>&#xA;&#xA;<p>The only thing I've got even close to working is <a href="http://stackoverflow.com/questions/4802007/window-onbeforeunload-not-working-in-chrome">this</a>:</p>&#xA;&#xA;<pre><code>window.onbeforeunload = function () { return "alert" };&#xA;</code></pre>&#xA;&#xA;<p>However, if I substitute return "alert" with something like alert("blah"), I get nothing from Chrome.</p>&#xA;&#xA;<p>I saw in <a href="http://stackoverflow.com/questions/6790854/window-onbeforeunload-not-working-in-chrome">this question</a> that Google purposefully blocks this. Good for them... but what if I want to make an AJAX call when someone closes the window? In my case, I want to know when someone has left the chatroom on my website, signalled by the window closing. </p>&#xA;&#xA;<p>I want to know if there's a way to either <br>&#xA;(a): fix the window.onbeforeunload call so that I can put AJAX in there<br>&#xA;or<br>&#xA;(b): get some other way of determining that a window has closed in Chrome<br></p>&#xA;
  9666697 |    1 | <p>The stack trace you post actually tells you the exception, which in this case is an <a href="http://msdn.microsoft.com/en-us/library/system.applicationexception.aspx" rel="nofollow"><code>ApplicationException</code></a> which has 'bubbled up from'* an <a href="http://msdn.microsoft.com/en-us/library/system.reflection.targetinvocationexception.aspx" rel="nofollow"><code>TargetInvocationException</code></a>:</p>&#xA;&#xA;<pre><code>TargetInvocationException: Exception has been thrown by the target of an invocation.&#xA;</code></pre>&#xA;&#xA;<p>*The thing is, you catch the <em>proper</em> exception and then throw your own exception (of a type that shouldn't actually be thrown but only derived from to create specific, custom exception types eligible to be thrown.)</p>&#xA;&#xA;<p>Incidentally, <code>TargetInvocationException</code>'s <em>can</em> be tough to nail down, static constructors being a culprit I make mind to keep aware of, but not knowing your code I can't say.</p>&#xA;
  8523361 |    1 | <pre><code>Foo(int num): bar(num)    &#xA;</code></pre>&#xA;&#xA;<p>This construct is called a <strong>Member Initializer List</strong> in C++.</p>&#xA;&#xA;<p>Simply said, it <strong>initializes</strong> your member <code>bar</code> to a value <code>num</code>.   </p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>What is the difference between Initializing and Assignment inside a constructor?</h2>&#xA;&#xA;<p><strong>Member Initialization:</strong>  </p>&#xA;&#xA;<pre><code>Foo(int num): bar(num) {};&#xA;</code></pre>&#xA;&#xA;<p><strong>Member Assignment:</strong></p>&#xA;&#xA;<pre><code>Foo(int num)&#xA;{&#xA;   bar = num;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.</p>&#xA;&#xA;<p>When you <strong><em>initialize</em></strong> fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.</p>&#xA;&#xA;<p>If you use <strong><em>assignment</em></strong> then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.</p>&#xA;&#xA;<p>As you see there is an additional overhead of creation &amp; assignment in the latter, which might be considerable for user defined classes.</p>&#xA;&#xA;<pre><code>Cost of Member Initialization = Object Construction &#xA;Cost of Member Assignment = Object Construction + Assignment&#xA;</code></pre>&#xA;&#xA;<p>The latter is actually equivalent to:</p>&#xA;&#xA;<pre><code>Foo(int num) : bar() {bar = num;}&#xA;</code></pre>&#xA;&#xA;<p>While the former is equivalent to just:</p>&#xA;&#xA;<pre><code>Foo(int num): bar(num){}&#xA;</code></pre>&#xA;&#xA;<p>For an inbuilt (your code example) or POD class members there is no practical overhead.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>When do you HAVE TO use Member Initializer list?</h2>&#xA;&#xA;<p>You will <strong>have(rather forced) to</strong> use a Member Initializer list if:</p>&#xA;&#xA;<ul>&#xA;<li>Your class has a reference member</li>&#xA;<li>Your class has a non static const member or</li>&#xA;<li>Your class member doesn't have a default constructor or</li>&#xA;<li>For initialization of base class members or </li>&#xA;<li>When constructorΓÇÖs parameter name is same as data member(this is not really a MUST)</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<h2>A code example:</h2>&#xA;&#xA;<pre><code>class MyClass&#xA;{&#xA;    public:&#xA;        //Reference member, has to be Initialized in Member Initializer List&#xA;        int &amp;i;       &#xA;        int b;&#xA;        //Non static const member, must be Initialized in Member Initializer List&#xA;        const int k;  &#xA;&#xA;    //ConstructorΓÇÖs parameter name b is same as class data member &#xA;    //Other way is to use this-&gt;b to refer to data member&#xA;    MyClass(int a, int b, int c):i(a),b(b),k(c)&#xA;    {&#xA;         //Without Member Initializer&#xA;         //this-&gt;b = b;&#xA;    }&#xA;};&#xA;&#xA;class MyClass2:public MyClass&#xA;{&#xA;    public:&#xA;        int p;&#xA;        int q;&#xA;        MyClass2(int x,int y,int z,int l,int m):MyClass(x,y,z),p(l),q(m)&#xA;        {&#xA;        }&#xA;&#xA;};&#xA;&#xA;int main()&#xA;{&#xA;    int x = 10;&#xA;    int y = 20;&#xA;    int z = 30;&#xA;    MyClass obj(x,y,z);&#xA;&#xA;    int l = 40;&#xA;    int m = 50;&#xA;    MyClass2 obj2(x,y,z,l,m);&#xA;&#xA;    return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<ul>&#xA;<li><code>MyClass2</code> doesn't have a default constructor so it has to be initialized through member initializer list.</li>&#xA;<li>Base class <code>MyClass</code> does not have a default constructor, So to initialize its member one will need to use Member Initializer List.</li>&#xA;</ul>&#xA;&#xA;<p><strong><a href="http://www.ideone.com/VywMM">Online version of code sample</a></strong>.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h2>Important points to Note while using Member Initializer Lists:</h2>&#xA;&#xA;<p><strong>Class Member variables are always initialized in the order in which they are declared in the class.</strong></p>&#xA;&#xA;<p>They are <strong>not</strong> initialized in the order in which they are specified in the Member Initalizer List.<br>&#xA;In short, Member initialization list does not determine the order of initialization.      </p>&#xA;&#xA;<p>Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.</p>&#xA;
  2003391 |    1 | <p>VBScript's With blocks:</p>&#xA;&#xA;<pre><code>With xml.appendChild(xml.createElement("category"))&#xA;  .setAttribute("id",id)&#xA;  .setAttribute("keywords",keywords)&#xA;  With .appendChild(xml.createElement("item"))&#xA;    .setAttribute("count",count)&#xA;    .setAttribute("tip",tip)&#xA;    .appendChild(xml.createTextNode(text))&#xA;  End With&#xA;End With&#xA;</code></pre>&#xA;
   827182 |    1 | <blockquote>&#xA;  <p><em>We've run into some problems with the</em>&#xA;  <em>static initialization order fiasco,</em>&#xA;  <em>and I'm looking for ways to comb</em>&#xA;  <em>through a whole lot of code to find</em>&#xA;  <em>possible occurrences. Any suggestions</em>&#xA;  <em>on how to do this efficiently?</em></p>&#xA;</blockquote>&#xA;&#xA;<p>It's not a trivial problem but at least it can done following fairly simple steps if you have an easy-to-parse intermediate-format representation of your code.</p>&#xA;&#xA;<p>1) Find all the globals that have non-trivial constructors and put them in a list.</p>&#xA;&#xA;<p>2) For each of these non-trivially-constructed objects, generate the entire potential-function-tree called by their constructors.</p>&#xA;&#xA;<p>3) Walk through the non-trivially-constructor function tree and if the code references any other non-trivially constructed globals (which are quite handily in the list you generated in step one), you have a potential early-static-initialization-order issue.</p>&#xA;&#xA;<p>4) Repeat steps 2 &amp; 3 until you have exhausted the list generated in step 1.</p>&#xA;&#xA;<p>Note: you may be able to optimize this by only visiting the potential-function-tree once per object class rather than once per global instance if you have multiple globals of a single class.</p>&#xA;
   287438 |    1 | <p>Nice answers, I agree with them that say it sometimes reflects bad coding and design but #region actually is usefull if you're creating documentation (MSDN style) with the SandCastle.&#xA;Lets say you have a public API and there is some base class that you want to give an example of usage for. Then you would properly document your public methods and add an example region where you could copy and paste some code. Problem with this is that when/if your base class changes you're supposed to change the example eventually. Better solution is to include a sample code project in your solution and build it all together, so everytime you build your solution if the sample code is not up to date it will not compile. So what does that have to do with regions you will be asking your self by now. Well look at this sample: </p>&#xA;&#xA;<pre><code>/// &lt;example&gt;&#xA;    /// The following code sample is an implementation of LoadPublishedVersion() for XmlPageProvider.&#xA;    /// &lt;code source="../CodeSamples/EPiServerNET/PageProvider/XmlPageProvider.cs" region="LoadPublishedVersion" lang="cs"/&gt;&#xA;    /// &lt;/example&gt;&#xA;</code></pre>&#xA;&#xA;<p>Notice there is a link to the source code sample file and region for the method that you want to expose as a sample in your documentation. <a href="http://sdk.episerver.com/library/cms5/html/M_EPiServer_Core_PageProviderBase_LoadPublishedVersion_1.htm" rel="nofollow">See here the result</a>. That method needs to be in a proper region and will be automatically included in your documentation. That's why I wouldn't throw away #region yet.</p>&#xA;
  8179456 |    1 | <p>Here i've got some code to "transfer" an inner core model to an "output" model for external plugins. </p>&#xA;&#xA;<p>For doing this, I create new instances based on the concrete subtype of a passed OldConnection and pass (with a cast) the old instance into the constructor, so i can easily maintain the inner data for getters and setters.</p>&#xA;&#xA;<p>So, OldIncoming, OldOutgoing and OldExpected are subtypes of OldConnection. MyNewIncoming, MyNewOutgoing and MyNewExpected are subtypes of MyNewConnection. Unfortunately, I cant change the inner core model and I need concrete types in the constructors.</p>&#xA;&#xA;<p>Code looks pretty ugly, but I just cant find a better solution for it, any ideas? </p>&#xA;&#xA;<pre><code>private MyNewConnection createIConnectedSubtypeInstance(OldConnection connection) {&#xA;&#xA;    if (connection instanceof OldIncoming){&#xA;        return new MyNewIncoming((OldIncoming) connection);&#xA;    }&#xA;    if (connection instanceof OldOutgoing){&#xA;        return new MyNewOutgoing((OldOutgoing) connection);&#xA;    }&#xA;    .&#xA;    .&#xA;    .&#xA;    if (connection instanceof OldExpected){&#xA;        return new MyNewExpected((OldExpected) connection);&#xA;    }&#xA;&#xA;    return new MyNewConnection(connection);&#xA;}&#xA;</code></pre>&#xA;
  2894703 |    1 | <p>There's really nothing all that special about GTK+, it's a pretty standard C API and so any IDE that lets you program C is going to work well for GTK+. Examples include <a href="http://www.eclipse.org/" rel="nofollow">Eclipse</a> and <a href="http://www.codeblocks.org/" rel="nofollow">Code::Blocks</a>.</p>&#xA;&#xA;<p>You can also use <a href="http://glade.gnome.org/" rel="nofollow">Glade</a> as RAD tool for developing GTK+ GUIs in a graphical way. Use of Glade is pretty much IDE-independent, though.</p>&#xA;
   263628 |    1 | <p>I will differ with what appears to be the common opinion.  In this case I think a portfolio is very little more than a collection of funds... By using inheritance you allow the use of multiple constructors, as in</p>&#xA;&#xA;<pre><code>public Portfolio(CLient client) {};&#xA;public Portfolio(Branch branch, bool Active, decimal valueThreshold)&#xA;{&#xA;    // code to populate collection with all active portfolios at the specified branch whose total vlaue exceeds specified threshold &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>and indexers as in:</p>&#xA;&#xA;<pre><code>public Fund this[int fundId] { get { return this.fundList[fundId]; } }&#xA;</code></pre>&#xA;&#xA;<p>etc.  etc.</p>&#xA;&#xA;<p>if you want to be able to treat variables of type Portfolio as a collection of funds, with the associated syntax, then this is the better approach.</p>&#xA;&#xA;<pre><code>Portfolio BobsPortfolio = new Portfolio(Bob); &#xA;&#xA;foreach (Fund fund in BobsPortfolio)&#xA;{&#xA;    fund.SendStatement();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>or stuff like that</p>&#xA;
  4126886 |    1 | <p>I think you are missing the <strong>sqlCom.ExecuteNonQuery();</strong></p>&#xA;&#xA;<p>also, instead of running the <strong>select func_test(7) from dual;</strong> lets switch it to run the function and pass in the param</p>&#xA;&#xA;<pre><code>  OracleConnection oracleCon = new OracleConnection(ConfigurationManager.ConnectionStrings["MyConnectionString"].ConnectionString);&#xA;&#xA;&#xA;  // Set the command&#xA;&#xA;  string anonymous_block = "begin " +&#xA;                              "  :refcursor1 := func_test(7) ;" +&#xA;                              "end;";  &#xA; //fill in your function and variables via the above example&#xA;  OracleCommand sqlCom= con.CreateCommand();&#xA;  sqlCom.CommandText = anonymous_block;&#xA;&#xA;  // Bind &#xA;  sqlCom.Parameters.Add("refcursor1", OracleDbType.RefCursor);&#xA;  sqlCom.Parameters[0].Direction = ParameterDirection.ReturnValue;&#xA;&#xA;  try &#xA;  {&#xA;    // Execute command; Have the parameters populated&#xA;    sqlCom.ExecuteNonQuery();&#xA;&#xA;    // Create the OracleDataAdapter&#xA;    OracleDataAdapter da = new OracleDataAdapter(sqlCom);&#xA;&#xA;    // Populate a DataSet with refcursor1.&#xA;    DataSet ds = new DataSet();&#xA;    da.Fill(ds, "refcursor1", (OracleRefCursor)(sqlCom.Parameters["refcursor1"].Value));&#xA;&#xA;    // Print out the field count the REF Cursor&#xA;    Console.WriteLine("Field count: " + ds.Tables["refcursor1"].Columns.Count);&#xA;  }&#xA;  catch (Exception e)&#xA;  {&#xA;    Console.WriteLine("Error: {0}", e.Message);&#xA;  }&#xA;  finally&#xA;  {&#xA;    // Dispose OracleCommand object&#xA;    cmd.Dispose();&#xA;&#xA;    // Close and Dispose OracleConnection object&#xA;    con.Close();&#xA;    con.Dispose();}&#xA;</code></pre>&#xA;&#xA;<p>this is based on the example ODP that can be found @ %ora_home%\Client_1\ODP.NET\samples\RefCursor\Sample5.csproj</p>&#xA;&#xA;<p>If you want to avoid (for better or worst!) the custom built param collection for each proc/function call you can get around that by utilizing  anonymous blocks in your code, I have ammended (once again untested!) the code above to reflect this technique.&#xA;Here is a nice blog (from none other than Mark Williams) showing this technique.&#xA;<a href="http://oradim.blogspot.com/2007/04/odpnet-tip-anonymous-plsql-and.html">http://oradim.blogspot.com/2007/04/odpnet-tip-anonymous-plsql-and.html</a></p>&#xA;
     5962 |    1 | <p>I prefer partial classes as opposed to regions.</p>&#xD;&#xA;&#xD;&#xA;<p>Extensive use of regions by others also give me the impression that someone, somewhere, is violating the Single Responsibility Principle and is trying to do too many things with one object.</p>
     9049 |    1 | <p>Regions must never be used inside methods. They may be used to group methods but this must be handled with extreme caution so that the reader of the code does not go insane. There is no point in folding methods by their modifiers. But sometimes folding may increase readability. For e.g. grouping some methods that you use for working around some issues when using an external library and you won't want to visit too often may be helpful. But the coder must always seek for solutions like wrapping the library with appropriate classes in this particular example. When all else fails, use folding for improving readibility.</p>&#xA;
   335422 |    1 | <p>The first thing you need to do is make a list of all static objects that have non-trivial constructors.</p>&#xA;&#xA;<p>Given that, you either need to plug through them one at a time, or simply replace them all with singleton-pattern objects.</p>&#xA;&#xA;<p>The singleton pattern comes in for a lot of criticism, but the lazy "as-required" construction is a fairly easy way to fix the majority of the problems now and in the future.</p>&#xA;&#xA;<p>old...</p>&#xA;&#xA;<pre><code>MyObject myObject&#xA;</code></pre>&#xA;&#xA;<p>new...</p>&#xA;&#xA;<pre><code>MyObject &amp;myObject()&#xA;{&#xA;  static MyObject myActualObject;&#xA;  return myActualObject;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Of course, if your application is multi-threaded, this can cause you more problems than you had in the first place...</p>&#xA;
  2034614 |    1 | <h2>Compile-time polymorphism</h2>&#xA;&#xA;<p>(Also known as syntactic polymorphism and static polymorphism, contrast with runtime polymorphism.)</p>&#xA;&#xA;<p>With template functions, one can write code that relies on type constructors and call signatures of families of parametrized types, without having to introduce a common base class.</p>&#xA;&#xA;<p>In the book <a href="http://www.elementsofprogramming.com/book.html" rel="nofollow"><em>Elements of Programming</em></a>, the authors refer to this treatment of types as <em>abstract genera</em>. With <em>concepts</em> one can specify the requirements on such type parameters, though C++ doesn't mandate such specifications.</p>&#xA;&#xA;<p>Two simple examples:</p>&#xA;&#xA;<pre><code>#include &lt;stdexcept&gt;&#xA;&#xA;template &lt;typename T&gt;&#xA;T twice(T n) {&#xA;  return 2 * n;&#xA;}&#xA;&#xA;InIt find(InIt f, InIt l,&#xA;          typename std::iterator_traits&lt;InIt&gt;::reference v)&#xA;{&#xA;  while (f != l &amp;&amp; *f != v)&#xA;    ++f;&#xA;  return f;&#xA;}   &#xA;&#xA;int main(int argc, char* argv[]) {&#xA;  if (6 != twice(3))&#xA;    throw std::logic_error("3 x 2 = 6");&#xA;&#xA;  int const nums[] = { 1, 2, 3 };&#xA;  if (nums + 4 != find(nums, nums + 4, 42))&#xA;    throw std::logic_error("42 should not have been found.");&#xA;&#xA;  return 0;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>One can call <code>twice</code> with any regular type that has a binary <code>*</code> operator defined. Similarly, one can call <code>find()</code> with any types that are comparable and that model <em>Input Iterator</em>. One set of code operates similarly on different types, with no shared base classes in sight.</p>&#xA;&#xA;<p>Of course, what's really going on here is that it's the same source code being <em>expanded</em> into various type-specific functions at template instantiation time, each with separate generated machine code.  Accommodating the same set of types without templates would have required either 1) separate hand-written functions with specific signatures, or 2) runtime polymorphism through virtual functions.</p>&#xA;
 12206783 |    1 | <p>To make your code always work on weakly ordered architectures, you must put a MemoryBarrier before you write s_Initialized.</p>&#xA;&#xA;<pre><code>s_Provider = new MemershipProvider;&#xA;&#xA;// MUST PUT BARRIER HERE to make sure the memory writes from the assignment&#xA;// and the constructor have been wriitten to memory&#xA;// BEFORE the write to s_Initialized!&#xA;Thread.MemoryBarrier();&#xA;&#xA;// Now that we've guaranteed that the writes above&#xA;// will be globally first, set the flag&#xA;s_Initialized = true;&#xA;</code></pre>&#xA;&#xA;<p>The memory writes that happen in the MembershipProvider constructor and the write to s_Provider are not guaranteed to happen before you write to s_Initialized on a weakly ordered processor.</p>&#xA;&#xA;<p>A lot of thought in this thread is about whether something is atomic or not. That is not the issue. The issue is <strong>the order that your thread's writes are visible to other threads</strong>. On weakly ordered architectures, writes to memory do not occur in order and THAT is the real issue, not whether a variable fits within the data bus.</p>&#xA;&#xA;<p><strong>EDIT:</strong> Actually, I'm mixing platforms in my statements. In C# the CLR spec requires that writes are globally visible, in-order (by using expensive store instructions for every store if necessary). Therefore, you don't need to actually have that memory barrier there. However, if it were C or C++ where no such guarantee of global visibility order exists, and your target platform may have weakly ordered memory, and it is multithreaded, then you would need to ensure that the constructors writes are globally visible before you update s_Initialized, which is tested outside the lock.</p>&#xA;
    82422 |    1 | <p>The benefit of CSS is that it separates design and layout from content.</p>&#xA;&#xA;<p>If you have tabular data then it makes sense to use a <code>&lt;TABLE&gt;</code> tag.  If you want to layout different blocks of content then you should use <code>&lt;DIV&gt;</code> or <code>&lt;SPAN&gt;</code> and CSS.</p>&#xA;
   287444 |    1 | <p>I often use them <em>instead of comments</em> to order groups of functionality in the body of a class, e.g. "Configuration public interface", "Status public interface", "internal processing" and "internal worker thread management".</p>&#xA;&#xA;<p>Using the keyboard shortcuts to "collapse to definitions" and "expand current block", I can easily navigate even larger classes. </p>&#xA;&#xA;<p>Unfortunately, Regions are broken for C++, and MS doesn't think it needs to be fixed.</p>&#xA;
  9382920 |    1 | <p>This is my concrete implementation based off of <a href="http://stackoverflow.com/a/9367854/343238">avandeursen's answer</a>:</p>&#xA;&#xA;<pre><code>[TestClass]&#xA;public abstract class IMyInterfaceTests&#xA;{&#xA;    protected abstract IMyInterface CreateInstance();&#xA;&#xA;    [TestMethod]&#xA;    public void SomeTest()&#xA;    {&#xA;        IMyInterface instance = CreateInstance();&#xA;        // Run the test&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Each interface implementation then defines the following test class:</p>&#xA;&#xA;<pre><code>[TestClass]&#xA;public class MyImplementationTests : IMyInterfaceTests&#xA;{&#xA;    protected override IMyInterface CreateInstance()&#xA;    {&#xA;        return new MyImplementation();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><code>SomeTest</code> is run once for each concrete <code>TestClass</code> derived from <code>IMyInterfaceTests</code>. By using an abstract base class, I avoid the need for any mock implementations. Be sure to add <code>TestClassAttribute</code> to both classes or this won't work. Lastly, you can add any implementation-specific tests (such as constructors) to the child class if desired.</p>&#xA;
   871024 |    1 | <p>First, as counterpoint to Charlie's answer, this isn't intrinsic to functional programming.  OCaml has the concept of <a href="http://stackoverflow.com/q/5131954/60462">open unions or polymorphic variants</a>, which essentially do what you want.</p>&#xA;&#xA;<p>As for <em>why</em>, I believe this choice was made for Haskell because </p>&#xA;&#xA;<ul>&#xA;<li>this lets types be predictable - their are only a finite number of constructors for each</li>&#xA;<li>it's easy to define your own types.</li>&#xA;<li>many Haskell functions are polymorphic, and classes let you extend custom types to fit function parameters (think Java's Interfaces).</li>&#xA;</ul>&#xA;&#xA;<p>So if you'd rather have a <code>data Color r b g = Red r | Blue b | Green g</code> type, it's easy to make, and you can easily make it act like a monad or a functor or however other functions need.</p>&#xA;
   175511 |    1 | <p>Java processing does a neat trick on variable definition if you do not use a default initializer.</p>&#xA;&#xA;<pre>&#xA;{&#xA;   int x;&#xA;&#xA;   if(whatever)&#xA;      x=1;&#xA;&#xA;   if(x == 1)&#xA;      ...&#xA;}&#xA;</pre>&#xA;&#xA;<p>This will give you an error at compile time that you have a path where X isn't properly defined.  This has helped me a few times, and I've taken to considering default initialization like these:</p>&#xA;&#xA;<pre>&#xA;int x=0;&#xA;String s=null;&#xA;</pre>&#xA;&#xA;<p>to be a bad pattern since it blocks this helpful checking.</p>&#xA;&#xA;<p>That said, sometimes it's difficult to get around--I have had to go back and edit in the =null when it made sense as a default, but I never put it in on the first pass any more.</p>&#xA;
  2790486 |    1 | <p>Here is how I normally do it.  This avoids the whole 'IsValueType' or searching for constructors issues altogether.</p>&#xA;&#xA;<pre><code>public static object MakeDefault(this Type type)&#xA;{&#xA;    var makeDefault = typeof(ExtReflection).GetMethod("MakeDefaultGeneric");&#xA;    var typed = makeDefault.MakeGenericMethod(type);&#xA;    return typed.Invoke(null, new object[] { });&#xA;}&#xA;&#xA;public static T MakeDefaultGeneric&lt;T&gt;()&#xA;{&#xA;    return default(T);&#xA;}&#xA;</code></pre>&#xA;
 22613670 |    1 | <p>No, there is no memory leak in this function and using alloca won't cause a memory leak as it's allocated on the stack. From <a href="http://www.gnu.org/software/libc/manual/html_mono/libc.html#Variable-Size-Automatic" rel="nofollow">http://www.gnu.org/software/libc/manual/html_mono/libc.html#Variable-Size-Automatic</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>3.2.5 Automatic Storage with Variable Size</p>&#xA;  &#xA;  <p>The function alloca supports a kind of half-dynamic allocation in which blocks are allocated dynamically but freed automatically.</p>&#xA;  &#xA;  <p>Allocating a block with alloca is an explicit action; you can allocate as many blocks as you wish, and compute the size at run time. But all the blocks are freed when you exit the function that alloca was called from, just as if they were automatic variables declared in that function. There is no way to free the space explicitly.</p>&#xA;</blockquote>&#xA;
   211307 |    1 | <p>As you say the order is undefined across different compilation units.</p>&#xA;&#xA;<p>Within the same compilation unit the order is well defined: The same order as definition.</p>&#xA;&#xA;<p>This is because this is not resolved at the language level but at the linker level. So you really need to check out the linker documentation. Though I really doubt this will help in any useful way.</p>&#xA;&#xA;<p>For gcc: Check out <b>ld</b></p>&#xA;&#xA;<p>I have found that even changing the order of objects files being linked can change the initialization order. So it is not just your linker that you need to worry about, but how the linker is invoked by your build system. Even try to solve the problem is practically a non starter.</p>&#xA;&#xA;<p>This is generally only a problem when initializing global that reference each other during their own initialization (so only affects objects with constructors).</p>&#xA;&#xA;<p>There are techniques to get around the problem.<br></p>&#xA;&#xA;<ul>&#xA;<li>Lazy initialization.</li>&#xA;<li><a href="http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Nifty_Counter">Schwarz Counter</a></li>&#xA;<li>Put all complex global variables inside the same compilation unit.</li>&#xA;</ul>&#xA;
  5988016 |    1 | <p>They are class methods, not static methods<sup>1</sup>. This specific type, creating autoreleased objects, can be referred to as "factory methods" (formerly also "convenience constructors"), and they are discussed in <a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/CocoaEncyclopedia/ClassFactoryMethods/ClassFactoryMethods.html" rel="nofollow">the <strong>Concepts in ObjC Guide</strong></a>. They go something like this:</p>&#xA;&#xA;<pre><code>+ (instancetype)whatsisWithThingummy: (Thingummy *)theThingummy {&#xA;    return [[self alloc] initWithThingummy:theThingummy];&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><sub>Where <code>Whatsis</code> is your class, and <code>Thingummy</code> is another class which your class uses.</sub></p>&#xA;&#xA;<p>If you're not compiling with ARC, the convention is to <code>autorelease</code> the instance before returning it.</p>&#xA;&#xA;<p>The <a href="http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types" rel="nofollow"><code>instancetype</code> keyword</a> was introduced by Clang for these kinds of methods; combined with <code>self</code> (which is the <a href="http://www.apeth.com/iOSBook/ch04.html#_the_secret_life_of_classes" rel="nofollow">class object</a> itself<sup>2</sup> in a class method) it allows correct subclass behavior: the method produces an instance of the class which received the message.<sup>3</sup> <code>instancetype</code> allows the compiler to do more strict typechecking than <code>id</code>.</p>&#xA;&#xA;<p>An illustration of this usage in subclasses from the framework: <code>+[NSString stringWithFormat:]</code> returns an <code>NSString</code> instance, whereas <code>+[NSMutableString stringWithFormat:]</code>, returns an instance of the subclass <code>NSMutableString</code>, without <code>NSMutableString</code> being required to explicitly override the method.</p>&#xA;&#xA;<p>As discussed by the [<strong>Fundamentals</strong>][1] doc, there are other uses for these factory methods, such as accessing a singleton, or appraisal of the necessary memory allocation before it's performed (possible, but less <em>convenient</em>, with a standard <code>alloc</code>/<code>init</code> pair).</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><sub><sup>1</sup>"Static methods" in Java or C++, <a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ClassMethod.html%23//apple_ref/doc/uid/TP40008195-CH8-SW1" rel="nofollow">"class methods"</a> in Objective-C. <a href="http://stackoverflow.com/a/8089623/">There's no such thing as static methods in ObjC</a></sub></p>&#xA;&#xA;<p><sub><sup>2</sup>Whereas in an instance method <code>self</code> is, sensibly, a reference to the instance.</sub></p>&#xA;&#xA;<p><sub><sup>3</sup>Previously, <a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html" rel="nofollow">like the usual initialization methods</a> (<code>initWith...</code>),  you would have used <code>id</code> as the return type. Using a specific class name unnecessarily forces subclasses to override the method.</sub></p>&#xA;
   122140 |    1 | <p>Fun question; very terrible.</p>&#xA;&#xA;<p>It'd be nice if you could use a macro. But this is blasted C#, so you might solve it with some preprocessor work or some external tool to wrap your lines in individual try-catch blocks. Not sure if you meant you didn't want to <em>manually</em> wrap them or that you wanted to avoid try-catch <em>entirely</em>.</p>&#xA;&#xA;<p>Messing around with this, I tried labeling every line and jumping back from a single catch, without much luck. However, <a href="http://stackoverflow.com/questions/117173/c-try-catch-every-line-of-code-without-individual-try-catch-blocks#118742">Christopher uncovered the correct way to do this</a>. There's some <a href="http://dotnetthoughts.wordpress.com/2007/10/12/why-language-is-important-why-i-prefer-c/" rel="nofollow">interesting additional discussion of this at Dot Net Thoughts</a> and at <a href="http://blogs.msdn.com/jmstall/archive/2008/04/12/codegen-for-on-error-resume-next.aspx" rel="nofollow">Mike Stall's .NET Blog</a>.</p>&#xA;&#xA;<p><em>EDIT: Of course. The <code>try-catch</code> / <code>switch-goto</code> solution listed won't actually compile since the <code>try</code> labels are out-of-scope in <code>catch</code>. Anyone know what's missing to make something like this compile?</em></p>&#xA;&#xA;<p>You could automate this with a compiler preprocess step or maybe hack up <a href="http://blogs.msdn.com/jmstall/archive/2005/02/21/377806.aspx" rel="nofollow">Mike Stall's Inline IL tool</a> to inject some error-ignorance.</p>&#xA;&#xA;<p>(<a href="http://stackoverflow.com/questions/117173/c-try-catch-every-line-of-code-without-individual-try-catch-blocks#117202">Orion Adrian's answer about examining the Exception</a> and trying to set the next instruction is interesting too.)</p>&#xA;&#xA;<p>All in all, it seems like an interesting and instructive exercise. Of course, you'd have to decide at what point the effort to simulate ON ERROR RESUME NEXT outweighs the effort to fix the code. :-)</p>&#xA;
  8012013 |    1 | <p>Please correct me if I am wrong, but I think I achieved that goal with this code:</p>&#xA;&#xA;<pre><code>//only for forbiding the calls of constructors without parameters on derived classes&#xA;public class UnconstructableWithoutArguments&#xA;{&#xA;    private UnconstructableWithoutArguments()&#xA;    {&#xA;    }&#xA;&#xA;    public UnconstructableWithoutArguments(params object[] list)&#xA;    {&#xA;    }&#xA;}&#xA;</code></pre>&#xA;
   676627 |    1 | <p>My working day starts with opening files in editor and clicking on "Expand All" to hide all regions. After that I can begin to work.</p>&#xA;
 23989281 |    1 | <blockquote>&#xA;  <p>The problem is: how do I get and store A&amp; ref_, when all constructors, copy constructors, copy assignment operators are private?</p>&#xA;</blockquote>&#xA;&#xA;<p>Consider this:</p>&#xA;&#xA;<pre><code>class A { // singleton&#xA;    A(); // private&#xA;public:&#xA;    static A&amp; GetInstance() { // public singleton instance accessor&#xA;        static A instance; // initialized on first call to GetInstance&#xA;        return instance;&#xA;    }&#xA;};&#xA;&#xA;class B {&#xA;     A&amp; ref;&#xA;public:&#xA;    B(): ref( A::GetInstance() ) {} // ref now points to the singleton instance&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>That said, please try not to use singletons in your code. Singleton is a design pattern that increases module interdependency, makes code more monolythic and more difficult to test.</p>&#xA;&#xA;<p>A better solution probably looks like this:</p>&#xA;&#xA;<pre><code>class A { // NOT a singleton&#xA;public:&#xA;    A(); // public&#xA;};&#xA;&#xA;class B {&#xA;     A&amp; ref;&#xA;public:&#xA;    B(A&amp; aref): ref( aref ) {} // ref now points to the injected instance&#xA;                               // but doesn't impose that A::GetInstance&#xA;                               // exists (aref is dependency-injected)&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>client code:</p>&#xA;&#xA;<pre><code>A&amp; a = [local object or anything else];&#xA;B b(a); // now you can inject any A instance and have no imposition&#xA;        // in B's implementation that A must be a singleton.&#xA;</code></pre>&#xA;
 11767979 |    1 | <p>Use <a href="http://stackoverflow.com/a/378024/23771">this method</a>.</p>&#xA;&#xA;<p>It is quite simple and effective at pinpointing opportunities for optimization, whether they are in CPU or IO bound code.</p>&#xA;&#xA;<p>If you are right that the biggest opportunities are in a particular function or module, then it will find them. If they are elsewhere, it will find them.</p>&#xA;&#xA;<p>Of the tools you mentioned and discarded, it is most similar to poor man's profiler, but still not very similar.</p>&#xA;&#xA;<p>EDIT: Since you say it is triggered by a user interaction and blocks further input until it completes, here's how I would do it.</p>&#xA;&#xA;<p>First, I assume it does not block a manual interrupt signal to the debugger, because otherwise you'd have no way to stop an infinite loop.&#xA;Second, I would wrap a loop of 10, 100, or 1000 times around the routine in question, so it is doing it long enough to be manually interrupted.</p>&#xA;&#xA;<p>Now, suppose it is spending some fraction of time doing I/O, like 50%. Then when you interrupt it, you have a 50% chance of catching it in the I/O.&#xA;So if you catch it in the I/O, which the call stack will tell you, you can also see in great detail where the I/O is being requested from and why.</p>&#xA;&#xA;<p>It will show you what's going on, which is almost certainly something surprising.&#xA;If you see it doing something on as few as two (2) samples that you could find a way to eliminate, then you will get a considerable speedup.&#xA;In fact, if you eliminate that activity, you don't know in advance how much time you will save, but on average you can expect to save fraction <em>F = (s+1)/(n+2)</em>, where <em>n</em> is the total number of samples you took, and <em>s</em> is the number of samples that showed the activity.&#xA;<a href="http://en.wikipedia.org/wiki/Rule_of_succession" rel="nofollow">(<em>Rule of Succession</em>)</a>&#xA;Example, if you took 4 stack samples and saw the activity on 2 of them, on average it would save you <em>F = 3/6 = 1/2</em>, corresponding to a speedup factor of <em>1/(1-F)</em> or 2.</p>&#xA;&#xA;<p>Once you've done that, you can do it again and find something else to fix.&#xA;The speedup factors multiply together like compound interest.</p>&#xA;&#xA;<p>Then of course you remove the outer loop and "cash in" all the speedups you got.</p>&#xA;&#xA;<p>If you are wondering how this differs from profiling, it is that by carefully examining each stack sample, and possibly related data, you can recognize activities that you could remove, where if all you've got is measurements, you are left trying to intuit what is going on.&#xA;The actual amount of time you save is what it is, regardless of any measurements.&#xA;The important thing is to <em>find</em> the problem.&#xA;No matter how precisely a profiler might measure it, if you can't <em>find</em> it, you're not winning.&#xA;These pages are full of people saying either they don't understand what their profiler is telling them, or it seems to be saying there is nothing to fix, which they are only too willing to accept.&#xA;That's a case of rose-tinted glasses.</p>&#xA;&#xA;<p><a href="http://scicomp.stackexchange.com/a/2719/1262"><em>More on all that.</em></a></p>&#xA;
   408257 |    1 | <p>I believe the use of try/catch exception handling is worse than the use of simple return codes and associated common messaging structures to ferry useful error messages.</p>&#xA;&#xA;<p>Littering code with try/catch blocks is not a solution.</p>&#xA;&#xA;<p>Just passing exceptions up the stack hoping whats above you will do the right thing or&#xA;generate an informative error is not a solution.</p>&#xA;&#xA;<p>Thinking you have any chance of systematically verifying the proper exception handlers are avaliable to address anything that could go wrong in either transparent or opague objects is not realistic. (Think also in terms of late bindings/external libraries and unecessary dependancies between unrelated functions in a call stack as system evolves)</p>&#xA;&#xA;<p>Use of return codes are simple, can be easily systematically verified for coverage and if handled properly forces developers to generate useful error messages rather than the all-too-common stack dumps and obscure I/O exceptions that are "exceptionally" meaningless to even the most clueful of end users.</p>&#xA;&#xA;<p>--</p>&#xA;&#xA;<p>My final objection is the use of garbage collected languages.  Don't get me wrong.. I love them in some circumstances but in general for server/MC systems they have no place in my view.</p>&#xA;&#xA;<p>GC is not infallable - even extremely well designed GC algorithms can hang on to objects too long or even forever based on non-obvious circular refrences in their dependancy graphs.</p>&#xA;&#xA;<p>Non-GC systems following a few simple patterns and use of memory accounting tools don't have this problem but do require more work in design and test upfront than GC environments.  The tradeoff here is that memory leaks are extremely easy to spot during testing in Non-GC while finding GC related problem conditions is a much more difficult proposition.</p>&#xA;&#xA;<p>Memory is cheap but what happens when you leak expensive objects such as transaction handles, synchronization objects, socket connections...etc.  In my environment the very thought that you can just sit back and let the language worry about this for you is unthinkable without significant fundental changes in software description.</p>&#xA;
  7883173 |    1 | <p>I added comment tags (<code>&lt;!-- ... --&gt;</code>) in my jQuery template blocks (CDATA blocks also failed) and DOMDocument did not touch the internal HTML.</p>&#xA;&#xA;<p>Then, before I used the jQuery templates, I wrote a script to remove the comments.</p>&#xA;&#xA;<pre><code>$(function() {&#xA;    $('script[type="text/x-jquery-tmpl"]').text(function() {&#xA;        // The comment node in this context is actually a text node.&#xA;        return $.trim($(this).text()).replace(/^&lt;!--([\s\S]*)--&gt;$/, '$1');&#xA;    });&#xA;});&#xA;</code></pre>&#xA;&#xA;<p>Not ideal, but I wasn't sure of a better workaround.</p>&#xA;
  2759417 |    1 | <p>The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.</p>&#xA;&#xA;<p>If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.</p>&#xA;&#xA;<h2>Start simple</h2>&#xA;&#xA;<p>Conceptually, the simplest regular expressions are literal characters. The pattern <code>N</code> matches the character 'N'.</p>&#xA;&#xA;<p>Regular expressions next to each other match sequences. For example, the pattern <code>Nick</code> matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.</p>&#xA;&#xA;<p>If you've ever used <code>grep</code> on UnixΓÇöeven if only to search for ordinary looking stringsΓÇöyou've already been using regular expressions! (The <code>re</code> in <code>grep</code> refers to regular expressions.)</p>&#xA;&#xA;<h2>Order from the menu</h2>&#xA;&#xA;<p>Adding just a little complexity, you can match either 'Nick' or 'nick' with the pattern <code>[Nn]ick</code>. The part in square brackets is a <em>character class</em>, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so <code>[a-c]</code> matches either 'a' or 'b' or 'c'.</p>&#xA;&#xA;<p>The pattern <code>.</code> is special: rather than matching a literal dot only, it matches <em>any</em> character<sup>ΓÇá</sup>. It's the same conceptually as the really big character class <code>[-.?+%$A-Za-z0-9...]</code>.</p>&#xA;&#xA;<p>Think of character classes as menus: pick just one.</p>&#xA;&#xA;<h2>Helpful shortcuts</h2>&#xA;&#xA;<p>Using <code>.</code> can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match non-negative integers: one way to write that is <code>[0-9]+</code>. Digits are a frequent match target, so you could instead use <code>\d+</code> match non-negative integers. Others are <code>\s</code> (whitespace) and <code>\w</code> (word characters: alphanumerics or underscore).</p>&#xA;&#xA;<p>The uppercased variants are their complements, so <code>\S</code> matches any <em>non</em>-whitespace character, for example.</p>&#xA;&#xA;<h2>Once is not enough</h2>&#xA;&#xA;<p>From there, you can repeat parts of your pattern with <em>quantifiers</em>. For example, the pattern <code>ab?c</code> matches 'abc' or 'ac' because the <code>?</code> quantifier makes the subpattern it modifies optional. Other quantifiers are</p>&#xA;&#xA;<ul>&#xA;<li><code>*</code> (zero or more times)</li>&#xA;<li><code>+</code> (one or more times)</li>&#xA;<li><code>{n}</code> (exactly <em>n</em> times)</li>&#xA;<li><code>{n,}</code> (at least <em>n</em> times)</li>&#xA;<li><code>{n,m}</code> (at least <em>n</em> times but no more than <em>m</em> times)</li>&#xA;</ul>&#xA;&#xA;<p>Putting some of these blocks together, the pattern <code>[Nn]*ick</code> matches all of</p>&#xA;&#xA;<ul>&#xA;<li>ick</li>&#xA;<li>Nick</li>&#xA;<li>nick</li>&#xA;<li>Nnick</li>&#xA;<li>nNick</li>&#xA;<li>nnick</li>&#xA;<li><em>(and so on)</em></li>&#xA;</ul>&#xA;&#xA;<p>The first match demonstrates an important lesson: <em><code>*</code> always succeeds!</em> Any pattern can match zero times.</p>&#xA;&#xA;<h2>Grouping</h2>&#xA;&#xA;<p>A quantifier modifies the pattern to its immediate left. You might expect <code>0abc+0</code> to match '0abc0', '0abcabc0', and so forth, but the pattern <em>immediately</em> to the left of the plus quantifier is <code>c</code>. This means <code>0abc+0</code> matches '0abc0', '0abcc0', '0abccc0', and so on.</p>&#xA;&#xA;<p>To match one or more sequences of 'abc' with zeros on the ends, use <code>0(abc)+0</code>. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or "capture" the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and <code>substr</code>.</p>&#xA;&#xA;<h2>Alternation</h2>&#xA;&#xA;<p>Earlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in <code>Nick|nick</code>. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of <code>|</code>, <em>e.g.</em>, <code>(Nick|nick)</code>.</p>&#xA;&#xA;<p>For another example, you could equivalently write <code>[a-c]</code> as <code>a|b|c</code>, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.</p>&#xA;&#xA;<h2>Escaping</h2>&#xA;&#xA;<p>Although some characters match themselves, others have special meanings. The pattern <code>\d+</code> doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use <code>\\d\+</code>. A backslash removes the special meaning from the following character.</p>&#xA;&#xA;<h2>Greediness</h2>&#xA;&#xA;<p>Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.</p>&#xA;&#xA;<p>For example, say the input is</p>&#xA;&#xA;<blockquote>&#xA;  <p>"Hello," she said, "How are you?"</p>&#xA;</blockquote>&#xA;&#xA;<p>You might expect <code>".+"</code> to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.</p>&#xA;&#xA;<p>To switch from greedy to what you might think of as cautious, add an extra <code>?</code> to the quantifier. Now you understand how <code>\((.+?)\)</code>, the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.</p>&#xA;&#xA;<p>If your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.</p>&#xA;&#xA;<p>(As to your confusion, I don't know of any regular-expression dialect where <code>((.+?))</code> would do the same thing. I suspect something got lost in transmission somewhere along the way.)</p>&#xA;&#xA;<h2>Anchors</h2>&#xA;&#xA;<p>Use the special pattern <code>^</code> to match only at the beginning of your input and <code>$</code> to match only at the end. Making "bookends" with your patterns where you say, "I know what's at the front and back, but give me everything between" is a useful technique.</p>&#xA;&#xA;<p>Say you want to match comments of the form</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>-- This is a comment --</code></p>&#xA;</blockquote>&#xA;&#xA;<p>you'd write <code>^--\s+(.+)\s+--$</code>.</p>&#xA;&#xA;<h2>Build your own</h2>&#xA;&#xA;<p>Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.</p>&#xA;&#xA;<h2>Tools for writing and debugging regexes:</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://www.regexr.com/">RegExr</a> (for JavaScript)</li>&#xA;<li>Perl: <a href="http://search.cpan.org/dist/YAPE-Regex-Explain/">YAPE: Regex Explain</a></li>&#xA;<li><a href="http://weitz.de/regex-coach/">Regex Coach</a> (engine backed by <a href="http://weitz.de/cl-ppcre/">CL-PPCRE</a>)</li>&#xA;<li><a href="http://regexpal.com">RegexPal</a> (for JavaScript)</li>&#xA;<li><a href="http://www.regular-expressions.info/">Regular Expressions Online Tester</a> </li>&#xA;<li><a href="http://www.regexbuddy.com/">Regex Buddy</a></li>&#xA;<li><a href="http://www.regex101.com/">Regex 101</a> (for PCRE, JavaScript, Python)</li>&#xA;<li><a href="http://laurent.riesterer.free.fr/regexp/">Visual RegExp</a></li>&#xA;<li><a href="http://www.ultrapico.com/Expresso.htm">Expresso</a> (for .NET)</li>&#xA;<li><a href="http://www.rubular.com/">Rubular</a> (for Ruby)</li>&#xA;<li><a href="http://regexlib.com/Default.aspx">Regular Expression Library</a> (Predefined Regexes for common scenarios)</li>&#xA;<li><a href="http://www.txt2re.com/">Txt2RE</a></li>&#xA;<li><a href="http://www.regextester.com/">Regex Tester</a> (for JavaScript)</li>&#xA;</ul>&#xA;&#xA;<h2>Books</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://oreilly.com/catalog/9780596528126/">Mastering Regular Expressions</a> and the <a href="http://oreilly.com/catalog/9780596002893">2nd Edition</a></li>&#xA;<li><a href="http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/">Regular Expressions Cheat Sheet</a></li>&#xA;<li><a href="http://rads.stackoverflow.com/amzn/click/0596520689">Regex Cookbook</a></li>&#xA;<li><a href="http://rads.stackoverflow.com/amzn/click/0672325667">Teach Yourself Regular Expressions</a></li>&#xA;</ul>&#xA;&#xA;<h2>Free resources</h2>&#xA;&#xA;<ul>&#xA;<li><a href="http://neverfear.org/blog/view/Regex_tutorial_for_people_who_should_know_Regex__but_do_not___Part_1">Regular Expressions - Everything you should know</a> (PDF Series)</li>&#xA;<li><a href="http://www.greenend.org.uk/rjk/2002/06/regexp.html">Regex Syntax Summary</a></li>&#xA;<li><a href="http://perl.plover.com/Regex/">How Regexes Work</a></li>&#xA;</ul>&#xA;&#xA;<h2>Footnote</h2>&#xA;&#xA;<p><strong>ΓÇá:</strong> The statement above that <code>.</code> matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, <code>"\n"</code>, but in practice you rarely expect a pattern such as <code>.+</code> to cross a newline boundary. Perl regexes have a <a href="http://perldoc.perl.org/perlre.html#s"><code>/s</code> switch</a> and Java <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#DOTALL"><code>Pattern.DOTALL</code></a>, for example, to make <code>.</code> match any character at all. For languages that don't have such a feature, you can use something like <code>[\s\S]</code> to match "any whitespace or any non-whitespace", in other words anything.</p>&#xA;
 11977522 |    1 | <p>If you just want to verify you don't have random garbage in the field (i.e., from form spammers) this regex should do nicely:</p>&#xA;&#xA;<pre><code>^[0-9+\(\)#\.\s\/ext-]+$&#xA;</code></pre>&#xA;&#xA;<p>Note that it doesn't have any special rules for how many digits, or what numbers are valid in those digits, it just verifies that only digits, parenthesis, dashes, plus, space, pound,  asterisk, period, comma, or the letters <code>e</code>, <code>x</code>, <code>t</code> are present.</p>&#xA;&#xA;<p>It should be compatible with international numbers and localization formats. Do you foresee any need to allow square, curly, or angled brackets for some regions? (currently they aren't included).</p>&#xA;&#xA;<p>If you want to maintain per digit rules (such as in US Area Codes and Prefixes (exchange codes) must fall in the range of 200-999) well, good luck to you. Maintaining a complex rule-set which could be outdated at any point in the future by any country in the world does not sound fun.</p>&#xA;&#xA;<p>And while stripping all/most non-numeric characters may work well on the server side (especially if you are planning on passing these values to a dialer), you may not want to thrash the user's input during validation, particularly if you want them to make corrections in another field.</p>&#xA;
  8269660 |    1 | <p>This is driving me round the bend. I'm a long time VB.NET forms developer, quite new to ASP.NET and completely new to MVC. I'm creating vbhtml pages that use the VB.NET razor syntax, and I seem to be constantly fighting against the UI which is trying to indent my code incorrectly. Take the following example, based on the template page for a new Razor view:</p>&#xA;&#xA;<pre><code>@Code&#xA;    Layout = Nothing&#xA;End Code&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;title&gt;&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;div&gt;&#xA;        @If True Then&#xA;            @&lt;ul&gt;&#xA;                @For x = 1 To 2&#xA;&#xA;                Next&#xA;            &lt;/ul&gt;&#xA;                End If '&lt;-- Randomly indented too far&#xA;    &lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>In the above example, as soon as I hit return after "Next", "End If" two lines below randomly jumps two tabs forward from where it should be. In other examples I've hit a circle where pushing one line to the correct place throws another line out of position and vice versa.</p>&#xA;&#xA;<p>I'm so annoyed at this point I'd be happy to disable auto-indentation completely and just manage it myself, but I can't even find out how to do that! Following advice on another thread I disabled indentation for HTML pages but all that stops is indentation of HTML tags - the code blocks still slide around all over the place.</p>&#xA;&#xA;<p>I thought an extension might be causing the problem but I disabled them all and restarted and the problem remains. Am I doing something fundamentally wrong? I find it hard to believe Microsoft would release something so poor so it seems more likely I'm just not using it right.</p>&#xA;
   136368 |    1 | <p>This may be quicker than yours.  Makes no assumptions about line length.  Backs through the file one block at a time till it's found the right number of '\n' characters.</p>&#xA;&#xA;<pre><code>def tail( f, lines=20 ):&#xA;    total_lines_wanted = lines&#xA;&#xA;    BLOCK_SIZE = 1024&#xA;    f.seek(0, 2)&#xA;    block_end_byte = f.tell()&#xA;    lines_to_go = total_lines_wanted&#xA;    block_number = -1&#xA;    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting&#xA;                # from the end of the file&#xA;    while lines_to_go &gt; 0 and block_end_byte &gt; 0:&#xA;        if (block_end_byte - BLOCK_SIZE &gt; 0):&#xA;            # read the last block we haven't yet read&#xA;            f.seek(block_number*BLOCK_SIZE, 2)&#xA;            blocks.append(f.read(BLOCK_SIZE))&#xA;        else:&#xA;            # file too small, start from begining&#xA;            f.seek(0,0)&#xA;            # only read what was not read&#xA;            blocks.append(f.read(block_end_byte))&#xA;        lines_found = blocks[-1].count('\n')&#xA;        lines_to_go -= lines_found&#xA;        block_end_byte -= BLOCK_SIZE&#xA;        block_number -= 1&#xA;    all_read_text = ''.join(reversed(blocks))&#xA;    return '\n'.join(all_read_text.splitlines()[-total_lines_wanted:])&#xA;</code></pre>&#xA;&#xA;<p>I don't like tricky assumptions about line length when -- as a practical matter -- you can never know things like that.</p>&#xA;&#xA;<p>Generally, this will locate the last 20 lines on the first or second pass through the loop.  If your 74 character thing is actually accurate, you make the block size 2048 and you'll tail 20 lines almost immediately.</p>&#xA;&#xA;<p>Also, I don't burn a lot of brain calories trying to finesse alignment with physical OS blocks.  Using these high-level I/O packages, I doubt you'll see any performance consequence of trying to align on OS block boundaries.  If you use lower-level I/O, then you might see a speedup.</p>&#xA;
  3570360 |    1 | <blockquote>&#xA;  <p>Is there a philosophical reason why the constructor can't support type inference?</p>&#xA;</blockquote>&#xA;&#xA;<p>No. When you have</p>&#xA;&#xA;<pre><code>new Foo(bar)&#xA;</code></pre>&#xA;&#xA;<p>then we could identify all types called Foo in scope regardless of generic arity, and then do overload resolution on each using a modified method type inference algorithm. We'd then have to create a 'betterness' algorithm that determines which of two applicable constructors <em>in two types that have the same name but different generic arity</em> is the better constructor. In order to maintain backwards compatibility a ctor on a non-generic type must always win.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Is there a practical reason why the constructor can't support type inference?</p>&#xA;</blockquote>&#xA;&#xA;<p>Yes. Even if the benefit of the feature outweighs its costs -- which are considerable -- that's not sufficient to have a feature implemented. Not only does the feature have to be a net win, it has to be a <em>large</em> net win compared to all the other possible features we could be investing in. It also has to be better than spending that time and effort on bug fixing, performance work, and other possible areas that we could put that effort. And ideally it has to fit in well to whatever the "theme" is of the release.</p>&#xA;&#xA;<p>Furthermore, as you correctly note, you can get the benefits of this feature without actually having the feature itself, by using a factory pattern. The existence of easy workarounds makes it less likely that a feature will ever be implemented.</p>&#xA;&#xA;<p>This feature has been on the list of possible features for a long time now. It's never been anywhere near high enough on the list to actually get implemented.</p>&#xA;
     5971 |    1 | <p>I'm not a fan of partial classes - I try to develop my classes such that each class has a very clear, single issue for which it's responsible. To that end, I don't believe that something with a clear responsibility should be split across multiple files. That's why I don't like partial classes.</p>&#xD;&#xA;&#xD;&#xA;<p>With that said, I'm on the fence about regions. For the most part, I don't use them; however, I work with code every day that includes regions - some people go really heavy on them (folding up private methods into a region and then each method folded into its own region), and some people go light on them (folding up enums, folding up attributes, etc). My general rule of thumb, as of now, is that I only put code in regions if (a) the data is likely to remain static or will not be touched very often (like enums), or (b) if there are methods that are implemented out of necessity because of subclassing or abstract method implementation, but, again, won't be touched very often.</p>
   410225 |    1 | <p><strong>C++ is a good language</strong></p>&#xA;&#xA;<p>I practically got lynched in another question a week or two back for saying that C++ wasn't a very nice language. So now I'll try saying the opposite. ;)</p>&#xA;&#xA;<p>No, seriously, the point I tried to make then, and will try again now, is that C++ has plenty of flaws. It's hard to deny that. It's so extremely complicated that learning it well is practically something you can dedicate your entire life to. It makes many common tasks needlessly hard, allows the user to plunge head-first into a sea of undefined behavior and unportable code, with no warnings given by the compiler.</p>&#xA;&#xA;<p>But it's not the useless, decrepit, obsolete, hated language that many people try to make it. It shouldn't be swept under the carpet and ignored. The world wouldn't be a better place without it. It has some unique strengths that, unfortunately, are hidden behind quirky syntax, legacy cruft and not least, bad C++ teachers. But they're there.</p>&#xA;&#xA;<p>C++ has many features that I desperately miss when programming in C# or other "modern" languages. There's a lot in it that C# and other modern languages could learn from.</p>&#xA;&#xA;<p>It's not blindly focused on OOP, but has instead explored and pioneered generic programming. It allows surprisingly expressive compile-time metaprogramming producing extremely efficient, robust <em>and</em> clean code. It took in lessons from functional programming almost a decade before C# got LINQ or lambda expressions.</p>&#xA;&#xA;<p>It allows you to catch a surprising number of errors at compile-time through static assertions and other metaprogramming tricks, which eases debugging vastly, and even beats unit tests in some ways. (I'd much rather catch an error at compile-time than afterwards, when I'm running my tests).</p>&#xA;&#xA;<p>Deterministic destruction of variables allows RAII, an extremely powerful little trick that makes try/finally blocks and C#'s <code>using</code> blocks redundant.</p>&#xA;&#xA;<p>And while some people accuse it of being "design by committee", I'd say yes, it is, and that's actually not a bad thing in this case. Look at Java's class library. How many classes have been deprecated again? How many should not be used? How many duplicate each others' functionality? How many are badly designed?</p>&#xA;&#xA;<p>C++'s standard library is much smaller, but on the whole, it's remarkably well designed, and except for one or two minor warts (<code>vector&lt;bool&gt;</code>, for example), its design still holds up very well. When a feature is added to C++ or its standard library, it is subjected to heavy scrutiny. Couldn't Java have benefited from the same? .NET too, although it's younger and was somewhat better designed to begin with, is still accumulating a good handful of classes that are out of sync with reality, or were badly designed to begin with.</p>&#xA;&#xA;<p><strong>C++ has plenty of strengths that no other language can match. It's a good language</strong></p>&#xA;
  7047765 |    1 | <p>S.Lott's answer above almost works for me but ends up giving me partial lines. It turns out that it corrupts data on block boundaries because data holds the read blocks in reversed order. When ''.join(data) is called, the blocks are in the wrong order. This fixes that.</p>&#xA;&#xA;<pre><code>def tail(f, window=20):&#xA;    """&#xA;    Returns the last `window` lines of file `f` as a list.&#xA;    """&#xA;    if window == 0:&#xA;        return []&#xA;    BUFSIZ = 1024&#xA;    f.seek(0, 2)&#xA;    bytes = f.tell()&#xA;    size = window + 1&#xA;    block = -1&#xA;    data = []&#xA;    while size &gt; 0 and bytes &gt; 0:&#xA;        if bytes - BUFSIZ &gt; 0:&#xA;            # Seek back one whole BUFSIZ&#xA;            f.seek(block * BUFSIZ, 2)&#xA;            # read BUFFER&#xA;            data.insert(0, f.read(BUFSIZ))&#xA;        else:&#xA;            # file too small, start from begining&#xA;            f.seek(0,0)&#xA;            # only read what was not read&#xA;            data.insert(0, f.read(bytes))&#xA;        linesFound = data[0].count('\n')&#xA;        size -= linesFound&#xA;        bytes -= BUFSIZ&#xA;        block -= 1&#xA;    return ''.join(data).splitlines()[-window:]&#xA;</code></pre>&#xA;
   416464 |    1 | <p>I want to know if it is possible to end a for loop in C++ when an ending condition (different from the reacheing right number of iterations) is verified. For instance:</p>&#xA;&#xA;<pre><code>for (int i = 0; i &lt; maxi; ++i)&#xA;    for (int j = 0; j &lt; maxj; ++j)&#xA;        // But if i == 4 &lt; maxi AND j == 3 &lt; maxj, &#xA;        // then jump out of the two nested loops.&#xA;</code></pre>&#xA;&#xA;<p>I know that this is possible in Perl with the next LABEL or last LABEL calls and labeled blocks, is it possible to do it in C++ or I should use a while loop?</p>&#xA;&#xA;<p>Thank you.</p>&#xA;
   128607 |    1 | <p>In my opinion, saying that style isn't important is like saying that spelling isn't important.  If your style (or lack of style) is causing readability issues, then it will be difficult for a team to work with the files that this person is writing/editing.  </p>&#xA;&#xA;<p>Similarly, if a programmer doesn't take the time to spell words correctly in comment blocks, function names, etc....it will cause issues with other developers trying to decipher code.  I always ask myself, "self, if you look at this in 1 week, will you understand it?  If you look at it next year, will you still understand it?" (or at least be able to read documentation/comments to jog your memory).</p>&#xA;&#xA;<p>To me, style is not important when you are talking about putting the curly brace on the next line of your if-block versus putting it at the end of the conditional statement...as long as it meets your coding standards, is internally consistent, and the rest of the team  uses the same approach; with that being said, I feel that style is extremely important if it impacts the readability of the code.</p>&#xA;&#xA;<p>With MS being such a large company, they probably are looking for someone who can be a problem solver as well as a team player.  Someone who states that they "don't have time for styling" would come across as not a team player, to me.</p>&#xA;&#xA;<p>Nice question!</p>&#xA;
  1744313 |    1 | <p>Exceptions make it harder to reason about the state of your program. In C++ for instance, you have to do extra thinking to ensure your functions are strongly exception safe, than you would have to do if they didn't need to be.</p>&#xA;&#xA;<p>The reason is that without exceptions, a function call can either return, or it can terminate the program first. With exceptions, a function call can either return, or it can terminate the program, or it can jump to a catch block somewhere. So you can no longer follow the flow of control just by looking at the code in front of you. You need to know if the functions called can throw. You may need to know what can be thrown and where it's caught, depending on whether you care where control goes, or only care that it leaves the current scope.</p>&#xA;&#xA;<p>For this reason, people say "don't use exceptions unless the situation is really exceptional". When you get down to it, "really exceptional" means "some situation has occurred where the benefits of handling it with an error return value are outweighed by the costs". So yes, this is something of an empty statement, although once you have some instincts for "really exceptional", it becomes a good rule of thumb. When people talk about flow control, they mean that the ability to reason locally (without reference to catch blocks) is a benefit of return values.</p>&#xA;&#xA;<p>Java has a wider definition of "really exceptional" than C++. C++ programmers are more likely to want to look at the return value of a function than Java programmers, so in Java "really exceptional" might mean "I can't return a non-null object as the result of this function". In C++, it's more likely to mean "I very much doubt my caller can continue". So a Java stream throws if it can't read a file, whereas a C++ stream (by default) returns a value indicating error. In all cases, though, it is a matter of what code you are willing to force your caller to have to write. So it is indeed a matter of coding style: you have to reach a consensus what your code should look like, and how much "error-checking" code you want to write against how much "exception-safety" reasoning you want to do.</p>&#xA;&#xA;<p>The broad consensus across all languages seems to be that this is best done in terms of how recoverable the error is likely to be (since unrecoverable errors result in no code with exceptions, but still need a check-and-return-your-own-error in code which uses error returns). So people come to expect "this function I call throws an exception" to mean "<em>I</em> can't continue", not just "<em>it</em> can't continue". That's not inherent in exceptions, it's just a custom, but like any good programming practice, it's a custom advocated by smart people who've tried it the other way and not enjoyed the results. I too have had bad experiences throwing too many exceptions. So personally, I do think in terms of "really exceptional", unless something about the situation makes an exception particularly attractive.</p>&#xA;&#xA;<p>Btw, quite aside from reasoning about the state of your code, there are also performance implications. Exceptions are usually cheap now, in languages where you're entitled to care about performance. They can be faster than multiple levels of "oh, the result's an error, I'd best exit myself with an error too, then". In the bad old days, there were real fears that throwing an exception, catching it, and carrying on with the next thing, would make what you're doing so slow as to be useless. So in that case, "really exceptional" means, "the situation is so bad that horrific performance no longer matters". That's no longer the case (although an exception in a tight loop is still noticeable) and hopefully indicates why the definition of "really exceptional" needs to be flexible.</p>&#xA;
   811828 |    1 | <p>The only time you would NOT throw exceptions from constructors is if your project has a rule against using exceptions (for instance, <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml" rel="nofollow">Google</a> doesn't like exceptions). In that case, you wouldn't want to use exceptions in your constructor any more than anywhere else, and you'd have to have an init method of some sort instead.</p>&#xA;
   653104 |    1 | <p>The worst abuses (and I'm guilty of doing this occasionally) is using the preprocessor as some sort of data file replacement, ie:</p>&#xA;&#xA;<pre><code>#define FOO_RELATION \  &#xA;BAR_TUPLE( A, B, C) \  &#xA;BAR_TUPLE( X, Y, Z) \&#xA;</code></pre>&#xA;&#xA;<p>and then somewhere else:</p>&#xA;&#xA;<pre><code>#define BAR_TUPLE( p1, p2, p3) if( p1 ) p2 = p3;&#xA;FOO_RELATION&#xA;#undef BAR_TUPLE&#xA;</code></pre>&#xA;&#xA;<p>which will result in:</p>&#xA;&#xA;<pre><code>if( A ) B = C;&#xA;if( X ) Y = Z;&#xA;</code></pre>&#xA;&#xA;<p>This pattern can be used to do all sorts of (terrible) stuff... generate switch statements or huge if else blocks, or interface with "real" code. You could even use it to ::cough:: generate a context menu in a non-oo context menu system ::cough::. Not that I'd ever do anything so lame.</p>&#xA;&#xA;<p>Edit: fixed mismatched parenthesis and expanded example</p>&#xA;
 17878921 |    1 | <p><a href="https://github.com/hfossli/AGAsyncTestHelper" rel="nofollow">AGAsyncTestHelper</a> takes a slightly different approach than <code>AssertEventually</code> since it is evaluating the expression rather than checking the pointer for new results. One advantage of using <a href="https://github.com/hfossli/AGAsyncTestHelper" rel="nofollow">AGAsyncTestHelper</a> is that it can be used for blocks, delegate-callbacks and whatnot.</p>&#xA;&#xA;<pre><code>WAIT_WHILE(&lt;expression_to_evaluate&gt;, &lt;max_duration&gt;);&#xA;</code></pre>&#xA;&#xA;<p>Answering the question</p>&#xA;&#xA;<pre><code>id someObject = nil;&#xA;[self doSomethingThatFetchesSomeObjectAsynchronously];&#xA;WAIT_WHILE(self.someObject == nil, 1.0); &#xA;</code></pre>&#xA;
 14916454 |    1 | <p>I wouldn't use JavaScript <code>navigator.userAgent</code> or <a href="http://api.jquery.com/jquery.browser/#jQuery-browser1" rel="nofollow">$.browser</a> (which uses <code>navigator.userAgent</code>) since it can be spoofed.</p>&#xA;&#xA;<p>To target Internet Explorer 9, 10 and 11 (Note: also the latest Chrome):</p>&#xA;&#xA;<pre><code>@media screen and (min-width:0\0) { &#xA;    /* Enter CSS here */&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>To target Internet Explorer 10 and above:</p>&#xA;&#xA;<pre><code>@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {&#xA;    /* IE10+ CSS here */&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Sources:</p>&#xA;&#xA;<ul>&#xA;<li><a href="http://blog.keithclark.co.uk/moving-ie-specific-css-into-media-blocks/" rel="nofollow">Moving Internet Explorer specific CSS into @media blocks</a></li>&#xA;<li><a href="https://philipnewcomer.net/2014/04/target-internet-explorer-10-11-css/" rel="nofollow">How to Target Internet Explorer 10 and 11 in CSS</a></li>&#xA;</ul>&#xA;
 20489487 |    1 | <p>First, remove this line</p>&#xA;&#xA;<pre><code>system("clear");&#xA;</code></pre>&#xA;&#xA;<p>Second, change this,</p>&#xA;&#xA;<pre><code>free((void*) array);&#xA;</code></pre>&#xA;&#xA;<p>to,</p>&#xA;&#xA;<pre><code>delete []array;&#xA;</code></pre>&#xA;&#xA;<p>If you use <code>new</code>, then you'll deallocate the space by <code>delete</code>. If you use <code>malloc</code>, then you'll deallocate the space by <code>free</code>. Mixing up between the two will cause problem.</p>&#xA;&#xA;<p>Prefer to use <code>new/delete</code> over <code>malloc/free</code>.</p>&#xA;&#xA;<p>According to <a href="http://yosefk.com/c++fqa/heap.html#fqa-16.4" rel="nofollow">C++ FAQ Lite</a>,</p>&#xA;&#xA;<blockquote>&#xA;  <p>[16.4] Why should I use new instead of trustworthy old malloc()?</p>&#xA;  &#xA;  <p>FAQ: new/delete call the constructor/destructor; new is type safe,&#xA;  malloc is not; new can be overridden by a class.</p>&#xA;  &#xA;  <p>FQA: The virtues of new mentioned by the FAQ are not virtues, because&#xA;  constructors, destructors, and operator overloading are garbage (see&#xA;  what happens when you have no garbage collection?), and the type&#xA;  safety issue is really tiny here (normally you have to cast the void*&#xA;  returned by malloc to the right pointer type to assign it to a typed&#xA;  pointer variable, which may be annoying, but far from "unsafe").</p>&#xA;  &#xA;  <p>Oh, and using trustworthy old malloc makes it possible to use the&#xA;  equally trustworthy &amp; old realloc. Too bad we don't have a shiny new&#xA;  operator renew or something.</p>&#xA;  &#xA;  <p>Still, new is not bad enough to justify a deviation from the common&#xA;  style used throughout a language, even when the language is C++. In&#xA;  particular, classes with non-trivial constructors will misbehave in&#xA;  fatal ways if you simply malloc the objects. So why not use new&#xA;  throughout the code? People rarely overload operator new, so it&#xA;  probably won't get in your way too much. And if they do overload new,&#xA;  you can always ask them to stop.</p>&#xA;</blockquote>&#xA;
  7189821 |    1 | <h1>What changes for C++11?</h1>&#xA;&#xA;<h2>Aggregates</h2>&#xA;&#xA;<p>The standard definition of an aggregate has changed slightly, but it's still pretty much the same:</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1),&#xA;  no <em>brace-or-equal-initializers</em> for non-static data members (9.2), no private or protected&#xA;  non-static data members (Clause 11), no base classes (Clause 10), and no virtual functions (10.3).</p>&#xA;</blockquote>&#xA;&#xA;<p>Ok, what changed?</p>&#xA;&#xA;<ol>&#xA;<li><p>Previously, an aggregate could have no <em>user-declared</em> constructors, but now it can't have <em>user-provided</em> constructors. Is there a difference? Yes, there is, because now you can declare constructors and <em>default</em> them:</p>&#xA;&#xA;<pre><code>struct Aggregate {&#xA;    Aggregate() = default; // asks the compiler to generate the default implementation&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>This is still an aggregate because a constructor (or any special member function) <em>that is defaulted on the first declaration</em> is not user-provided.</p></li>&#xA;<li><p>Now an aggregate cannot have any <em>brace-or-equal-initializers</em> for non-static data members. What does this mean? Well, this is just because with this new standard, we can initialize members directly in the class like this:</p>&#xA;&#xA;<pre><code>struct NotAggregate {&#xA;    int x = 5; // valid in C++11&#xA;    std::vector&lt;int&gt; s{1,2,3}; // also valid&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Using this feature makes the class no longer an aggregate because it's basically equivalent to providing your own default constructor.</p></li>&#xA;</ol>&#xA;&#xA;<p>So, what is an aggregate didn't change much at all. It's still the same basic idea, adapted to the new features.</p>&#xA;&#xA;<h2>What about PODs?</h2>&#xA;&#xA;<p>PODs went through a lot of changes. Lots of previous rules about PODs were relaxed in this new standard, and the way the definition is provided in the standard was radically changed.</p>&#xA;&#xA;<p>The idea of a POD is to capture basically two distinct properties:</p>&#xA;&#xA;<ol>&#xA;<li>It supports static initialization, and</li>&#xA;<li>Compiling a POD in C++ gives you the same memory layout as a struct compiled in C.</li>&#xA;</ol>&#xA;&#xA;<p>Because of this, the definition has been split into two distinct concepts: <em>trivial</em> classes and <em>standard-layout</em> classes, because these are more useful than POD. The standard now rarely uses the term POD, preferring the more specific <em>trivial</em> and <em>standard-layout</em> concepts.</p>&#xA;&#xA;<p>The new definition basically says that a POD is a class that is both trivial and has standard-layout, and this property must hold recursively for all non-static data members:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A POD struct is a non-union class that is both a trivial class and a standard-layout class,&#xA;  and has no non-static data members of type non-POD struct, non-POD union (or array of such types).&#xA;  Similarly, a POD union is a union that is both a trivial class and a standard layout class, and has&#xA;  no non-static data members of type non-POD struct, non-POD union (or array of such types).&#xA;  A POD class is a class that is either a POD struct or a POD union.</p>&#xA;</blockquote>&#xA;&#xA;<p>Let's go over each of these two properties in detail separately.</p>&#xA;&#xA;<h2>Trivial classes</h2>&#xA;&#xA;<p><em>Trivial</em> is the first property mentioned above: trivial classes support static initialization. &#xA;If a class is trivially copyable (a superset of trivial classes), it is ok to copy its representation over the place with things like <code>memcpy</code> and expect the result to be the same.</p>&#xA;&#xA;<p>The standard defines a trivial class as follows:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A trivially copyable class is a class that:</p>&#xA;  &#xA;  <p>ΓÇö has no non-trivial copy constructors (12.8),</p>&#xA;  &#xA;  <p>ΓÇö has no non-trivial move constructors (12.8),</p>&#xA;  &#xA;  <p>ΓÇö has no non-trivial copy assignment operators (13.5.3, 12.8),</p>&#xA;  &#xA;  <p>ΓÇö has no non-trivial move assignment operators (13.5.3, 12.8), and</p>&#xA;  &#xA;  <p>ΓÇö has a trivial destructor (12.4).</p>&#xA;  &#xA;  <p>A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable.</p>&#xA;  &#xA;  <p>[ <em>Note:</em> In particular, a trivially copyable or trivial class does not have virtual functions&#xA;  or virtual base classes.<em>ΓÇöend note</em> ]</p>&#xA;</blockquote>&#xA;&#xA;<p>So, what are all those trivial and non-trivial things?</p>&#xA;&#xA;<blockquote>&#xA;  <p>A copy/move constructor for class X is trivial if it is not user-provided and if</p>&#xA;  &#xA;  <p>ΓÇö class X has no virtual functions (10.3) and no virtual base classes (10.1), and</p>&#xA;  &#xA;  <p>ΓÇö the constructor selected to copy/move each direct base class subobject is trivial, and</p>&#xA;  &#xA;  <p>ΓÇö for each non-static data member of X that is of class type (or array thereof), the constructor&#xA;  selected to copy/move that member is trivial;</p>&#xA;  &#xA;  <p>otherwise the copy/move constructor is non-trivial.</p>&#xA;</blockquote>&#xA;&#xA;<p>Basically this means that a copy or move constructor is trivial if it is not user-provided, the class has nothing virtual in it, and this property holds recursively for all the members of the class and for the base class.</p>&#xA;&#xA;<p>The definition of a trivial copy/move assignment operator is very similar, simply replacing the word "constructor" with "assignment operator".</p>&#xA;&#xA;<p>A trivial destructor also has a similar definition, with the added constraint that it can't be virtual.</p>&#xA;&#xA;<p>And yet another similar rule exists for trivial default constructors, with the addition that a default constructor is not-trivial if the class has non-static data members with <em>brace-or-equal-initializers</em>, which we've seen above.</p>&#xA;&#xA;<p>Here are some examples to clear everything up:</p>&#xA;&#xA;<pre><code>// empty classes are trivial&#xA;struct Trivial1 {};&#xA;&#xA;// all special members are implicit&#xA;struct Trivial2 {&#xA;    int x;&#xA;};&#xA;&#xA;struct Trivial3 : Trivial2 { // base class is trivial&#xA;    Trivial3() = default; // not a user-provided ctor&#xA;    int y;&#xA;};&#xA;&#xA;struct Trivial4 {&#xA;public:&#xA;    int a;&#xA;private: // no restrictions on access modifiers&#xA;    int b;&#xA;};&#xA;&#xA;struct Trivial5 {&#xA;    Trivial1 a;&#xA;    Trivial2 b;&#xA;    Trivial3 c;&#xA;    Trivial4 d;&#xA;};&#xA;&#xA;struct Trivial6 {&#xA;    Trivial2 a[23];&#xA;};&#xA;&#xA;struct Trivial7 {&#xA;    Trivial6 c;&#xA;    void f(); // it's okay to have non-virtual functions&#xA;};&#xA;&#xA;struct Trivial8 {&#xA;     int x;&#xA;     static NonTrivial1 y; // no restrictions on static members&#xA;}&#xA;&#xA;struct Trivial9 {&#xA;     Trivial9() = default; // not user-provided&#xA;      // a regular constructor is okay because we still have default ctor&#xA;     Trivial9(int x) : x(x) {};&#xA;     int x;&#xA;}&#xA;&#xA;struct NonTrivial1 : Trivial 3 {&#xA;    virtual f(); // virtual members make non-trivial ctors&#xA;}&#xA;&#xA;struct NonTrivial2 {&#xA;    NonTrivial2() : z(42) {} // user-provided ctor&#xA;    int z;&#xA;}&#xA;&#xA;struct NonTrivial3 {&#xA;    NonTrivial3(); // user-provided ctor&#xA;    int w;&#xA;}&#xA;NonTrivial3::NonTrivial3() = default; // defaulted but not on first declaration&#xA;                                      // still counts as user-provided&#xA;struct NonTrivial5 {&#xA;    virtual ~NonTrivial5(); // virtual destructors are not trivial&#xA;};&#xA;</code></pre>&#xA;&#xA;<h2>Standard-layout</h2>&#xA;&#xA;<p><em>Standard-layout</em> is the second property. The standard mentions that these are useful for communicating with other languages, and that's because a standard-layout class has the same memory layout of the equivalent C struct or union.</p>&#xA;&#xA;<p>This is another property that must hold recursively for members and all base classes. And as usual, no virtual functions or virtual base classes are allowed. That would make the layout incompatible with C.</p>&#xA;&#xA;<p>A relaxed rule here is that standard-layout classes must have all non-static data members with the same access control. Previously these had to be all <em>public</em>, but now you can make them private or protected, as long as they are <em>all</em> private or <em>all</em> protected.</p>&#xA;&#xA;<p>When using inheritance, <em>only one</em> class in the whole inheritance tree can have non-static data members, and the first non-static data member cannot be of a base class type (this could break aliasing rules), otherwise, it's not a standard-layout class.</p>&#xA;&#xA;<p>This is how the definition goes in the standard text:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A standard-layout class is a class that:</p>&#xA;  &#xA;  <p>ΓÇö has no non-static data members of type non-standard-layout class (or array of such types)&#xA;  or reference,</p>&#xA;  &#xA;  <p>ΓÇö has no virtual functions (10.3) and no virtual base classes (10.1),</p>&#xA;  &#xA;  <p>ΓÇö has the same access control (Clause 11) for all non-static data members,</p>&#xA;  &#xA;  <p>ΓÇö has no non-standard-layout base classes,</p>&#xA;  &#xA;  <p>ΓÇö either has no non-static data members in the most derived class and at most one base class with&#xA;  non-static data members, or has no base classes with non-static data members, and</p>&#xA;  &#xA;  <p>ΓÇö has no base classes of the same type as the first non-static data member.</p>&#xA;  &#xA;  <p>A standard-layout struct is a standard-layout class defined with the class-key struct or&#xA;  the class-key class.</p>&#xA;  &#xA;  <p>A standard-layout union is a standard-layout class defined with the class-key union.</p>&#xA;  &#xA;  <p>[ <em>Note:</em> Standard-layout classes are useful for communicating with code written in other programming languages. Their layout is specified in 9.2.<em>ΓÇöend note</em> ]</p>&#xA;</blockquote>&#xA;&#xA;<p>And let's see a few examples.</p>&#xA;&#xA;<pre><code>// empty classes have standard-layout&#xA;struct StandardLayout1 {};&#xA;&#xA;struct StandardLayout2 {&#xA;    int x;&#xA;};&#xA;&#xA;struct StandardLayout3 {&#xA;private: // both are private, so it's ok&#xA;    int x;&#xA;    int y;&#xA;};&#xA;&#xA;struct StandardLayout4 : StandardLayout1 {&#xA;    int x;&#xA;    int y;&#xA;&#xA;    void f(); // perfectly fine to have non-virtual functions&#xA;};&#xA;&#xA;struct StandardLayout5 : StandardLayout1 {&#xA;    int x;&#xA;    StandardLayout1 y; // can have members of base type if they're not the first&#xA;};&#xA;&#xA;struct StandardLayout6 : StandardLayout1, StandardLayout5 {&#xA;    // can use multiple inheritance as long only&#xA;    // one class in the hierarchy has non-static data members&#xA;};&#xA;&#xA;struct StandardLayout7 {&#xA;    int x;&#xA;    int y;&#xA;    StandardLayout7(int x, int y) : x(x), y(y) {} // user-provided ctors are ok&#xA;};&#xA;&#xA;struct StandardLayout8 {&#xA;public:&#xA;    StandardLayout8(int x) : x(x) {} // user-provided ctors are ok&#xA;// ok to have non-static data members and other members with different access&#xA;private:&#xA;    int x;&#xA;};&#xA;&#xA;struct StandardLayout9 {&#xA;    int x;&#xA;    static NonStandardLayout1 y; // no restrictions on static members&#xA;};&#xA;&#xA;struct NonStandardLayout1 {&#xA;    virtual f(); // cannot have virtual functions&#xA;};&#xA;&#xA;struct NonStandardLayout2 {&#xA;    NonStandardLayout1 X; // has non-standard-layout member&#xA;};&#xA;&#xA;struct NonStandardLayout3 : StandardLayout1 {&#xA;    StandardLayout1 x; // first member cannot be of the same type as base&#xA;};&#xA;&#xA;struct NonStandardLayout4 : StandardLayout3 {&#xA;    int z; // more than one class has non-static data members&#xA;};&#xA;&#xA;struct NonStandardLayout5 : NonStandardLayout3 {}; // has a non-standard-layout base class&#xA;</code></pre>&#xA;&#xA;<h2>Conclusion</h2>&#xA;&#xA;<p>With these new rules a lot more types can be PODs now. And even if a type is not POD, we can take advantage of some of the POD properties separately (if it is only one of trivial or standard-layout).</p>&#xA;&#xA;<p>The standard library has traits to test these properties in the header <code>&lt;type_traits&gt;</code>:</p>&#xA;&#xA;<pre><code>template &lt;typename T&gt;&#xA;struct std::is_pod;&#xA;template &lt;typename T&gt;&#xA;struct std::is_trivial;&#xA;template &lt;typename T&gt;&#xA;struct std::is_trivially_copyable;&#xA;template &lt;typename T&gt;&#xA;struct std::is_standard_layout;&#xA;</code></pre>&#xA;
  8179532 |    1 | <p>An alternative would be a bunch of overloaded methods, like this:</p>&#xA;&#xA;<pre><code>private MyNewIncoming createIConnectedSubtypeInstance( OldIncoming connection ) {&#xA;  return new MyNewIncoming( connection );&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>That, however, works only if the caller knows what type <code>connection</code> is of, otherwise you'd have to rely on those <code>instanceof</code> checks.</p>&#xA;&#xA;<p>In that case you could also have some mapping OldClass->NewClass and use reflection to create instances, but I doubt that would be worth the hassle unless you need a <em>huge</em>  amount of mappings.</p>&#xA;&#xA;<p>Example:</p>&#xA;&#xA;<pre><code>Map&lt;Class&lt;? extends OldConnection&gt;, Class&lt;? extends NewConnection&gt;&gt; mapping; //initializing is up to you&#xA;&#xA;public NewConnection  createIConnectedSubtypeInstance(OldConnection connection) {&#xA;  try {&#xA;    Class&lt;? extends NewConnection&gt; subtype = mapping.get( connection.getClass() );&#xA;    return subtype.getConstructor( connection.getClass() ).newInstance( connection );&#xA;  } catch( Exception e) { //you might want to catch the more specific types&#xA;    //handle appropriateley&#xA;  }&#xA;} &#xA;</code></pre>&#xA;&#xA;<p>Note that this relies on the class of <code>connection</code> being mapped directly. If you map super classes you might have to check those if no mapping for the actual class of  <code>connection</code> can be found.</p>&#xA;&#xA;<p>Additionally, this relies on the constructors of the new instances to accept exactly one parameter of the mapped class type.</p>&#xA;
  1746311 |    1 | <p>I'm sorry but the answer is "they are called exceptions for a reason." That explanation is a "rule of thumb". You can't give a complete set of circumstances under which exceptions should or should not be used because what a fatal exception (English definition) is for one problem domain is normal operating procedure for a different problem domain. Rules of thumb are not designed to be followed blindly. Instead they are designed to guide your investigation of a solution. "They are called exceptions for a reason" tells you that you should determine ahead of time what is a normal error the caller can handle and what is an unusual circumstance the caller cannot handle without special coding (catch blocks).</p>&#xA;&#xA;<p>Just about every rule of programming is really a guideline saying "Don't do this unless you have a really good reason": "Never use goto", "Avoid global variables", "Regular expressions pre-increment your number of problems by one", etc. Exceptions are no exception....</p>&#xA;
     5953 |    1 | <p>While I understand the problem that Jeff, et. al. have with regions, what I <em>don't</em> understand is why hitting CTRL-M,CTRL-L to expand all regions in a file is so difficult to deal with.</p>
  3602424 |    1 | <p>C++03's categories are too restricted to capture the introduction of rvalue references correctly into expression attributes. </p>&#xA;&#xA;<p>With the introduction of them, it was said that an unnamed rvalue reference evaluates to an rvalue, such that overload resolution would prefer rvalue reference bindings, which would make it select move constructors over copy constructors. But it was found that this causes problems all around, for example with <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#690">Dynamic Types</a> and with qualifications. </p>&#xA;&#xA;<p>To show this, consider</p>&#xA;&#xA;<pre><code>int const&amp;&amp; f();&#xA;&#xA;int main() {&#xA;  int &amp;&amp;i = f(); // disgusting!&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>On pre-xvalue drafts, this was allowed, because in C++03, rvalues of non-class types are never cv-qualified. But it is intended that <code>const</code> applies in the rvalue-reference case, because here we <em>do</em> refer to objects (= memory!), and dropping const from non-class rvalues is mainly for the reason that there is no object around. </p>&#xA;&#xA;<p>The issue for dynamic types is of similar nature. In C++03, rvalues of class type have a known dynamic type - it's the static type of that expression. Because to have it another way, you need references or dereferences, which evaluate to an lvalue. That isn't true with unnamed rvalue references, yet they can show polymorphic behavior. So to solve it, </p>&#xA;&#xA;<ul>&#xA;<li><p>unnamed rvalue references become <strong>xvalues</strong>. They can be qualified and potentially have their dynamic type different. They do, like intended, prefer rvalue references during overloading, and won't bind to non-const lvalue references. </p></li>&#xA;<li><p>What previously was an rvalue (literals, objects created by casts to non-reference types) now becomes an <strong>prvalue</strong>. They have the same preference as xvalues during overloading. </p></li>&#xA;<li><p>What previously was an lvalue stays an lvalue. </p></li>&#xA;</ul>&#xA;&#xA;<p>And two groupings are done to capture those that can be qualified and can have different dynamic types (<strong>glvalues</strong>) and those where overloading prefers rvalue reference binding (<strong>rvalues</strong>). </p>&#xA;
   407790 |    1 | <p>I think that using regions in C# is totally acceptable to collapse your code while in VS. Too many people try to say it hides your code and makes it hard to find things. But if you use them properly they can be very helpful to identify sections of code.</p>&#xA;
 18176485 |    1 | <p>Here's an idea. What if you used a static analyzer (something you could build with <a href="http://esprima.org/" rel="nofollow">esprima</a>, for example) to determine which outside variables the eval'd code uses, and alias them. By "outside code" i mean variables the eval'd code <em>uses</em> but does not <em>declare</em>. Here's an example:</p>&#xA;&#xA;<pre><code>eval(safeEval(&#xA;     "var x = window.theX;"&#xA;    +"y = Math.random();"&#xA;    +"eval('window.z = 500;');"))&#xA;</code></pre>&#xA;&#xA;<p>where safeEval returns the javascript string modified with a context that blocks access to outside variables:</p>&#xA;&#xA;<pre><code>";(function(y, Math, window) {"&#xA;  +"var x = window.theX;"&#xA;  +"y = Math.random();"&#xA;  +"eval(safeEval('window.z = 500;');"&#xA;"})();"&#xA;</code></pre>&#xA;&#xA;<p>There are a couple things you can do now with this:</p>&#xA;&#xA;<ul>&#xA;<li>You can ensure that eval'd code can't read the values of outside variables, nor write to them (by passing <code>undefined</code> as the function arguments, or not passing arguments). Or you could simply throw an exception in cases where variables are being unsafely accessed.</li>&#xA;<li>You also ensure that variables created by eval don't affect the surrounding scope</li>&#xA;<li>You could allow eval to create variables in the surrounding scope by declaring those variables outside the closure instead of as function parameters</li>&#xA;<li>You could allow read-only access by <em>copying</em> values of outside variables and using them as arguments to the function</li>&#xA;<li>You could allow read-write access to specific variables by telling safeEval to not alias those particular names</li>&#xA;<li>You can detect cases where the eval does <em>not</em> modify a particular variable and allow it to be automatically excluded from being aliased (eg. Math in this case, is not being modified)</li>&#xA;<li>You could give the eval a context in which to run, by passing in argument values that may be <em>different</em> than the surrounding context</li>&#xA;<li>You could capture context changes by also returning the function arguments from the function so you can examine them outside the eval.</li>&#xA;</ul>&#xA;&#xA;<p>Note that the use of <code>eval</code> is a special case, since by its nature, it effectively can't be wrapped in another function (which is why we have to do <code>eval(safeEval(...))</code>).</p>&#xA;&#xA;<p>Of course, doing all this work may slow down your code, but there are certainly places where the hit won't matter. Hope this helps someone. And if anyone creates a proof of concept, I'd love to see a link to it here ; )</p>&#xA;
    52914 |    1 | <p>Allowing methods and constructors in enums surprised me. For example:</p>&#xA;&#xA;<pre><code>enum Cats {&#xA;  FELIX(2), SHEEBA(3), RUFUS(7);&#xA;&#xA;  private int mAge;&#xA;  Cats(int age) {&#xA;    mAge = age;&#xA;  }&#xA;  public int getAge() {&#xA;    return mAge;&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>You can even have a "constant specific class body" which allows a specific enum value to override methods.</p>&#xA;&#xA;<p>More documentation <a href="http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html" rel="nofollow">here</a>.</p>&#xA;
  1369376 |    1 | <p>Clicking on the return type in a method's declaration highlights all exit points of the method.</p>&#xA;&#xA;<p>for instance:</p>&#xA;&#xA;<pre><code>1: public void foo()&#xA;2: {&#xA;3:   somecode();&#xA;4:    if ( blah ) return;&#xA;5:&#xA;6:    bar();&#xA;7: }&#xA;</code></pre>&#xA;&#xA;<p>clicking on <strong>void</strong> will highlight the <strong>return</strong> on line 4 and the close <strong>}</strong> on line 7.</p>&#xA;&#xA;<p><strong>Update</strong>: It even works for try{} catch blocks. If you put cursor on exception in the catch block and eclipse will highlight the probable methods which may throw that exception.</p>&#xA;
   136354 |    1 | <p>For efficiency with very large files (common in logfile situations where you may want to use tail), you generally want to avoid reading the whole file (even if you do do it without reading the whole file into memory at once)  However, you do need to somehow work out the offset in lines rather than characters.  One possibility is reading backwards with seek() char by char, but this is very slow.  Instead, its better to process in larger blocks.</p>&#xA;&#xA;<p>I've a utility function I wrote a while ago to read files backwards that can be used here.</p>&#xA;&#xA;<pre><code>import os, itertools&#xA;&#xA;def rblocks(f, blocksize=4096):&#xA;    """Read file as series of blocks from end of file to start.&#xA;&#xA;    The data itself is in normal order, only the order of the blocks is reversed.&#xA;    ie. "hello world" -&gt; ["ld","wor", "lo ", "hel"]&#xA;    Note that the file must be opened in binary mode.&#xA;    """&#xA;    if 'b' not in f.mode.lower():&#xA;        raise Exception("File must be opened using binary mode.")&#xA;    size = os.stat(f.name).st_size&#xA;    fullblocks, lastblock = divmod(size, blocksize)&#xA;&#xA;    # The first(end of file) block will be short, since this leaves &#xA;    # the rest aligned on a blocksize boundary.  This may be more &#xA;    # efficient than having the last (first in file) block be short&#xA;    f.seek(-lastblock,2)&#xA;    yield f.read(lastblock)&#xA;&#xA;    for i in range(fullblocks-1,-1, -1):&#xA;        f.seek(i * blocksize)&#xA;        yield f.read(blocksize)&#xA;&#xA;def tail(f, nlines):&#xA;    buf = ''&#xA;    result = []&#xA;    for block in rblocks(f):&#xA;        buf = block + buf&#xA;        lines = buf.splitlines()&#xA;&#xA;        # Return all lines except the first (since may be partial)&#xA;        if lines:&#xA;            result.extend(lines[1:]) # First line may not be complete&#xA;            if(len(result) &gt;= nlines):&#xA;                return result[-nlines:]&#xA;&#xA;            buf = lines[0]&#xA;&#xA;    return ([buf]+result)[-nlines:]&#xA;&#xA;&#xA;f=open('file_to_tail.txt','rb')&#xA;for line in tail(f, 20):&#xA;    print line&#xA;</code></pre>&#xA;&#xA;<p>[Edit] Added more specific version (avoids need to reverse twice)</p>&#xA;
    47493 |    1 | <p>I was surprised by instance initializers the other day.  I was deleting some code-folded methods and ended up creating multiple instance initializers :</p>&#xA;&#xA;<pre><code>public class App {&#xA;    public App(String name) { System.out.println(name + "'s constructor called"); }&#xA;&#xA;    static { System.out.println("static initializer called"); }&#xA;&#xA;    { System.out.println("instance initializer called"); }&#xA;&#xA;    static { System.out.println("static initializer2 called"); }&#xA;&#xA;    { System.out.println("instance initializer2 called"); }&#xA;&#xA;    public static void main( String[] args ) {&#xA;        new App("one");&#xA;        new App("two");&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Executing the <code>main</code> method will display: </p>&#xA;&#xA;<pre><code>static initializer called&#xA;static initializer2 called&#xA;instance initializer called&#xA;instance initializer2 called&#xA;one's constructor called&#xA;instance initializer called&#xA;instance initializer2 called&#xA;two's constructor called&#xA;</code></pre>&#xA;&#xA;<p>I guess these would be useful if you had multiple constructors and needed common code</p>&#xA;&#xA;<p>They also provide syntactic sugar for initializing your classes:</p>&#xA;&#xA;<pre><code>List&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(){{ add(1); add(2); }};&#xA;&#xA;Map&lt;String,String&gt; codes = new HashMap&lt;String,String&gt;(){{ &#xA;  put("1","one"); &#xA;  put("2","two");&#xA;}};&#xA;</code></pre>&#xA;
 19501832 |    1 | <p>From what I've read it seems Chrome blocks alerts once that event has been triggered. You can run some functions, however, just not anything that interacts with the user it seems.</p>&#xA;&#xA;<p>From <a href="http://stackoverflow.com/questions/9626059/window-onbeforeunload-in-chrome-what-is-the-most-recent-fix">window.onbeforeunload in Chrome: what is the most recent fix?</a>, it seems, if all you want to do is pop up a confirmation message, you have to do it by returning a string with the message from the function you set as the callback.</p>&#xA;&#xA;<pre><code>window.onbeforeunload = function() {&#xA;    // Some wrap up code (no alerts, confirms, redirects, etc)&#xA;    return 'My confirmation messsage'; &#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The text "My confirmation message" will then show up in a confirmation dialogue of Chrome's choosing. Firefox documents this behaviour <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/beforeunload?redirectlocale=en-US&amp;redirectslug=DOM/Mozilla_event_reference/beforeunload" rel="nofollow">here</a>.</p>&#xA;
  1744108 |    1 | <p>It's not that exceptions should rarely be used. It's just that they should only be thrown in exceptional circumstances. For example, if a user enters the wrong password, that's not exceptional.</p>&#xA;&#xA;<p>The reason is simple: exceptions exit a function abruptly, and propagate up the stack to a <code>catch</code> block. This process is very computationally expensive: C++ builds its exception system to have little overhead on "normal" function calls, so when an exception is raised, it has to do a lot of work to find where to go. Moreover, since every line of code could possibly raise an exception. If we have some function <code>f</code> that raises exceptions often, we now have to take care to use our <code>try</code>/<code>catch</code> blocks around every call of <code>f</code>. That's a pretty bad interface/implementation coupling. </p>&#xA;
  6902204 |    1 | <p>Or, should I rather ask, when will VS code formatting work properly for Razor markup? The formatting works for most structures, but it seems to choke on 'if' blocks. The code below is as it is formatted by VS. It is very easy to fix this case, with one more indent, but I nicely accepted the formatting in everyday use, and like to use it often for the bulk of my code, so I'd rather avoid manual formatting if possible. Right now I just leave it as VS formats it. </p>&#xA;&#xA;<pre><code>@{ &#xA;    if (User.Identity.IsAuthenticated)&#xA;    {&#xA;    &lt;text&gt;Hello &lt;/text&gt;&#xA;    @Html.Display("@ViewBag.UserName") &lt;text&gt; - &lt;/text&gt;&#xA;    @Html.ActionLink("Sign Out", "LogOff", "Account", null, new { style = "font-weight: bold;" })&#xA;    }&#xA; }&#xA;</code></pre>&#xA;&#xA;<p>I think it's important for readability that, e.g. in the above, the body of the if block is indented, besides just looking nicer. </p>&#xA;
 24996118 |    1 | <p>I have two CSV files with 10 columns each where the first column is called the "Primary Key". </p>&#xA;&#xA;<p>I need to use Python to find the common region between the two CSV files. For example, I should be able to detect that rows 27-45 in CSV1 is equal to rows 125-145 in CSV2 and so on. </p>&#xA;&#xA;<p>I am only comparing the Primary Key (Column One). The rest of the data is not considered for comparison. I need to extract these common regions in two separate CSV files (one for CSV1 and one for CSV2).</p>&#xA;&#xA;<p>I have already parsed and stored the rows of the two CSV files in two 'list of lists',  <code>lstCAN_LOG_TABLE</code> and <code>lstSHADOW_LOG_TABLE</code>, so the problem reduces down to comparing these two list of lists.</p>&#xA;&#xA;<p>I am currently assuming is that if there are 10 subsequent matches (<code>MAX_COMMON_THRESHOLD</code>), I have reached the beginning of a common region. I must not log single rows (comparing to true) because there would be regions equal (As per primary key) and those regions I need to identify.  </p>&#xA;&#xA;<pre><code>for index in range(len(lstCAN_LOG_TABLE)):&#xA;    for l_index in range(len(lstSHADOW_LOG_TABLE)):&#xA;        if(lstSHADOW_LOG_TABLE[l_index][1] == lstCAN_LOG_TABLE[index][1]):  #Consider for comparison only CAN IDs&#xA;            index_can_log = index                                           #Position where CAN Log is to be compared&#xA;            index_shadow_log = l_index                                      #Position from where CAN Shadow Log is to be considered&#xA;            start = index_shadow_log&#xA;            if((index_shadow_log + MAX_COMMON_THRESHOLD) &lt;= (input_file_two_row_count-1)):&#xA;                end = index_shadow_log + MAX_COMMON_THRESHOLD&#xA;            else:&#xA;                end = (index_shadow_log) + ((input_file_two_row_count-1) - (index_shadow_log))&#xA;            can_index = index&#xA;            bPreScreened = 1&#xA;            for num in range(start,end):&#xA;                if(lstSHADOW_LOG_TABLE[num][1] == lstCAN_LOG_TABLE[can_index][1]):&#xA;                    if((can_index + 1) &lt; (input_file_one_row_count-1)):&#xA;                        can_index = can_index + 1                           &#xA;                    else:&#xA;                        break   &#xA;                else:&#xA;                    bPreScreened = 0&#xA;                    print("No Match")&#xA;                    break&#xA;            #we might have found start of common region         &#xA;            if(bPreScreened == 1):      &#xA;                print("Start={0} End={1} can_index={2}".format(start,end,can_index))&#xA;                for number in range(start,end):&#xA;                    if(lstSHADOW_LOG_TABLE[number][1] == lstCAN_LOG_TABLE[index][1]):                           &#xA;                        writer_two.writerow(lstSHADOW_LOG_TABLE[number][0])&#xA;                        writer_one.writerow(lstCAN_LOG_TABLE[index][0])&#xA;                        if((index + 1) &lt; (input_file_one_row_count-1)):&#xA;                            index = index + 1                           &#xA;                        else:&#xA;                            dump_file.close()   &#xA;                            print("\nCommon Region in Two CSVs identifed and recorded\n")                           &#xA;                            return&#xA;dump_file.close()   &#xA;print("\nCommon Region in Two CSVs identifed and recorded\n")&#xA;</code></pre>&#xA;&#xA;<p>I am getting strange output. Even the first CSV file has only 1880 Rows but in the common region CSV for the first CSV I am getting many more entries. I am not getting desired output.</p>&#xA;&#xA;<p><strong>EDITED FROM HERE</strong></p>&#xA;&#xA;<p><strong>CSV1:</strong></p>&#xA;&#xA;<pre><code>216 0.000238225 F4  41  C0  FB  28  0   0   0   MS CAN&#xA;109 0.0002256   15  8B  31  0   8   43  58  0   HS CAN&#xA;216 0.000238025 FB  47  C6  1   28  0   0   0   MS CAN&#xA;340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>CSV2:</strong></p>&#xA;&#xA;<pre><code>216 0.0002361   0F  5C  DB  14  28  0   0   0   MS CAN&#xA;216 0.000236225 16  63  E2  1B  28  0   0   0   MS CAN&#xA;109 0.0001412   16  A3  31  0   8   63  58  0   HS CAN&#xA;216 0.000234075 1C  6A  E9  22  28  0   0   0   MS CAN&#xA;40A 0.000259925 C1  1   46  54  30  44  47  36  HS CAN&#xA;4A  0.000565975 2   0   0   0   0   0   0   C0  MS CAN&#xA;340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>EXPECTED OUTPUT CSV1:</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>EXPECTED OUTPUT CSV2:</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>OBSERVED OUTPUT CSV1</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p>And many thousands of redundant row data </p>&#xA;&#xA;<p><strong>EDITED - SOLVED AS PER ADVICE (CHANGED FOR TO WHILE):</strong></p>&#xA;&#xA;<p><strong>LEARNING:</strong> <em>In Python FOR Loop Index cannot be changed at RunTime</em></p>&#xA;&#xA;<pre><code>dump_file=open("MATCH_PATTERN.txt",'w+')&#xA;print("Number of Entries CAN LOG={0}".format(len(lstCAN_LOG_TABLE)))&#xA;print("Number of Entries SHADOW LOG={0}".format(len(lstSHADOW_LOG_TABLE)))  &#xA;index = 0   &#xA;while(index &lt; (input_file_one_row_count - 1)):&#xA;    l_index = 0&#xA;    while(l_index &lt; (input_file_two_row_count - 1)):&#xA;        if(lstSHADOW_LOG_TABLE[l_index][1] == lstCAN_LOG_TABLE[index][1]):  #Consider for comparison only CAN IDs&#xA;            index_can_log = index                                           #Position where CAN Log is to be compared&#xA;            index_shadow_log = l_index                                      #Position from where CAN Shadow Log is to be considered&#xA;            start = index_shadow_log&#xA;            can_index = index&#xA;            if((index_shadow_log + MAX_COMMON_THRESHOLD) &lt;= (input_file_two_row_count-1)):&#xA;                end = index_shadow_log + MAX_COMMON_THRESHOLD&#xA;            else:&#xA;                end = (index_shadow_log) + ((input_file_two_row_count-1) - (index_shadow_log))              &#xA;            bPreScreened = 1&#xA;            for num in range(start,end):&#xA;                if(lstSHADOW_LOG_TABLE[num][1] == lstCAN_LOG_TABLE[can_index][1]):                      &#xA;                    if((can_index + 1) &lt; (input_file_one_row_count-1)):&#xA;                        can_index = can_index + 1                           &#xA;                    else:&#xA;                        break   &#xA;                else:&#xA;                    bPreScreened = 0&#xA;                    break&#xA;            #we might have found start of common region         &#xA;            if(bPreScreened == 1):      &#xA;                print("Shadow Start={0} Shadow End={1} CAN INDEX={2}".format(start,end,index))&#xA;                for number in range(start,end):&#xA;                    if(lstSHADOW_LOG_TABLE[number][1] == lstCAN_LOG_TABLE[index][1]):                           &#xA;                        writer_two.writerow(lstSHADOW_LOG_TABLE[number][0])&#xA;                        writer_one.writerow(lstCAN_LOG_TABLE[index][0])&#xA;                        if((index + 1) &lt; (input_file_one_row_count-1)):&#xA;                            index = index + 1&#xA;                        if((l_index + 1) &lt; (input_file_two_row_count-1)):&#xA;                            l_index = l_index + 1                               &#xA;                        else:&#xA;                            dump_file.close()   &#xA;                            print("\nCommon Region in Two CSVs identifed and recorded\n")                           &#xA;                            return&#xA;            else:&#xA;                l_index = l_index + 1&#xA;        else:&#xA;            l_index = l_index + 1&#xA;    index = index + 1   &#xA;dump_file.close()   &#xA;print("\nCommon Region in Two CSVs identifed and recorded\n")&#xA;</code></pre>&#xA;
   117951 |    1 | <p>Here are some interesting things:</p>&#xA;&#xA;<ul>&#xA;<li>Comparing <code>NaN</code> with anything (even <code>NaN</code>) is always false, that includes <code>==</code>, <code>&lt;</code> and <code>&gt;</code>.</li>&#xA;<li><code>NaN</code> Stands for Not a Number but if you ask for the type it actually returns a number.</li>&#xA;<li><code>Array.sort</code> can take a comparator function and is called by a quicksort-like driver (depends on implementation).</li>&#xA;<li>Regular expression "constants" can maintain state, like the last thing they matched.</li>&#xA;<li>Some versions of JavaScript allow you to access <code>$0</code>, <code>$1</code>, <code>$2</code> members on a regex.</li>&#xA;<li><code>null</code> is unlike anything else. It is neither an object, a boolean, a number, a string, nor <code>undefined</code>. It's a bit like an "alternate" <code>undefined</code>. (Note: <code>typeof null == "object"</code>)</li>&#xA;<li>In the outermost context, <code>this</code> yields the otherwise unnameable [Global] object.</li>&#xA;<li>Declaring a variable with <code>var</code>, instead of just relying on automatic declaration of the variable gives the runtime a real chance of optimizing access to that variable</li>&#xA;<li>The <code>with</code> construct will destroy such optimzations</li>&#xA;<li>Variable names can contain Unicode characters.</li>&#xA;<li>JavaScript regular expressions are not actually regular. They are based on Perl's regexs, and it is possible to construct expressions with lookaheads that take a very, very long time to evaluate.</li>&#xA;<li>Blocks can be labeled and used as the targets of <code>break</code>. Loops can be labeled and used as the target of <code>continue</code>.</li>&#xA;<li>Arrays are not sparse. Setting the 1000th element of an otherwise empty array should fill it with <code>undefined</code>. (depends on implementation)</li>&#xA;<li><code>if (new Boolean(false)) {...}</code>  will execute the <code>{...}</code> block</li>&#xA;<li>Javascript's regular expression engine's are implementation specific: e.g. it is possible to write "non-portable" regular expressions. </li>&#xA;</ul>&#xA;&#xA;<p><em>[updated a little in response to good comments; please see comments]</em></p>&#xA;
 11540204 |    1 | <p>My first answer was an extremely simplified introduction to move semantics, and many details were left out on purpose to keep it simple.&#xA;However, there is a lot more to move semantics, and I thought it was time for a second answer to fill the gaps.&#xA;The first answer is already quite old, and it did not feel right to simply replace it with a completely different text. I think it still serves well as a first introduction. But if you want to dig deeper, read on :)</p>&#xA;&#xA;<p>Stephan T. Lavavej took the time provide valuable feedback. Thank you very much, Stephan!</p>&#xA;&#xA;<h2>Introduction</h2>&#xA;&#xA;<p>Move semantics allows an object, under certain conditions, to take ownership of some other object's external resources. This is important in two ways:</p>&#xA;&#xA;<ol>&#xA;<li><p>Turning expensive copies into cheap moves. See my first answer for an example. Note that if an object does not manage at least one external resource (either directly, or indirectly through its member objects), move semantics will not offer any advantages over copy semantics. In that case, copying an object and moving an object means the exact same thing:</p>&#xA;&#xA;<pre><code>class cannot_benefit_from_move_semantics&#xA;{&#xA;    int a;        // moving an int means copying an int&#xA;    float b;      // moving a float means copying a float&#xA;    double c;     // moving a double means copying a double&#xA;    char d[64];   // moving a char array means copying a char array&#xA;&#xA;    // ...&#xA;};&#xA;</code></pre></li>&#xA;<li><p>Implementing safe "move-only" types; that is, types for which copying does not make sense, but moving does.  Examples include locks, file handles, and smart pointers with unique ownership semantics. Note: This answer discusses <code>std::auto_ptr</code>, a deprecated C++98 standard library template, which was replaced by <code>std::unique_ptr</code> in C++11. Intermediate C++ programmers are probably at least somewhat familiar with <code>std::auto_ptr</code>, and because of the "move semantics" it displays, it seems like a good starting point for discussing move semantics in C++11. YMMV.</p></li>&#xA;</ol>&#xA;&#xA;<h2>What is a move?</h2>&#xA;&#xA;<p>The C++98 standard library offers a smart pointer with unique ownership semantics called <code>std::auto_ptr&lt;T&gt;</code>. In case you are unfamiliar with <code>auto_ptr</code>, its purpose is to guarantee that a dynamically allocated object is always released, even in the face of exceptions:</p>&#xA;&#xA;<pre><code>{&#xA;    std::auto_ptr&lt;Shape&gt; a(new Triangle);&#xA;    // ...&#xA;    // arbitrary code, could throw exceptions&#xA;    // ...&#xA;}   // &lt;--- when a goes out of scope, the triangle is deleted automatically&#xA;</code></pre>&#xA;&#xA;<p>The unusual thing about <code>auto_ptr</code> is its "copying" behavior:</p>&#xA;&#xA;<pre><code>auto_ptr&lt;Shape&gt; a(new Triangle);&#xA;&#xA;      +---------------+&#xA;      | triangle data |&#xA;      +---------------+&#xA;        ^&#xA;        |&#xA;        |&#xA;        |&#xA;  +-----|---+&#xA;  |   +-|-+ |&#xA;a | p | | | |&#xA;  |   +---+ |&#xA;  +---------+&#xA;&#xA;auto_ptr&lt;Shape&gt; b(a);&#xA;&#xA;      +---------------+&#xA;      | triangle data |&#xA;      +---------------+&#xA;        ^&#xA;        |&#xA;        +----------------------+&#xA;                               |&#xA;  +---------+            +-----|---+&#xA;  |   +---+ |            |   +-|-+ |&#xA;a | p |   | |          b | p | | | |&#xA;  |   +---+ |            |   +---+ |&#xA;  +---------+            +---------+&#xA;</code></pre>&#xA;&#xA;<p>Note how the initialization of <code>b</code> with <code>a</code> does <em>not</em> copy the triangle, but instead transfers the ownership of the triangle from <code>a</code> to <code>b</code>. We also say "<code>a</code> is <em>moved into</em> <code>b</code>" or "the triangle is <em>moved</em> from <code>a</code> <em>to</em> <code>b</code>". This may sound confusing, because the triangle itself always stays at the same place in memory.</p>&#xA;&#xA;<blockquote>&#xA;  <p>To move an object means to transfer ownership of some resource it manages to another object.</p>&#xA;</blockquote>&#xA;&#xA;<p>The copy constructor of <code>auto_ptr</code> probably looks something like this (somewhat simplified):</p>&#xA;&#xA;<pre><code>auto_ptr(auto_ptr&amp; source)   // note the missing const&#xA;{&#xA;    p = source.p;&#xA;    source.p = 0;   // now the source no longer owns the object&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2>Dangerous and harmless moves</h2>&#xA;&#xA;<p>The dangerous thing about <code>auto_ptr</code> is that what syntactically looks like a copy is actually a move. Trying to call a member function on a moved-from <code>auto_ptr</code> will invoke undefined behavior, so you have to be very careful not to use an <code>auto_ptr</code> after it has been moved from:</p>&#xA;&#xA;<pre><code>auto_ptr&lt;Shape&gt; a(new Triangle);   // create triangle&#xA;auto_ptr&lt;Shape&gt; b(a);              // move a into b&#xA;double area = a-&gt;area();           // undefined behavior&#xA;</code></pre>&#xA;&#xA;<p>But <code>auto_ptr</code> is not <em>always</em> dangerous. Factory functions are a perfectly fine use case for <code>auto_ptr</code>:</p>&#xA;&#xA;<pre><code>auto_ptr&lt;Shape&gt; make_triangle()&#xA;{&#xA;    return auto_ptr&lt;Shape&gt;(new Triangle);&#xA;}&#xA;&#xA;auto_ptr&lt;Shape&gt; c(make_triangle());      // move temporary into c&#xA;double area = make_triangle()-&gt;area();   // perfectly safe&#xA;</code></pre>&#xA;&#xA;<p>Note how both examples follow the same syntactic pattern:</p>&#xA;&#xA;<pre><code>auto_ptr&lt;Shape&gt; variable(expression);&#xA;double area = expression-&gt;area();&#xA;</code></pre>&#xA;&#xA;<p>And yet, one of them invokes undefined behavior, whereas the other one does not. So what is the difference between the expressions <code>a</code> and <code>make_triangle()</code>? Aren't they both of the same type? Indeed they are, but they have different <em>value categories</em>.</p>&#xA;&#xA;<h2>Value categories</h2>&#xA;&#xA;<p>Obviously, there must be some profound difference between the expression <code>a</code> which denotes an <code>auto_ptr</code> variable, and the expression <code>make_triangle()</code> which denotes the call of a function that returns an <code>auto_ptr</code> by value, thus creating a fresh temporary <code>auto_ptr</code> object every time it is called. <code>a</code> is an example of an <em>lvalue</em>, whereas <code>make_triangle()</code> is an example of an <em>rvalue</em>.</p>&#xA;&#xA;<p>Moving from lvalues such as <code>a</code> is dangerous, because we could later try to call a member function via <code>a</code>, invoking undefined behavior. On the other hand, moving from rvalues such as <code>make_triangle()</code> is perfectly safe, because after the copy constructor has done its job, we cannot use the temporary again. There is no expression that denotes said temporary; if we simply write <code>make_triangle()</code> again, we get a <em>different</em> temporary. In fact, the moved-from temporary is already gone on the next line:</p>&#xA;&#xA;<pre><code>auto_ptr&lt;Shape&gt; c(make_triangle());&#xA;                                  ^ the moved-from temporary dies right here&#xA;</code></pre>&#xA;&#xA;<p>Note that the letters <code>l</code> and <code>r</code> have a historic origin in the left-hand side and right-hand side of an assignment. This is no longer true in C++, because there are lvalues which cannot appear on the left-hand side of an assignment (like arrays or user-defined types without an assignment operator), and there are rvalues which can (all rvalues of class types with an assignment operator).</p>&#xA;&#xA;<blockquote>&#xA;  <p>An rvalue of class type is an expression whose evaluation creates a temporary object.&#xA;  Under normal circumstances, no other expression inside the same scope denotes the same temporary object.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Rvalue references</h2>&#xA;&#xA;<p>We now understand that moving from lvalues is potentially dangerous, but moving from rvalues is harmless. If C++ had language support to distinguish lvalue arguments from rvalue arguments, we could either completely forbid moving from lvalues, or at least make moving from lvalues <em>explicit</em> at call site, so that we no longer move by accident.</p>&#xA;&#xA;<p>C++11's answer to this problem is <em>rvalue references</em>. An rvalue reference is a new kind of reference that only binds to rvalues, and the syntax is <code>X&amp;&amp;</code>. The good old reference <code>X&amp;</code> is now known as an <em>lvalue reference</em>. (Note that <code>X&amp;&amp;</code> is <em>not</em> a reference to a reference; there is no such thing in C++.)</p>&#xA;&#xA;<p>If we throw <code>const</code> into the mix, we already have four different kinds of references. What kinds of expressions of type <code>X</code> can they bind to?</p>&#xA;&#xA;<pre><code>            lvalue   const lvalue   rvalue   const rvalue&#xA;---------------------------------------------------------              &#xA;X&amp;          yes&#xA;const X&amp;    yes      yes            yes      yes&#xA;X&amp;&amp;                                 yes&#xA;const X&amp;&amp;                           yes      yes&#xA;</code></pre>&#xA;&#xA;<p>In practice, you can forget about <code>const X&amp;&amp;</code>. Being restricted to read from rvalues is not very useful.</p>&#xA;&#xA;<blockquote>&#xA;  <p>An rvalue reference <code>X&amp;&amp;</code> is a new kind of reference that only binds to rvalues.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Implicit conversions</h2>&#xA;&#xA;<p>Rvalue references went through several versions. Since version 2.1, an rvalue reference <code>X&amp;&amp;</code> also binds to all value categories of a different type <code>Y</code>, provided there is an implicit conversion from <code>Y</code> to <code>X</code>. In that case, a temporary of type <code>X</code> is created, and the rvalue reference is bound to that temporary:</p>&#xA;&#xA;<pre><code>void some_function(std::string&amp;&amp; r);&#xA;&#xA;some_function("hello world");&#xA;</code></pre>&#xA;&#xA;<p>In the above example, <code>"hello world"</code> is an lvalue of type <code>const char[12]</code>. Since there is an implicit conversion from <code>const char[12]</code> through <code>const char*</code> to <code>std::string</code>, a temporary of type <code>std::string</code> is created, and <code>r</code> is bound to that temporary. This is one of the cases where the distinction between rvalues (expressions) and temporaries (objects) is a bit blurry.</p>&#xA;&#xA;<h2>Move constructors</h2>&#xA;&#xA;<p>A useful example of a function with an <code>X&amp;&amp;</code> parameter is the <em>move constructor</em> <code>X::X(X&amp;&amp; source)</code>. Its purpose is to transfer ownership of the managed resource from the source into the current object.</p>&#xA;&#xA;<p>In C++11, <code>std::auto_ptr&lt;T&gt;</code> has been replaced by <code>std::unique_ptr&lt;T&gt;</code> which takes advantage of rvalue references. I will develop and discuss a simplified version of <code>unique_ptr</code>. First, we encapsulate a raw pointer and overload the operators <code>-&gt;</code> and <code>*</code>, so our class feels like a pointer:</p>&#xA;&#xA;<pre><code>template&lt;typename T&gt;&#xA;class unique_ptr&#xA;{&#xA;    T* ptr;&#xA;&#xA;public:&#xA;&#xA;    T* operator-&gt;() const&#xA;    {&#xA;        return ptr;&#xA;    }&#xA;&#xA;    T&amp; operator*() const&#xA;    {&#xA;        return *ptr;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>The constructor takes ownership of the object, and the destructor deletes it:</p>&#xA;&#xA;<pre><code>    explicit unique_ptr(T* p = nullptr)&#xA;    {&#xA;        ptr = p;&#xA;    }&#xA;&#xA;    ~unique_ptr()&#xA;    {&#xA;        delete ptr;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>Now comes the interesting part, the move constructor:</p>&#xA;&#xA;<pre><code>    unique_ptr(unique_ptr&amp;&amp; source)   // note the rvalue reference&#xA;    {&#xA;        ptr = source.ptr;&#xA;        source.ptr = nullptr;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>This move constructor does exactly what the <code>auto_ptr</code> copy constructor did, but it can only be supplied with rvalues:</p>&#xA;&#xA;<pre><code>unique_ptr&lt;Shape&gt; a(new Triangle);&#xA;unique_ptr&lt;Shape&gt; b(a);                 // error&#xA;unique_ptr&lt;Shape&gt; c(make_triangle());   // okay&#xA;</code></pre>&#xA;&#xA;<p>The second line fails to compile, because <code>a</code> is an lvalue, but the parameter <code>unique_ptr&amp;&amp; source</code> can only be bound to rvalues. This is exactly what we wanted; dangerous moves should never be implicit. The third line compiles just fine, because <code>make_triangle()</code> is an rvalue. The move constructor will transfer ownership from the temporary to <code>c</code>. Again, this is exactly what we wanted.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The move constructor transfers ownership of a managed resource into the current object.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Move assignment operators</h2>&#xA;&#xA;<p>The last missing piece is the move assignment operator. Its job is to release the old resource and acquire the new resource from its argument:</p>&#xA;&#xA;<pre><code>    unique_ptr&amp; operator=(unique_ptr&amp;&amp; source)   // note the rvalue reference&#xA;    {&#xA;        if (this != &amp;source)    // beware of self-assignment&#xA;        {&#xA;            delete ptr;         // release the old resource&#xA;&#xA;            ptr = source.ptr;   // acquire the new resource&#xA;            source.ptr = nullptr;&#xA;        }&#xA;        return *this;&#xA;    }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Note how this implementation of the move assignment operator duplicates logic of both the destructor and the move constructor. Are you familiar with the copy-and-swap idiom? It can also be applied to move semantics as the move-and-swap idiom:</p>&#xA;&#xA;<pre><code>    unique_ptr&amp; operator=(unique_ptr source)   // note the missing reference&#xA;    {&#xA;        std::swap(ptr, source.ptr);&#xA;        return *this;&#xA;    }&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Now that <code>source</code> is a variable of type <code>unique_ptr</code>, it will be initialized by the move constructor; that is, the argument will be moved into the parameter. The argument is still required to be an rvalue, because the move constructor itself has an rvalue reference parameter. When control flow reaches the closing brace of <code>operator=</code>, <code>source</code> goes out of scope, releasing the old resource automatically.</p>&#xA;&#xA;<blockquote>&#xA;  <p>The move assignment operator transfers ownership of a managed resource into the current object, releasing the old resource.&#xA;  The move-and-swap idiom simplifies the implementation.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Moving from lvalues</h2>&#xA;&#xA;<p>Sometimes, we want to move from lvalues. That is, sometimes we want the compiler to treat an lvalue as if it were an rvalue, so it can invoke the move constructor, even though it could be potentially unsafe.&#xA;For this purpose, C++11 offers a standard library function template called <code>std::move</code> inside the header <code>&lt;utility&gt;</code>.&#xA;This name is a bit unfortunate, because <code>std::move</code> simply casts an lvalue to an rvalue; it does <em>not</em> move anything by itself. It merely <em>enables</em> moving. Maybe it should have been named <code>std::cast_to_rvalue</code> or <code>std::enable_move</code>, but we are stuck with the name by now.</p>&#xA;&#xA;<p>Here is how you explicitly move from an lvalue:</p>&#xA;&#xA;<pre><code>unique_ptr&lt;Shape&gt; a(new Triangle);&#xA;unique_ptr&lt;Shape&gt; b(a);              // still an error&#xA;unique_ptr&lt;Shape&gt; c(std::move(a));   // okay&#xA;</code></pre>&#xA;&#xA;<p>Note that after the third line, <code>a</code> no longer owns a triangle. That's okay, because by <em>explicitly</em> writing <code>std::move(a)</code>, we made our intentions clear: "Dear constructor, do whatever you want with <code>a</code> in order to initialize <code>c</code>; I don't care about <code>a</code> anymore. Feel free to have your way with <code>a</code>."</p>&#xA;&#xA;<blockquote>&#xA;  <p><code>std::move(some_lvalue)</code> casts an lvalue to an rvalue, thus enabling a subsequent move.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Xvalues</h2>&#xA;&#xA;<p>Note that even though <code>std::move(a)</code> is an rvalue, its evaluation does <em>not</em> create a temporary object. This conundrum forced the committee to introduce a third value category. Something that can be bound to an rvalue reference, even though it is not an rvalue in the traditional sense, is called an <em>xvalue</em> (eXpiring value). The traditional rvalues were renamed to <em>prvalues</em> (Pure rvalues).</p>&#xA;&#xA;<p>Both prvalues and xvalues are rvalues. Xvalues and lvalues are both <em>glvalues</em> (Generalized lvalues). The relationships are easier to grasp with a diagram:</p>&#xA;&#xA;<pre><code>        expressions&#xA;          /     \&#xA;         /       \&#xA;        /         \&#xA;    glvalues   rvalues&#xA;      /  \       /  \&#xA;     /    \     /    \&#xA;    /      \   /      \&#xA;lvalues   xvalues   prvalues&#xA;</code></pre>&#xA;&#xA;<p>Note that only xvalues are really new; the rest is just due to renaming and grouping.</p>&#xA;&#xA;<blockquote>&#xA;  <p>C++98 rvalues are known as prvalues in C++11. Mentally replace all occurrences of "rvalue" in the preceding paragraphs with "prvalue".</p>&#xA;</blockquote>&#xA;&#xA;<h2>Moving out of functions</h2>&#xA;&#xA;<p>So far, we have seen movement into local variables, and into function parameters. But moving is also possible in the opposite direction. If a function returns by value, some object at call site (probably a local variable or a temporary, but could be any kind of object) is initialized with the expression after the <code>return</code> statement as an argument to the move constructor:</p>&#xA;&#xA;<pre><code>unique_ptr&lt;Shape&gt; make_triangle()&#xA;{&#xA;    return unique_ptr&lt;Shape&gt;(new Triangle);&#xA;}          \-----------------------------/&#xA;                  |&#xA;                  | temporary is moved into c&#xA;                  |&#xA;                  v&#xA;unique_ptr&lt;Shape&gt; c(make_triangle());&#xA;</code></pre>&#xA;&#xA;<p>Perhaps surprisingly, automatic objects (local variables that are not declared as <code>static</code>) can also be <em>implicitly</em> moved out of functions:</p>&#xA;&#xA;<pre><code>unique_ptr&lt;Shape&gt; make_square()&#xA;{&#xA;    unique_ptr&lt;Shape&gt; result(new Square);&#xA;    return result;   // note the missing std::move&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>How come the move constructor accepts the lvalue <code>result</code> as an argument? The scope of <code>result</code> is about to end, and it will be destroyed during stack unwinding. Nobody could possibly complain afterwards that <code>result</code> had changed somehow; when control flow is back at the caller, <code>result</code> does not exist anymore! For that reason, C++11 has a special rule that allows returning automatic objects from functions without having to write <code>std::move</code>. In fact, you should <em>never</em> use <code>std::move</code> to move automatic objects out of functions, as this inhibits the "named return value optimization" (NRVO).</p>&#xA;&#xA;<blockquote>&#xA;  <p>Never use <code>std::move</code> to move automatic objects out of functions.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note that in both factory functions, the return type is a value, not an rvalue reference. Rvalue references are still references, and as always, you should never return a reference to an automatic object; the caller would end up with a dangling reference if you tricked the compiler into accepting your code, like this:</p>&#xA;&#xA;<pre><code>unique_ptr&lt;Shape&gt;&amp;&amp; flawed_attempt()   // DO NOT DO THIS!&#xA;{&#xA;    unique_ptr&lt;Shape&gt; very_bad_idea(new Square);&#xA;    return std::move(very_bad_idea);   // WRONG!&#xA;}&#xA;</code></pre>&#xA;&#xA;<blockquote>&#xA;  <p>Never return automatic objects by rvalue reference. Moving is exclusively performed by the move constructor, not by <code>std::move</code>, and not by merely binding an rvalue to an rvalue reference.</p>&#xA;</blockquote>&#xA;&#xA;<h2>Moving into members</h2>&#xA;&#xA;<p>Sooner or later, you are going to write code like this:</p>&#xA;&#xA;<pre><code>class Foo&#xA;{&#xA;    unique_ptr&lt;Shape&gt; member;&#xA;&#xA;public:&#xA;&#xA;    Foo(unique_ptr&lt;Shape&gt;&amp;&amp; parameter)&#xA;    : member(parameter)   // error&#xA;    {}&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>Basically, the compiler will complain that <code>parameter</code> is an lvalue. If you look at its type, you see an rvalue reference, but an rvalue reference simply means "a reference that is bound to an rvalue"; it does <em>not</em> mean that the reference itself is an rvalue! Indeed, <code>parameter</code> is just an ordinary variable with a name. You can use <code>parameter</code> as often as you like inside the body of the constructor, and it always denotes the same object. Implicitly moving from it would be dangerous, hence the language forbids it.</p>&#xA;&#xA;<blockquote>&#xA;  <p>A named rvalue reference is an lvalue, just like any other variable.</p>&#xA;</blockquote>&#xA;&#xA;<p>The solution is to manually enable the move:</p>&#xA;&#xA;<pre><code>class Foo&#xA;{&#xA;    unique_ptr&lt;Shape&gt; member;&#xA;&#xA;public:&#xA;&#xA;    Foo(unique_ptr&lt;Shape&gt;&amp;&amp; parameter)&#xA;    : member(std::move(parameter))   // note the std::move&#xA;    {}&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>You could argue that <code>parameter</code> is not used anymore after the initialization of <code>member</code>. Why is there no special rule to silently insert <code>std::move</code> just as with return values? Probably because it would be too much burden on the compiler implementors. For example, what if the constructor body was in another translation unit? By contrast, the return value rule simply has to check the symbol tables to determine whether or not the identifier after the <code>return</code> keyword denotes an automatic object.</p>&#xA;&#xA;<p>You can also pass <code>parameter</code> by value. For move-only types like <code>unique_ptr</code>, it seems there is no established idiom yet. Personally, I prefer pass by value, as it causes less clutter in the interface.</p>&#xA;&#xA;<h2>Special member functions</h2>&#xA;&#xA;<p>C++98 implicitly declares three special member functions on demand, that is, when they are needed somewhere: the copy constructor, the copy assignment operator and the destructor.</p>&#xA;&#xA;<pre><code>X::X(const X&amp;);              // copy constructor&#xA;X&amp; X::operator=(const X&amp;);   // copy assignment operator&#xA;X::~X();                     // destructor&#xA;</code></pre>&#xA;&#xA;<p>Rvalue references went through several versions. Since version 3.0, C++11 declares two additional special member functions on demand: the move constructor and the move assignment operator. Note that neither VC10 nor VC11 conform to version 3.0 yet, so you will have to implement them yourself.</p>&#xA;&#xA;<pre><code>X::X(X&amp;&amp;);                   // move constructor&#xA;X&amp; X::operator=(X&amp;&amp;);        // move assignment operator&#xA;</code></pre>&#xA;&#xA;<p>These two new special member functions are only implicitly declared if none of the special member functions are declared manually. Also, if you declare your own move constructor or move assignment operator, neither the copy constructor nor the copy assignment operator will be declared implicitly.</p>&#xA;&#xA;<p>What do these rules mean in practice?</p>&#xA;&#xA;<blockquote>&#xA;  <p>If you write a class without unmanaged resources, there is no need to declare any of the five special member functions yourself, and you will get correct copy semantics and move semantics for free. Otherwise, you will have to implement the special member functions yourself. Of course, if your class does not benefit from move semantics, there is no need to implement the special move operations.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note that the copy assignment operator and the move assignment operator can be fused into a single, unified assignment operator, taking its argument by value:</p>&#xA;&#xA;<pre><code>X&amp; X::operator=(X source)    // unified assignment operator&#xA;{&#xA;    swap(source);            // see my first answer for an explanation&#xA;    return *this;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This way, the number of special member functions to implement drops from five to four. There is a tradeoff between exception-safety and efficiency here, but I am not an expert on this issue.</p>&#xA;&#xA;<h2>Forwarding references (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf">previously</a> known as <em>Universal references</em>)</h2>&#xA;&#xA;<p>Consider the following function template:</p>&#xA;&#xA;<pre><code>template&lt;typename T&gt;&#xA;void foo(T&amp;&amp;);&#xA;</code></pre>&#xA;&#xA;<p>You might expect <code>T&amp;&amp;</code> to only bind to rvalues, because at first glance, it looks like an rvalue reference. As it turns out though, <code>T&amp;&amp;</code> also binds to lvalues:</p>&#xA;&#xA;<pre><code>foo(make_triangle());   // T is unique_ptr&lt;Shape&gt;, T&amp;&amp; is unique_ptr&lt;Shape&gt;&amp;&amp;&#xA;unique_ptr&lt;Shape&gt; a(new Triangle);&#xA;foo(a);                 // T is unique_ptr&lt;Shape&gt;&amp;, T&amp;&amp; is unique_ptr&lt;Shape&gt;&amp;&#xA;</code></pre>&#xA;&#xA;<p>If the argument is an rvalue of type <code>X</code>, <code>T</code> is deduced to be <code>X</code>, hence <code>T&amp;&amp;</code> means <code>X&amp;&amp;</code>. This is what anyone would expect.&#xA;But if the argument is an lvalue of type <code>X</code>, due to a special rule, <code>T</code> is deduced to be <code>X&amp;</code>, hence <code>T&amp;&amp;</code> would mean something like <code>X&amp; &amp;&amp;</code>. But since C++ still has no notion of references to references, the type <code>X&amp; &amp;&amp;</code> is <em>collapsed</em> into <code>X&amp;</code>. This may sound confusing and useless at first, but reference collapsing is essential for <em>perfect forwarding</em> (which will not be discussed here).</p>&#xA;&#xA;<blockquote>&#xA;  <p>T&amp;&amp; is not an rvalue reference, but a forwarding reference. It also binds to lvalues, in which case <code>T</code> and <code>T&amp;&amp;</code> are both lvalue references.</p>&#xA;</blockquote>&#xA;&#xA;<p>If you want to constrain a function template to rvalues, you can combine SFINAE with type traits:</p>&#xA;&#xA;<pre><code>#include &lt;type_traits&gt;&#xA;&#xA;template&lt;typename T&gt;&#xA;typename std::enable_if&lt;std::is_rvalue_reference&lt;T&amp;&amp;&gt;::value, void&gt;::type&#xA;foo(T&amp;&amp;);&#xA;</code></pre>&#xA;&#xA;<h2>Implementation of move</h2>&#xA;&#xA;<p>Now that you understand reference collapsing, here is how <code>std::move</code> is implemented:</p>&#xA;&#xA;<pre><code>template&lt;typename T&gt;&#xA;typename std::remove_reference&lt;T&gt;::type&amp;&amp;&#xA;move(T&amp;&amp; t)&#xA;{&#xA;    return static_cast&lt;typename std::remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>As you can see, <code>move</code> accepts any kind of parameter thanks to the forwarding reference <code>T&amp;&amp;</code>, and it returns an rvalue reference. The <code>std::remove_reference&lt;T&gt;::type</code> meta-function call is necessary because otherwise, for lvalues of type <code>X</code>, the return type would be <code>X&amp; &amp;&amp;</code>, which would collapse into <code>X&amp;</code>. Since <code>t</code> is always an lvalue (remember that a named rvalue reference is an lvalue), but we want to bind <code>t</code> to an rvalue reference, we have to explicitly cast <code>t</code> to the correct return type.&#xA;The call of a function that returns an rvalue reference is itself an xvalue. Now you know where xvalues come from ;)</p>&#xA;&#xA;<blockquote>&#xA;  <p>The call of a function that returns an rvalue reference, such as <code>std::move</code>, is an xvalue.</p>&#xA;</blockquote>&#xA;&#xA;<p>Note that returning by rvalue reference is fine in this example, because <code>t</code> does not denote an automatic object, but instead an object that was passed in by the caller.</p>&#xA;
   102667 |    1 | <p>My favorite uses are "filter" and "reduce" operations.</p>&#xA;&#xA;<p>Let's say we're reading a file, and only want the lines which begin with "##".</p>&#xA;&#xA;<pre><code>def filter2sharps( aSequence ):&#xA;    for l in aSequence:&#xA;        if l.startswith("##"):&#xA;            yield l&#xA;</code></pre>&#xA;&#xA;<p>We can then use the generator function in a proper loop</p>&#xA;&#xA;<pre><code>source= file( ... )&#xA;for line in filter2sharps( source.readlines() ):&#xA;    print line&#xA;source.close()&#xA;</code></pre>&#xA;&#xA;<p>The reduce example is similar.  Let's say we have a file where we need to locate blocks of <code>&lt;Location&gt;...&lt;/Location&gt;</code> lines.  [Not HTML tags, but lines that happen to look tag-like.]</p>&#xA;&#xA;<pre><code>def reduceLocation( aSequence ):&#xA;    keep= False&#xA;    block= None&#xA;    for line in aSequence:&#xA;        if line.startswith("&lt;/Location"):&#xA;            block.append( line )&#xA;            yield block&#xA;            block= None&#xA;            keep= False&#xA;        elif line.startsWith("&lt;Location"):&#xA;            block= [ line ]&#xA;            keep= True&#xA;        elif keep:&#xA;            block.append( line )&#xA;        else:&#xA;            pass&#xA;    if block is not None:&#xA;        yield block # A partial block, icky&#xA;</code></pre>&#xA;&#xA;<p>Again, we can use this generator in a proper for loop.</p>&#xA;&#xA;<pre><code>source = file( ... )&#xA;for b in reduceLocation( source.readlines() ):&#xA;    print b&#xA;source.close()&#xA;</code></pre>&#xA;&#xA;<p>The idea is that a generator function allows us to filter or reduce a sequence, producing a another sequence one value at a time.</p>&#xA;
   148610 |    1 | <p>There is definitely a way to do this -- use <a href="http://www.ddj.com/cpp/184401387">X() macros</a>. These macros use the C preprocessor to construct enums, arrays and code blocks from a list of source data. You only need to add new items to the #define containing the X() macro. The switch statement would expand automatically.</p>&#xA;&#xA;<p>Your example can be written as follows:</p>&#xA;&#xA;<pre><code> // Source data -- Enum, String&#xA; #define X_NUMBERS \&#xA;    X(ONE,   "one") \&#xA;    X(TWO,   "two") \&#xA;    X(THREE, "three")&#xA;&#xA; ...&#xA;&#xA; // Use preprocessor to create the Enum&#xA; typedef enum {&#xA;  #define X(Enum, String)       Enum,&#xA;   X_NUMBERS&#xA;  #undef X&#xA; } Numbers;&#xA;&#xA; ...&#xA;&#xA; // Use Preprocessor to expand data into switch statement cases&#xA; switch(num)&#xA; {&#xA; #define X(Enum, String) \&#xA;     case Enum:  strcpy(num_str, String); break;&#xA; X_NUMBERS&#xA; #undef X&#xA;&#xA;     default: return 0; break;&#xA; }&#xA; return 1;&#xA;</code></pre>&#xA;&#xA;<p>There are more efficient ways (i.e. using X Macros to create an string array and enum index), but this is the simplest demo.</p>&#xA;
  7401218 |    1 | <p>I just checked this for another question: <a href="http://stackoverflow.com/questions/242841/javascript-foreach-vs-for/6442930#6442930">JavaScript foreach Vs for</a>.</p>&#xA;&#xA;<p>On kangax's <a href="http://kangax.github.com/es5-compat-table/">ECMAScript 5 compatibility table</a>, Array.forEach gets a 'yes' for all browsers except IE8. </p>&#xA;&#xA;<p>As of September 2011, IE browser share on desktop devices is <a href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#Summary_table">less than 40%</a>, and <a href="http://marketshare.hitslink.com/browser-market-share.aspx?qprid=2&amp;qpcustomd=0">at least 8% of browsers are IE 9</a>. </p>&#xA;&#xA;<p>In other words, Array.forEach is now supported by around 70% of desktop browsers. Obviously, this figure varies considerably, depending on territory and other factors -- some regions or countries (such as Brasil) have a higher proportion of Chrome users, for example, and some (such as China) have far more users on IE6 and IE8.</p>&#xA;&#xA;<p>I haven't checked, but mobile support (on WebKit and Opera browsers) may be even higher.</p>&#xA;
  3570402 |    1 | <p>The main reason generic type inference can't work on constructors like you wish is because the class "MyType" doesn't even exist when all you've declared is "MyType&lt;T&gt;".  Remember it is legal to have both:</p>&#xA;&#xA;<pre><code>public class MyType&lt;T&gt; {&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>and</strong></p>&#xA;&#xA;<pre><code>public class MyType {&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Both would be legal.  How would you disambiguate your syntax if you did in fact declare both, and both of them declared a conflicting constructor.</p>&#xA;
    36832 |    1 | <p>In C++ when a virtual function is called from within a constructor it doesn't behave like a virtual function. I think everyone who encountered for the first time was surprised but on second thought it makes sense, if the derived constructor hasn't yet run the object is <strong>not</strong> yet a <em>derived</em> so how can a derived function be called? The preconditions haven't had the chance to be set up. Example:</p>&#xA;&#xA;<pre><code>class base {&#xA;public:&#xA;    base()&#xA;    {&#xA;        std::cout &lt;&lt; "foo is " &lt;&lt; foo() &lt;&lt; std::endl;&#xA;    }&#xA;    virtual int foo() { return 42; }&#xA;};&#xA;&#xA;class derived : public foo {&#xA;    int* ptr_;&#xA;public:&#xA;    derived(int i) : ptr_(new int(i*i)) { }&#xA;    // The following cannot be called before derived::derived due to how C++ behaves, &#xA;    // if it was possible... Kaboom!&#xA;    virtual int foo()   { return *ptr_; } &#xA;};&#xA;</code></pre>&#xA;&#xA;<p>It's exactly the same for Java and .NET yet they chose to go the other way, was the only reason <em>the principal of least surprise</em>? </p>&#xA;&#xA;<p>Which do you think is the correct choice?</p>&#xA;
   169296 |    1 | <p><a href="http://www.rauchy.net/regionerate/" rel="nofollow">http://www.rauchy.net/regionerate/</a> - Automatically regionised your code ;)</p>&#xA;&#xA;<p>I'm a fan of regions for grouping sections of large classes, say all the properties together, all constances, etc. I'm someone who's constantly collapsing code I don't need to see at that time so I love regions for that.</p>&#xA;&#xA;<p>Also I find regions really useful when implementing interfaces, particularly multiple interfaces. I can group each interfaces methods, properties, events, etc so it's easier at a glance to see what method belongs to what interface.</p>&#xA;
   628785 |    1 | <h1>Ctrl-2 something</h1>&#xA;&#xA;<p>Seems that nobody mentioned Ctrl-2 L (assign to new local variable) and Ctrl-2 F (assign to a new field), these ones have changed how I write code.</p>&#xA;&#xA;<p>Previously, I was typing, say (| is cursor location):</p>&#xA;&#xA;<pre><code>Display display = new |&#xA;</code></pre>&#xA;&#xA;<p>and then I pushed Ctrl-Space to complete the constructor call. Now I type:</p>&#xA;&#xA;<pre><code>new Display()|&#xA;</code></pre>&#xA;&#xA;<p>and press Ctrl-2 L, which results in:</p>&#xA;&#xA;<pre><code>Display display = new Display()|&#xA;</code></pre>&#xA;&#xA;<p>This really speeds things up. (Ctrl-2 F does the same, but assigns to a new field rather than a new variable.)</p>&#xA;&#xA;<p>Another good shortcut is Ctrl-2 R: rename in file. It is much faster than rename refactoring (Alt-Shift-R) when renaming things like local variables.</p>&#xA;&#xA;<p>Actually I went to Keys customization preference page and assigned all sorts of additional quick fixes to Ctrl-2-something. For example I now press Ctrl-2 J to split/join variable declaration, Ctrl-2 C to extract an inner class into top-level, Ctrl-2 T to add throws declaration to the function, etc. There are tons of assignable quick fixes, go pick your favourite ones and assign them to Ctrl-2 shortcuts.</p>&#xA;&#xA;<h1>Templates</h1>&#xA;&#xA;<p>Another favourite of mine in my ΓÇ£npeΓÇ¥ template, defined as:</p>&#xA;&#xA;<pre><code>if (${arg:localVar} == null)&#xA;    throw new ${exception:link(NullPointerException,IllegalArgumentException)}("${arg:localVar} is null");&#xA;</code></pre>&#xA;&#xA;<p>This allows me to quickly add null argument checks at the start of every function (especially ones that merely save the argument into a field or add it into a collection, especially constructors), which is great for detecting bugs early.</p>&#xA;&#xA;<p>See more useful templates at <a href="http://www.tarantsov.com/eclipse/templates/" rel="nofollow">www.tarantsov.com/eclipse/templates/</a>. I won't list them all here because there are many, and because I often add new ones.</p>&#xA;&#xA;<h1>Completion</h1>&#xA;&#xA;<p>A few code completion tricks:</p>&#xA;&#xA;<ul>&#xA;<li>camel case support mentioned in another answer: type cTM, get currentTimeMillis</li>&#xA;<li>default constructor: in the class declaration with no default constructor push Ctrl-Space, the first choice will be to create one</li>&#xA;<li>overloading: in the class declaration start typing name of a method you can overload, Ctrl-Space, pick one</li>&#xA;<li>getter/setter creation: type ΓÇ£getΓÇ¥, Ctrl-Space, choose a getter to create; same with ΓÇ£isΓÇ¥ and ΓÇ£setΓÇ¥</li>&#xA;</ul>&#xA;&#xA;<h1>Assign To A New Field</h1>&#xA;&#xA;<p>This is how I add fields.</p>&#xA;&#xA;<ol>&#xA;<li><p>If you have no constructors yet, add one. (Ctrl-Space anywhere in a class declaration, pick the first proposal.)</p></li>&#xA;<li><p>Add an argument (| is cursor position):</p>&#xA;&#xA;<pre><code>public class MyClass {&#xA;    public MyClass(int something|) {&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Press Ctrl-1, choose ΓÇ£assign to a new fieldΓÇ¥. You get:</p>&#xA;&#xA;<pre><code>public class MyClass {&#xA;    private final Object something;&#xA;    public MyClass(Object something) {&#xA;        this.something = something;&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Add a null-pointer check if appropriate (see ΓÇ£npeΓÇ¥ template above):</p>&#xA;&#xA;<pre><code>public class MyClass {&#xA;    private final Object something;&#xA;    public MyClass(Object something) {&#xA;        npe|&#xA;        this.something = something;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Hit Ctrl-Space, get:</p>&#xA;&#xA;<pre><code>public class MyClass {&#xA;    private final Object something;&#xA;    public MyClass(Object something) {&#xA;        if (something == null)&#xA;            throw new NullPointerException("something is null");&#xA;        this.something = something;&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>A great time saver!</p>&#xA;
 11483647 |    1 | <p>I know that we can access private constructor via Reflection as <a href="http://stackoverflow.com/users/193906/sanjay-t-sharma">@Sanjay T. Sharma</a> mentioned in his answer of my question: <a href="http://stackoverflow.com/questions/6636734/does-instanceof-void-always-return-false">Does ΓÇ£instanceof VoidΓÇ¥ always return false?</a></p>&#xA;&#xA;<p>However, <a href="http://stackoverflow.com/users/37213/duffymo">@duffymo</a> <a href="http://stackoverflow.com/questions/11480181/unit-testing-a-class-with-private-environment-variables/11480226#comment15160872_11480226">said</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>you can access private everything with reflection - methods, ctors, data members, everything.</p>&#xA;</blockquote>&#xA;&#xA;<ol>&#xA;<li>How can I access the private methods and the private data members?</li>&#xA;<li>Is it possible to access local variable via Reflection?</li>&#xA;<li>Is there any way to prevent anyone from accessing private constructors, methods, and data members?</li>&#xA;</ol>&#xA;
  1913371 |    1 | <p>Apart from resulting in undefined behavior, the most straightforward cause of leaks lies in the implementation not calling the destructor for all but the first object in the array.  This will obviously result in leaks if the objects have allocated resources.</p>&#xA;&#xA;<p>This is the simplest possible class I could think of resulting in this behaviour:</p>&#xA;&#xA;<pre><code> struct A { &#xA;       char* ch;&#xA;       A(): ch( new char ){}&#xA;       ~A(){ delete ch; }&#xA;    };&#xA;&#xA;A* as = new A[10]; // ten times the A::ch pointer is allocated&#xA;&#xA;delete as; // only one of the A::ch pointers is freed.&#xA;</code></pre>&#xA;&#xA;<p>PS: note that constructors fail to get called in lots of other programming mistakes, too: non-virtual base class destructors, false reliance on smart pointers, ...</p>&#xA;
  1813267 |    1 | <p>Let me add this counsel:</p>&#xA;&#xA;<p><strong><em>If in doubt, read the <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">specification</a>!</em></strong> </p>&#xA;&#xA;<p>ECMA-262 is the specification for a scripting language of which JavaScript is a dialect. Of course in practice it matters more how the most important browsers behave than an esoteric definition how something is supposed to be handled. But it is helpful to understand why <strong>new String("a") !== "a"</strong>.</p>&#xA;&#xA;<p>Please let me explain how to read the specification to clarify this question. I see that in this very old topic nobody had an answer for the very strange effect. So, if you can read a specification, this will help you in your profession tremendously. It is an acquired skill. So, let's continue.</p>&#xA;&#xA;<p>Searching the PDF file for === brings me to page 56 of the specification: <strong>11.9.4. The Strict Equals Operator ( === )</strong>, and after wading through the specificationalese I find:</p>&#xA;&#xA;<blockquote>&#xA;  <p><strong>11.9.6 The Strict Equality Comparison Algorithm</strong><br>&#xA;  The comparison x === y, where x and y are values, produces <strong>true</strong> or <strong>false</strong>. Such a comparison is performed as follows:<br>&#xA;  &nbsp;&nbsp;1. If Type(x) is different from Type(y), return <strong>false</strong>.<br>&#xA;  &nbsp;&nbsp;2. If Type(x) is Undefined, return <strong>true</strong>.<br>&#xA;  &nbsp;&nbsp;3. If Type(x) is Null, return <strong>true</strong>.<br>&#xA;  &nbsp;&nbsp;4. If Type(x) is not Number, go to step 11.<br>&#xA;  &nbsp;&nbsp;5. If x is <strong>NaN</strong>, return <strong>false</strong>.<br>&#xA;  &nbsp;&nbsp;6. If y is <strong>NaN</strong>, return <strong>false</strong>.<br>&#xA;  &nbsp;&nbsp;7. If x is the same number value as y, return <strong>true</strong>.<br>&#xA;  &nbsp;&nbsp;8. If x is +0 and y is ΓêÆ0, return <strong>true</strong>.<br>&#xA;  &nbsp;&nbsp;9. If x is ΓêÆ0 and y is +0, return <strong>true</strong>.<br>&#xA;  &nbsp;&nbsp;10. Return <strong>false</strong>.<br>&#xA;  &nbsp;&nbsp;11. If Type(x) is String, then return <strong>true</strong> if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return <strong>false</strong>.<br>&#xA;  &nbsp;&nbsp;12. If Type(x) is Boolean, return <strong>true</strong> if x and y are both <strong>true</strong> or both <strong>false</strong>; otherwise, return <strong>false</strong>.&#xA;  &nbsp;&nbsp;13. Return <strong>true</strong> if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return <strong>false</strong>.</p>&#xA;</blockquote>&#xA;&#xA;<p>Interesting ist step 11. Yes, strings are treated as value types. But this does not explain why <strong>new String("a") !== "a"</strong>. Do we have a browser not conforming to ECMA-262?</p>&#xA;&#xA;<p>Not so fast!</p>&#xA;&#xA;<p>Let's check the types of the operands. Try it out for yourself by wrapping them in <strong>typeof()</strong>. I find that <strong>new String("a")</strong> is an object, and step 1 is used: return <strong>false</strong> if the types are different.</p>&#xA;&#xA;<p>If you wonder why <strong>new String("a")</strong> does not return a string, how about some exercise reading a specification? Have fun!</p>&#xA;&#xA;<hr>&#xA;&#xA;<p>Aidiakapi wrote this in a comment below:</p>&#xA;&#xA;<blockquote>&#xA;  <p>From the specification </p>&#xA;  &#xA;  <p><strong>11.2.2 The new Operator</strong>:</p>&#xA;  &#xA;  <p>If Type(constructor) is not Object, throw a TypeError exception.</p>&#xA;  &#xA;  <p>With other words, if String wouldn't be of type Object it couldn't be used with the new operator. </p>&#xA;</blockquote>&#xA;&#xA;<p><strong>new</strong> always returns an Object, even for <strong>String</strong> constructors, too. And alas! The value semantics for strings (see step 11) is lost.</p>&#xA;&#xA;<p>And this finally means: <strong>new String("a") !== "a"</strong>.</p>&#xA;
     5338 |    1 | <p>Business reason for CSS layout: You can blow away the customers by saying "our portal is totally customizable/skinnable without writing code!"</p>&#xD;&#xA;&#xD;&#xA;<p>Then again, I don't see any evil in designing block elements with tables. By block elements I mean where it doesn't make any sense to break apart the said element in different designs. </p>&#xD;&#xA;&#xD;&#xA;<p>So, tabular data would best be presented with tables, of course. Designing major building blocks (such as a menu bar, news ticker, etc.) within their own tables should be OK as well. Just don't rely on tables for the overall page layout and you'll be fine, methinks.</p>
 14321045 |    1 | <p>hmm strange not to see this answer already within the answers. Here is the one I've build.&#xA;It is not a bulletproof version but it is 'simple' and checks almost everything.</p>&#xA;&#xA;<pre><code>[\w+-]+(?:\.[\w+-]+)*@[\w+-]+(?:\.[\w+-]+)*(?:\.[a-zA-Z]{2,4})&#xA;</code></pre>&#xA;&#xA;<p>I think an explanation is in place so you can modify it if you want:</p>&#xA;&#xA;<p>(<strong>e</strong>)  <code>[\w+-]+</code> matches a-z, A-Z, _, +, - at least one time </p>&#xA;&#xA;<p>(<strong>m</strong>)  <code>(?:\.[\w+-]+)*</code> matches a-z, A-Z, _, +, - zero or more times but need to start with a . (dot) </p>&#xA;&#xA;<p><code>@</code> = <code>@</code></p>&#xA;&#xA;<p>(<strong>i</strong>)  <code>[\w+-]+</code> matches a-z, A-Z, _, +, - at least one time </p>&#xA;&#xA;<p>(<strong>l</strong>)  <code>(?:\.[\w+-]+)*</code> matches a-z, A-Z, _, +, - zero or more times but need to start with a . (dot) </p>&#xA;&#xA;<p>(<strong>com</strong>)  <code>(?:\.[a-zA-Z]{2,4})</code> matches a-z, A-Z for 2 to 4 times starting with a . (dot)</p>&#xA;&#xA;<p>giving <code>e(.m)@i(.l).com</code> where <code>(.m)</code> and <code>(.l)</code> are optional but also can be repeated multiple times.&#xA;I think this validates all valid email addresses but blocks potential invalid without using an over complex regular expression which won't be necessary in most cases.</p>&#xA;&#xA;<p>notice this will allow <code>+@-.com</code> but that is the compromise for keeping it simple.</p>&#xA;
   328403 |    1 | <p>You've tagged the question regex, but this may not be the best tool for the job. </p>&#xA;&#xA;<p>You might be better using basic compiler building techniques (i.e. a lexer feeding a simple state machine parser).</p>&#xA;&#xA;<p>Your lexer would identify five tokens: ("[code]", '\n', "[/code]", EOF, :all other strings:) and your state machine looks like:</p>&#xA;&#xA;<pre>&#xA;state    token    action&#xA;------------------------&#xA;begin    :none:   --> out&#xA;out      [code]   OUTPUT(token), --> in&#xA;out      \n       OUTPUT(break), OUTPUT(token)&#xA;out      *        OUTPUT(token)&#xA;in       [/code]  OUTPUT(token), --> out&#xA;in       *        OUTPUT(token)&#xA;*        EOF      --> end&#xA;</pre>&#xA;&#xA;<p>EDIT: I see other poster discussing the possible need for nesting the blocks. This state machine won't handle that. For nesting blocks, use a recursive decent parser (not quite so simple but still easy enough and extensible).</p>&#xA;&#xA;<p>EDIT: Axeman notes that this design excludes the use of "[/code]" in the code. An escape mechanism can be used to beat this. Something like add '\' to your tokens and add: </p>&#xA;&#xA;<pre>&#xA;state    token    action&#xA;------------------------&#xA;in       \        -->esc-in&#xA;esc-in   *        OUTPUT(token), -->in&#xA;out      \        -->esc-out&#xA;esc-out  *        OUTPUT(token), -->out&#xA;</pre>&#xA;&#xA;<p>to the state machine.</p>&#xA;&#xA;<p>The usual arguments in favor of machine generated lexers and parsers apply.</p>&#xA;
 11484158 |    1 | <p>1) <strong><em>How can I access the private methods and the private data members?</em></strong></p>&#xA;&#xA;<p>You can do it with little help of <code>setAccessible(true)</code> method</p>&#xA;&#xA;<pre><code>class Dummy{&#xA;    private void foo(){&#xA;        System.out.println("hello foo()");&#xA;    }&#xA;    private int i=10;&#xA;}&#xA;class Test{&#xA;    public static void main(String[] args) throws Exception {&#xA;        Dummy d=new Dummy();&#xA;&#xA;        /*---  [INVOKING PRIVATE METHOD]  ---*/&#xA;        Method m=Dummy.class.getDeclaredMethod("foo");&#xA;        //m.invoke(d);//exception java.lang.IllegalAccessException&#xA;        m.setAccessible(true);//Abracadabra &#xA;        m.invoke(d);//now its ok&#xA;&#xA;        /*---  [GETING VALUE FROM PRIVATE FIELD]  ---*/&#xA;        Field f=Dummy.class.getDeclaredField("i");&#xA;        //System.out.println(f.get(d));//not accessible now&#xA;        f.setAccessible(true);//Abracadabra &#xA;        System.out.println(f.get(d));//now its ok&#xA;&#xA;        /*---  [SETTING VALUE OF PRIVATE FIELD]  ---*/&#xA;        Field f2=Dummy.class.getDeclaredField("i");&#xA;        //f2.set(d,20);//not accessible now&#xA;        f2.setAccessible(true);//Abracadabra &#xA;        f2.set(d,20);//now its ok&#xA;        System.out.println(f2.get(d));&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>2) <strong><em>Is it possible to access local variable via Reflection?</em></strong></p>&#xA;&#xA;<p>No. Local variables cannot be accessed outside block in which they ware created, unless you put that variables outside by yourself (for example you will store them in some field)</p>&#xA;&#xA;<p>3) <strong><em>Is there any way to prevent anyone from accessing private constructors, methods, and data members?</em></strong></p>&#xA;&#xA;<p>I think for <code>constructors</code> or <code>methods</code> you could use stacktrace to check if it was invoked by <code>Reflection</code>.&#xA;<br/>For fields I cant find solution to prevent accessing them via Reflection. </p>&#xA;&#xA;<h2>[WARNING: this is not approved by anyone, just wrote it inspired by your question.]</h2>&#xA;&#xA;<pre><code>class Dummy {&#xA;    private void safeMethod() {&#xA;        try {&#xA;            throw new Exception();&#xA;            // if method was invoked by reflection stack trace would be simmilar&#xA;            // to something like this:&#xA;        /*&#xA;        java.lang.Exception&#xA;            at package1.b.Dummy.safeMethod(SomeClass.java:38)&#xA;            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#xA;            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;        -&gt;  at java.lang.reflect.Method.invoke(Method.java:601)&#xA;            at package1.b.Test.main(SomeClass.java:65)&#xA;        */&#xA;        //5th line marked by "-&gt;" is inerresting so I will try to use that info&#xA;&#xA;        } catch (Exception e) {&#xA;            StackTraceElement[] st = e.getStackTrace();&#xA;            if (st.length &gt; 5&#xA;                &amp;&amp; st[4].getClassName().equals("java.lang.reflect.Method"))&#xA;                throw new RuntimeException(&#xA;                        "method safeMethod() is accessible only by Dummy object");&#xA;        }&#xA;&#xA;        // now normal code of method&#xA;        System.out.println("code of safe method");&#xA;    }&#xA;&#xA;    //I will check if it is possible to normally use that method inside this class&#xA;    public void trySafeMethod(){&#xA;        safeMethod();&#xA;    }&#xA;&#xA;    Dummy() {&#xA;        safeMethod();&#xA;    }&#xA;}&#xA;&#xA;class Dummy1 extends Dummy {}&#xA;&#xA;class Test {&#xA;    public static void main(String[] args) throws Exception {&#xA;        Dummy1 d1 = new Dummy1();//safeMethod can be invoked inside superclass constructor&#xA;        d1.trySafeMethod();//safeMethod can be invoked inside other Dummy class methods &#xA;        System.out.println("-------------------");&#xA;&#xA;        //Lets check if it is possible to invoke it via reflection&#xA;        Method m2 = Dummy.class.getDeclaredMethod("safeMethod");&#xA;        // m.invoke(d);//exception java.lang.IllegalAccessException&#xA;        m2.setAccessible(true);&#xA;        m2.invoke(d1);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Output from <code>Test</code> main method</strong> : </p>&#xA;&#xA;<pre><code>code of safe method&#xA;code of safe method&#xA;-------------------&#xA;Exception in thread "main" java.lang.reflect.InvocationTargetException&#xA;    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xA;    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#xA;    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#xA;    at java.lang.reflect.Method.invoke(Method.java:601)&#xA;    at package1.b.Test.main(MyClass2.java:87)&#xA;Caused by: java.lang.RuntimeException: method safeMethod() is accessible only by Dummy object&#xA;    at package1.b.Dummy.safeMethod(MyClass2.java:54)&#xA;    ... 5 more&#xA;</code></pre>&#xA;
   408937 |    1 | <p>There aren't any built in, but you can supply your own.</p>&#xA;&#xA;<p>For this specific scenario, you might want to encapsulate the logic in (for example) a wrapper (lock) class, so that you don't have <code>#if</code> scattered through all the code; of course, if you are only doing a little locking it might not be worth the trouble.</p>&#xA;&#xA;<p>I use different configurations and/or projects to build for a variety of platforms - i.e. <a href="http://code.google.com/p/protobuf-net/">protobuf-net</a> builds for .NET 2.0, .NET 3.0, mono, CF 2.0, CF 3.5 using this trick. The code has <code>#if</code> blocks based on different symbols to control logic - so, for example, <code>BinaryFormatter</code> isn't available on CF, <code>WCF</code> is only available with .NET 3.0, <code>Delegate.CreateDelegate</code> isn't on CF 2.0, etc.</p>&#xA;
  1406295 |    1 | <p>Excellent question. You do not need to worry about this; the compiler takes care of it for you. Basically, what we do is we put the cleanup code for the finally blocks into a special cleanup method on the generated iterator. When control leaves the caller's foreach block, the compiler generates code which calls the cleanup code on the iterator.</p>&#xA;&#xA;<p>A simplified example:</p>&#xA;&#xA;<pre><code>static IEnumerable&lt;int&gt; GetInts()&#xA;{&#xA;    try { yield return 1; yield return 2;} &#xA;    finally { Cleanup(); }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Your question is basically "Is Cleanup() called in this scenario?"</p>&#xA;&#xA;<pre><code>foreach(int i in GetInts()) { break; }&#xA;</code></pre>&#xA;&#xA;<p>Yes. The iterator block is generated as a class with a Dispose method that calls Cleanup, and then the foreach loop is generated as something similar to:</p>&#xA;&#xA;<pre><code>{&#xA;  IEnumerator&lt;int&gt; enumtor = GetInts().GetEnumerator();&#xA;  try&#xA;  {&#xA;    while(enumtor.MoveNext())&#xA;    {&#xA;      i = enumtor.Current;&#xA;      break;&#xA;    }&#xA;  }&#xA;  finally&#xA;  {&#xA;    enumtor.Dispose();&#xA;  }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So when the break happens, the finally takes over and the disposer is called.</p>&#xA;&#xA;<p>See my recent series of articles if you want more information about some of the weird corner cases we considered in the design of this feature.</p>&#xA;&#xA;<p><a href="http://blogs.msdn.com/ericlippert/archive/tags/Iterators/default.aspx">http://blogs.msdn.com/ericlippert/archive/tags/Iterators/default.aspx</a></p>&#xA;
  6791200 |    1 | <p>The <code>onbeforeunload</code> event is (supposed to be) used for cleanup only, and debatably...prompting to save work.  It's <em>definitely</em> not for you to force the browser to redirect to another page of your choosing, chrome <strong><em>actively</em></strong> blocks this behavior, for good reason.</p>&#xA;&#xA;<p>An an aside: <a href="https://developer.mozilla.org/en/DOM/window.onbeforeunload#Specification" rel="nofollow">the event isn't specified</a>, that is to say it <em>can</em> behave however it likes...and Chrome is choosing to protect the user here.</p>&#xA;
  6494443 |    1 | <p>I wrote the following code, which takes a bunch of points and draws them on the screen using the gloss library. </p>&#xA;&#xA;<pre><code>let s = blocks pes&#xA;    pts = map (map mkPt) s  {- stitches to points-}&#xA;    lines = map Line pts    {-points to lines -}&#xA;    pict = Pictures lines   {- lines to a picture -}&#xA;  in do  displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>It works fine, but it occurs to me that there's a repeated pattern: a chain of function calls, the result of each one feeding into the last argument of the next.&#xA;So I refactored by removing the intermediate variables, reversing the order and chaining the functions with function composition (".") like so:</p>&#xA;&#xA;<pre><code>let pict = Pictures . (map Line) . (map $ map $ mkPt) . blocks $ pes&#xA;                in do  displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>Happily, this works just fine too. But I'm wondering if I'm straining readability, or if I'm just not used to reading &amp; writing point free style code. Also, how do I reason about this code? Is the second version more efficient, or just terser?  Is there anything I can do stylistically to make it clearer?</p>&#xA;
 11211519 |    1 | <p>Using <code>memcpy</code> to copy between overlapping memory regions.  For example:</p>&#xA;&#xA;<pre><code>char a[256] = {};&#xA;memcpy(a, a, sizeof(a));&#xA;</code></pre>&#xA;&#xA;<p>The behavior is undefined according to the C Standard, which is subsumed by the C++03 Standard.</p>&#xA;&#xA;<h2>7.21.2.1 The memcpy function</h2>&#xA;&#xA;<blockquote>&#xA;  <p>Synopsis </p>&#xA;  &#xA;  <p>1/ #include  void *memcpy(void * restrict s1, const&#xA;  void * restrict s2, size_t n); </p>&#xA;  &#xA;  <p>Description </p>&#xA;  &#xA;  <p>2/ The memcpy function&#xA;  copies n characters from the object pointed to by s2 into the object&#xA;  pointed to by s1. If copying takes place between objects that overlap,&#xA;  the behavior is undefined. Returns 3 The memcpy function returns the&#xA;  value of s1.</p>&#xA;</blockquote>&#xA;&#xA;<h2>7.21.2.2 The memmove function</h2>&#xA;&#xA;<blockquote>&#xA;  <p>Synopsis</p>&#xA;  &#xA;  <p>1 #include  void *memmove(void *s1, const void *s2, size_t&#xA;  n);</p>&#xA;  &#xA;  <p>Description</p>&#xA;  &#xA;  <p>2 The memmove function copies n characters from the object pointed to&#xA;  by s2 into the object pointed to by s1. Copying takes place as if the&#xA;  n characters from the object pointed to by s2 are first copied into a&#xA;  temporary array of n characters that does not overlap the objects&#xA;  pointed to by s1 and s2, and then the n characters from the temporary&#xA;  array are copied into the object pointed to by s1. Returns</p>&#xA;  &#xA;  <p>3 The memmove function returns the value of s1.</p>&#xA;</blockquote>&#xA;
  3570167 |    1 | <p>Why is type inference not supported for constructors the way it is for generic methods? </p>&#xA;&#xA;<pre><code>public class MyType&lt;T&gt;&#xA;{&#xA;   private readonly T field;&#xA;   public MyType(T value) { field = value; }&#xA;}&#xA;&#xA;var obj = new MyType(42); // why can't type inference work out that I want a MyType&lt;int&gt;?&#xA;</code></pre>&#xA;&#xA;<p>Though you could get around this with a factory class,</p>&#xA;&#xA;<pre><code>public class MyTypeFactory&#xA;{&#xA;   public static MyType&lt;T&gt; Create&lt;T&gt;(T value)&#xA;   {&#xA;      return new MyType&lt;T&gt;(value);&#xA;   }&#xA;}&#xA;var myObj = MyTypeFactory.Create(42);&#xA;</code></pre>&#xA;&#xA;<p>Is there a practical or philosophical reason why the constructor can't support type inference?</p>&#xA;
  6190486 |    1 | <p>I have been searching for a way to use SenTestingKit to do some integration testing between my client-side code and our server. I haven't had any luck. It seems that once the code is run in a method, the object gets destroyed. This means that any asynchronous responses never call the selectors.</p>&#xA;&#xA;<p>Questions:</p>&#xA;&#xA;<ol>&#xA;<li>Is there a way to keep the object instantiated until such time as I see fit to destroy it - ie. after the tests have completed?</li>&#xA;<li>If not, how could I create a class that blocks (ie. acts synchronously) until the tests are completed?</li>&#xA;</ol>&#xA;&#xA;<p>FYI, I'm running a test server where I know the expected results.</p>&#xA;&#xA;<p>I've done a fair bit of Googling but haven't seen proof one way or another about this. I'm sure others would be interested as well.</p>&#xA;
   810864 |    1 | <p>Although I have not worked C++ at a professional level, in my opinion, it is OK to throw exceptions from the constructors. I do that(if needed) in .Net. Check out <a href="http://www.codeproject.com/script/Forums/View.aspx?fid=1649&amp;msg=2957496" rel="nofollow">this</a> and <a href="http://www.dev102.com/2008/12/03/throwing-exceptions-from-constructors/" rel="nofollow">this</a> link. It might be of your interest.</p>&#xA;
 16691570 |    1 | <p>This answer will probably got lost in all the answers above, but I found <code>UriBuilder</code> worked really well for this sort of thing.</p>&#xA;&#xA;<pre><code>UriBuilder urlb = new UriBuilder("http", _serverAddress, _webPort, _filePath);&#xA;Uri url = urlb.Uri;&#xA;return url.AbsoluteUri;&#xA;</code></pre>&#xA;&#xA;<p>See <a href="http://msdn.microsoft.com/en-us/library/system.uribuilder.aspx" rel="nofollow">UriBuilder Class - MSDN</a> for more constructors and documentation.</p>&#xA;
 17783784 |    1 | <blockquote>&#xA;  <p>When are these four variables initialized?</p>&#xA;</blockquote>&#xA;&#xA;<p>As you say, this happens before program startup, i.e. before <code>main</code> begins. C does not specify it further; in C++, these happen during the <em>static initialisation phase</em> before objects with more complicated constructors or initialisers.</p>&#xA;&#xA;<blockquote>&#xA;  <p>Where values for initialization like 5 and 4 are stored during compilation?</p>&#xA;</blockquote>&#xA;&#xA;<p>Typically, the non-zero values are stored in a data segment in the program file, while the zero values are in a <em>bss</em> segment which just reserves enough memory for the variables. When the program starts, the data segment is loaded into memory and the <em>bss</em> segment is set to zero. (Of course, the language standard doesn't specify this, so a compiler could do something else, like generate code to initialise each variables before running <code>main</code>).</p>&#xA;
 22085269 |    1 | <p>Use a combination of Microsoft specific CSS rules to filter IE11:</p>&#xA;&#xA;<pre><code>&lt;!doctype html&gt;&#xA;&lt;html&gt;&#xA; &lt;head&gt;&#xA;  &lt;title&gt;IE10/11 Media Query Test&lt;/title&gt;&#xA;  &lt;meta charset="utf-8"&gt;&#xA;  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;&#xA;  &lt;style&gt;&#xA;    @media all and (-ms-high-contrast:none)&#xA;     {&#xA;     .foo { color: green } /* IE10 */&#xA;     *::-ms-backdrop, .foo { color: red } /* IE11 */&#xA;     }&#xA;  &lt;/style&gt;&#xA; &lt;/head&gt;&#xA; &lt;body&gt;&#xA;  &lt;div class="foo"&gt;Hi There!!!&lt;/div&gt;&#xA; &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Filters such as this work because of the following:</p>&#xA;&#xA;<blockquote>&#xA;  <p>When a user agent cannot parse the selector (i.e., it is not valid CSS 2.1), it must ignore the selector and the following declaration block (if any) as well. </p>&#xA;</blockquote>&#xA;&#xA;<p><strong>References</strong></p>&#xA;&#xA;<ul>&#xA;<li><a href="http://stackoverflow.com/questions/9900311/how-do-i-target-only-internet-explorer-10-for-certain-situations-like-internet-e/17099988#17099988">How do I target only Internet Explorer 10 for certain situations like Internet Explorer-specific CSS or Internet Explorer-specific JavaScript code?</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/ie/hh772373">Microsoft Extensions to CSS</a></li>&#xA;<li><a href="http://www.w3.org/TR/CSS2/syndata.html#rule-sets">CSS 2.1:Rule sets, declaration blocks, and selectors</a></li>&#xA;</ul>&#xA;
  1643053 |    1 | <p><a href="http://stackoverflow.com/questions/76993/how-to-double-buffer-net-controls-on-a-form/89125#89125">nobugz</a> gets the credit for the method in his link, I'm just reposting. Add this override to the Form:</p>&#xA;&#xA;<pre><code>protected override CreateParams CreateParams&#xA;{&#xA;    get&#xA;    {&#xA;           CreateParams cp = base.CreateParams;&#xA;       cp.ExStyle |= 0x02000000;&#xA;          return cp;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>This worked best for me, on Windows 7 I was getting large black blocks appearing when I resize a control heavy form. The control now bounce instead! But it's better.</p>&#xA;
    83292 |    1 | <p>CSS layouts are generally much better for accessibility, provided the content comes in a natural order and makes sense without a stylesheet.  And it's not just screen readers that struggle with table-based layouts: they also make it much harder for mobile browsers to render a page properly.</p>&#xA;&#xA;<p>Also, with a div-based layout you can very easily do cool things with a print stylesheet such as excluding headers, footers and navigation from printed pages - I think it would be impossible, or at least much more difficult, to do that with a table-based layout.</p>&#xA;&#xA;<p>If you're doubting that separation of content from layout is easier with divs than with tables, take a look at the div-based HTML at <a href="http://www.csszengarden.com/" rel="nofollow">CSS Zen Garden</a>, see how changing the stylesheets can drastically change the layout, and think about whether you could achieve the same variety of layouts if the HTML was table based...  If you're doing a table-based layout, you're unlikely to be using CSS to control all the spacing and padding in the cells (if you were, you'd almost certainly find it easier to use floating divs etc. in the first place).  Without using CSS to control all that, and because of the fact that tables specify the left-to-right and top-to bottom order of things in the HTML, tables tend to mean that your layout becomes very much fixed in the HTML.</p>&#xA;&#xA;<p>Realistically I think it's very hard to completely change the layout of a div-and-CSS-based design without changing the divs a bit.  However, with a div-and-CSS-based layout it's much easier to tweak things like the spacing between various blocks, and their relative sizes.</p>&#xA;
 27511360 |    1 | <h1>What has changed for C++14</h1>&#xA;&#xA;<p>We can refer to the <a href="https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf" rel="nofollow">Draft C++14 standard</a> for reference. </p>&#xA;&#xA;<h2>Aggregates</h2>&#xA;&#xA;<p>This is covered in section <code>8.5.1</code> <em>Aggregates</em> which gives us the following definition:</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate is an array or a class (Clause 9) with no user-provided&#xA;  constructors (12.1), no private or protected non-static data members&#xA;  (Clause 11), no base classes (Clause 10), and no virtual functions&#xA;  (10.3).</p>&#xA;</blockquote>&#xA;&#xA;<p>The only change is now adding <em>in-class member initializers</em> does not make a class a non-aggregate. So the following example from <a href="http://stackoverflow.com/q/27118535/1708801">C++11 aggregate initialization for classes with member in-pace initializers</a>:</p>&#xA;&#xA;<pre><code>struct A&#xA;{&#xA;  int a = 3;&#xA;  int b = 3;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>was not an aggregate in C++11 but it is in C++14. This change is covered in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html" rel="nofollow">N3605: Member initializers and aggregates</a>, which has the following abstract:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Bjarne Stroustrup and Richard Smith raised an issue about aggregate&#xA;  initialization and member-initializers not working together. This&#xA;  paper proposes to fix the issue by adopting Smith's proposed wording&#xA;  that removes a restriction that aggregates can't have&#xA;  member-initializers.</p>&#xA;</blockquote>&#xA;&#xA;<h1>POD stays the same</h1>&#xA;&#xA;<p>The definition for POD(<em>plain old data</em>) struct is covered in section <code>9</code> <em>Classes</em> which says:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A POD struct<sup>110</sup> is a non-union class that is both a trivial class and&#xA;  a standard-layout class, and has no non-static data members of type&#xA;  non-POD struct, non-POD union (or array of such types). Similarly, a&#xA;  POD union is a union that is both a trivial class and a&#xA;  standard-layout class, and has no non-static data members of type&#xA;  non-POD struct, non-POD union (or array of such types). A POD class is&#xA;  a class that is either a POD struct or a POD union.</p>&#xA;</blockquote>&#xA;&#xA;<p>which is the same wording as C++11.</p>&#xA;
 27637752 |    1 | <p><strong>As to the correct way of finding the last used cell, one has first to decide what is considered <em>used</em>, and then select a suitable method</strong>. I conceive at least two meanings:</p>&#xA;&#xA;<ol>&#xA;<li><p>Used = non-blank, i.e., having <strong>data</strong>.</p></li>&#xA;<li><p>Used = "... in use, meaning the section that contains <strong>data or formatting</strong>."&#xA;<a href="http://support.microsoft.com/kb/244435" rel="nofollow">This is the criterion used by Excel at the time of saving</a>. See also <a href="https://support.office.com/en-sg/article/Locate-and-reset-the-last-cell-on-a-worksheet-c9e468a8-0fc3-4f69-8038-b3c1d86e99e9" rel="nofollow">this</a>.&#xA;This criterion usually produces unexpected results, but it may also be intentionally exploited (less often, surely), e.g., to highlight or print specific regions, which may eventually have no data. And, of course, it is desirable as a criterion for the range to use when saving a workbook.</p></li>&#xA;</ol>&#xA;&#xA;<p><strong>How to find the last used cell depends on what <em>you</em> want (your criterion)</strong>.</p>&#xA;&#xA;<p><em>For criterion 1, I suggest reading <a href="http://stackoverflow.com/a/11169920/2707864">this answer</a></em>.</p>&#xA;&#xA;<p><em>For criterion 2, <code>UsedRange</code> is the most reliable option</em>. It even makes it unnecessary to save a workbook to make sure that the last cell is updated.&#xA;<kbd>Ctrl</kbd>+<kbd>End</kbd> will go to a wrong cell prior to saving&#xA;(ΓÇ£The last cell is not reset until you save the worksheetΓÇ¥, from&#xA;<a href="http://msdn.microsoft.com/en-us/library/aa139976%28v=office.10%29.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa139976%28v=office.10%29.aspx</a>.&#xA;It is an old reference, but in this respect valid).</p>&#xA;&#xA;<p>There is yet another pitfall:<br>&#xA;Criterion 2 does not account for Conditional Formatting. One may have formatted cells, based on formulas, which are not detected by <code>UsedRange</code> or <kbd>Ctrl</kbd>+<kbd>End</kbd>.&#xA;In the figure, the last cell is B3, since formatting was applied explicitly to it. Cells B6:D7 have a format derived from a Conditional Formatting rule, and this is not detected even by <code>UsedRange</code>.</p>&#xA;&#xA;<p><img src="http://i.stack.imgur.com/vhayX.jpg" alt="enter image description here"></p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>As to your specific question</strong>:&#xA;<em>What's the reason behind this?</em></p>&#xA;&#xA;<p>Your code uses the first cell in your range E4:E48 as a trampoline, for <em>jumping</em> down with <code>End(xlDown)</code>.</p>&#xA;&#xA;<p>The "erroneous" output will obtain if there are no <em>non-blank</em> cells in your range other than perhaps the first. Then, you are <em>leaping in the dark</em>, i.e., down the worksheet&#xA;(you should note the difference between <em>blank</em> and <em>empty string</em>!). </p>&#xA;&#xA;<p>Note that:</p>&#xA;&#xA;<ol>&#xA;<li><p>If your range contains non-contiguous non-blank cells, then it will also give a wrong result.</p></li>&#xA;<li><p>If there is only one non-blank cell, but it is not the first one, your code will still give you the correct result.</p></li>&#xA;</ol>&#xA;
  8728042 |    1 | <p>Great List!</p>&#xA;&#xA;<p>I found another interesting solution for UI testing iOS applications.</p>&#xA;&#xA;<p><a href="http://www.zucchiniframework.org/" rel="nofollow">Zucchini Framework</a></p>&#xA;&#xA;<p>It is based on <code>UIAutomation</code>. &#xA;The framework let you write screen centric scenarios in Cucumber like style.&#xA;The scenarios can be executed in Simulator and on device from a console (it is CI friendly).</p>&#xA;&#xA;<p>The assertions are screenshot based. Sounds inflexible, but it gets you nice HTML report, with highlighted screen comparison and you can provide masks which define the regions you want to have pixel exact assertion.</p>&#xA;&#xA;<p>Each screen has to be described in <code>CoffeScript</code> and the tool it self is written in ruby. &#xA;It is kind of polyglott nightmare, but the tool provides a nice abstraction for <code>UIAutomation</code> and when the screens are described it is manageable even for QA person.</p>&#xA;
  2348499 |    1 | <p>Java:</p>&#xA;&#xA;<pre><code>class X{static{new X();}{new X();}}&#xA;</code></pre>&#xA;&#xA;<p>Actually causes a stack overflow initializing the X class. Before main() is called, the JVM must load the class, and when it does so it triggers any anonymous static code blocks:</p>&#xA;&#xA;<pre><code>static {&#xA;  new X();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which as you can see, instantiates X using the default constructor. The JVM will call anonymous code blocks even before the constructor:</p>&#xA;&#xA;<pre><code>{&#xA;  new X();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Which is the recursive part.</p>&#xA;
 18859235 |    1 | <p>Wooww, takes some guts to add an answer here :) </p>&#xA;&#xA;<p>Today, I pushed a library to help testing private methods and fields.It has been designed with Android in mind but can really be used for any Java project.</p>&#xA;&#xA;<p>If you got some code with private methods or fields or constructors, you can use <a href="https://github.com/stephanenicolas/boundbox" rel="nofollow"><strong>BoundBox</strong></a>. It does exactly what you are looking for.&#xA;Here below is an example of a test that accesses 2 private fields of an Android activity to test it : </p>&#xA;&#xA;<pre><code>@UiThreadTest&#xA;public void testCompute() {&#xA;    // given&#xA;    boundBoxOfMainActivity = new BoundBoxOfMainActivity(getActivity());&#xA;&#xA;    // when&#xA;    boundBoxOfMainActivity.boundBox_getButtonMain().performClick();&#xA;&#xA;    // then&#xA;    assertEquals("42", boundBoxOfMainActivity.boundBox_getTextViewMain().getText());&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>BoundBox</strong> makes it easy to test private/protected fields, methods and constructors. You can even access stuff that is hidden by inheritance. Indeed, BoundBox breaks encapsulation. It will give you access to all that through reflection, <strong>BUT</strong> every thing is checked at compile time.</p>&#xA;&#xA;<p>Ideal for testing some legacy code. Use it carefully. ;)</p>&#xA;&#xA;<p><a href="https://github.com/stephanenicolas/boundbox" rel="nofollow">https://github.com/stephanenicolas/boundbox</a></p>&#xA;
     6295 |    1 | <p>I really don't have a problem with using #region to organize code.  Personally, I'll usually setup different regions for things like properties, event handlers, and public/private methods.</p>
 27118551 |    1 | <p>In C++11 having in-class member initializers makes the struct/class not an aggregate &mdash; this was changed in C++14, however. This is something I found surprising when I first ran into it, the rationale for this restriction is that in-class initializers are pretty similar to a user defined constructor but the counter argument is that no one really expects that adding in-class initializers should make their class/struct a non-aggregate, I sure did not.</p>&#xA;&#xA;<p>From the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf">draft C++11 standard</a> section <code>8.5.1</code> <em>Aggregates</em> (<em>emphasis mine going forward</em>):</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate is an array or a class (Clause 9) with no user-provided&#xA;  constructors (12.1), <strong>no brace-or-equal initializers for non-static&#xA;  data members</strong> (9.2), no private or protected non-static data members&#xA;  (Clause 11), no base classes (Clause 10), and no virtual functions&#xA;  (10.3).</p>&#xA;</blockquote>&#xA;&#xA;<p>and in <a href="https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf">C++14</a> the same paragraph reads:</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate is an array or a class (Clause 9) with no user-provided&#xA;  constructors (12.1), no private or protected non-static data members&#xA;  (Clause 11), no base classes (Clause 10), and no virtual functions&#xA;  (10.3).</p>&#xA;</blockquote>&#xA;&#xA;<p>This change is covered in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html">N3605: Member initializers and aggregates</a> which has the following abstract:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Bjarne Stroustrup and Richard Smith raised an issue about aggregate&#xA;  initialization and member-initializers not working together. This&#xA;  paper <strong>proposes to fix the issue by adopting Smith's proposed wording&#xA;  that removes a restriction that aggregates can't have&#xA;  member-initializers</strong>.</p>&#xA;</blockquote>&#xA;&#xA;<p>This comment basically sums up the reluctance to allowing them to be aggregates:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Aggregates cannot have user-defined constructors and&#xA;  <strong>member-initializers are essentially some kind of user-defined&#xA;  constructor (element)</strong> (see also Core Defect 886). I'm not against this&#xA;  extension, but it also has implications on what our model of&#xA;  aggregates actually is. After acceptance of this extension <strong>I would&#xA;  like to know how to teach what an aggregate is.</strong></p>&#xA;</blockquote>&#xA;&#xA;<p>The revised version <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3653.html">N3653</a> was adopted in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/">May 2013</a>.</p>&#xA;&#xA;<p><B>Update</B></p>&#xA;&#xA;<p>emsr points out that <a href="https://gcc.gnu.org/gcc-5/changes.html">G++ 5.0 now supports C++14 aggregates with non-static data member initializers</a> using either <code>std=c++1y</code> or <code>-std=c++14</code>:</p>&#xA;&#xA;<pre><code>struct A { int i, j = i; };&#xA;A a = { 42 }; // a.j is also 42&#xA;</code></pre>&#xA;&#xA;<p>See it working <a href="http://melpon.org/wandbox/permlink/oB5O8XE3DjHjOT2V">live</a>.</p>&#xA;
 10930280 |    1 | <p>I am using Spring, Hibernate and JPA Entity Manager. When fetching different regions of the UI concurrently (via jquery/ajax) , I would like to synchronise access to JPA Entity Manager, as otherwise it results in shared references to collections exception. How do I achieve this ? I have a controller that calls service methods in the backend which are responsible for calling get/save etc on entitymanager.</p>&#xA;
  1272764 |    1 | <p>It is an initialization list. </p>&#xA;&#xA;<p>By the time you get in the body of the constructor, all fields have already been constructed; if they have default constructors, those were already called. Now, if you assign a value to them in the body of the constructor, you are calling the copy constructor. That is inefficient, because two constructors end up being called instead of one. </p>&#xA;&#xA;<p>So in the case of primitive types like int, there's no advantage compared to assigning them in the body of the constructor. In the case of objects that have a constructor, it is a performance optimization because it avoids calling both the default and the copy constructor. </p>&#xA;&#xA;<p>An initialization list is necessary if one of the fields is a reference because a reference can never be null, not even in the brief time between object construction and the body of the constructor. The following raises error C2758: 'MyClass::member_' : must be initialized in constructor base/member initializer list</p>&#xA;&#xA;<pre><code>class MyClass {&#xA;public :&#xA;    MyClass(std::string&amp; arg) {&#xA;        member_ = arg;&#xA;    }&#xA;    std::string&amp; member_;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>The only correct way is:</p>&#xA;&#xA;<pre><code>class MyClass {&#xA;public :&#xA;    MyClass(std::string&amp; arg) &#xA;        : member_(arg) &#xA;    {&#xA;    }&#xA;    std::string&amp; member_;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>See the <a href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.6">C++ FAQ</a> for a better discussion.</p>&#xA;
  4782927 |    1 | <p>I'd say the Rule of Three becomes the Rule of Three, Four and Five:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Each class should explicitly define exactly one&#xA;  of the following set of special member&#xA;  functions:</p>&#xA;  &#xA;  <ul>&#xA;  <li>None</li>&#xA;  <li>Destructor, copy constructor, copy assignment operator</li>&#xA;  </ul>&#xA;  &#xA;  <p>In addition, each class that explicitly defines a destructor may explicitly define a move constructor and/or a move assignment operator.</p>&#xA;  &#xA;  <p>Usually, one of the following sets of special member&#xA;  functions is sensible:</p>&#xA;  &#xA;  <ul>&#xA;  <li>None (for many simple classes where the implicitly generated special member functions are correct and fast)</li>&#xA;  <li>Destructor, copy constructor, copy assignment operator (in this case the&#xA;  class will not be movable)</li>&#xA;  <li>Destructor, move constructor, move assignment operator (in this case the class will not be copyable, useful for resource-managing classes where the underlying resource is not copyable)</li>&#xA;  <li>Destructor, copy constructor, copy assignment operator, move constructor (because of copy elision, there is no overhead if the copy assignment operator takes its argument by value)</li>&#xA;  <li>Destructor, copy constructor, copy assignment operator, move constructor,&#xA;  move assignment operator</li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>Note that move constructor and move assignment operator won't be generated for a class that explicitly declares any of the other special member functions, that copy constructor and copy assignment operator won't be generated for a class that explicitly declares a move constructor or move assignment operator, and that a class with a explicitly declared destructor and implicitly defined copy constructor or implicitly defined copy assignment operator is considered deprecated. In particular, the following perfectly valid C++03 polymorphic base class</p>&#xA;&#xA;<pre><code>class C {&#xA;  virtual ~C() { }   // allow subtype polymorphism&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>should be rewritten as follows:</p>&#xA;&#xA;<pre><code>class C {&#xA;  C(const C&amp;) = default;               // Copy constructor&#xA;  C(C&amp;&amp;) = default;                    // Move constructor&#xA;  C&amp; operator=(const C&amp;) &amp; = default;  // Copy assignment operator&#xA;  C&amp; operator=(C&amp;&amp;) &amp; = default;       // Move assignment operator&#xA;  virtual ~C() { }                     // Destructor&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>A bit annoying, but probably better than the alternative (automatic generation of all special member functions).</p>&#xA;&#xA;<p>In contrast to the Rule of the Big Three, where failing to adhere to the rule can cause serious damage, not explicitly declaring the move constructor and move assignment operator is generally fine but often suboptimal with respect to efficiency. As mentioned above, move constructor and move assignment operators are only generated if there is no explicitly declared copy constructor, copy assignment operator or destructor. This is not symmetric to the traditional C++03 behavior with respect to auto-generation of copy constructor and copy assignment operator, but is much safer. So the possibility to define move constructors and move assignment operators is very useful and creates new possibilities (purely movable classes), but classes that adhere to the C++03 Rule of the Big Three will still be fine.</p>&#xA;&#xA;<p>For resource-managing classes you can define the copy constructor and copy assignment operator as deleted (which counts as definition) if the underlying resource cannot be copied. Often you still want move constructor and move assignment operator. Copy and move assignment operators will often be implemented using <code>swap</code>, as in C++03. If you have a move constructor and move assignment operator, specializing <code>std::swap</code> will become unimportant because the generic <code>std::swap</code> uses the move constructor and move assignment operator if available, and that should be fast enough.</p>&#xA;&#xA;<p>Classes that are not meant for resource management (i.e., no non-empty destructor) or subtype polymorphism (i.e., no virtual destructor) should declare none of the five special member functions; they will all be auto-generated and behave correct and fast.</p>&#xA;
   516801 |    1 | <p>"Don't call virtual methods from constructors".  This is only sometimes a PITA, but is only so because in C# I cannot decide at which point in a constructor to call my base class's constructor.  Why not?  The .NET framework allows it, so what good reason is there for C# to not allow it?</p>&#xA;&#xA;<p>Damn!</p>&#xA;
    39433 |    1 | <p>For most people I interview for Java developer positions labeled blocks are very surprising. Here is an example:</p>&#xA;&#xA;<pre><code>// code goes here&#xA;&#xA;getmeout:{&#xA;    for (int i = 0; i &lt; N; ++i) {&#xA;        for (int j = i; j &lt; N; ++j) {&#xA;            for (int k = j; k &lt; N; ++k) {&#xA;                //do something here&#xA;                break getmeout;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Who said <code>goto</code> in java is just a keyword? :)</p>&#xA;
    86649 |    1 | <p>Singletons basically let you have complex global state in languages which otherwise make it difficult or impossible to have complex global variables.</p>&#xA;&#xA;<p>Java in particular uses singletons as a replacement for global variables, since everything must be contained within a class.  The closest it comes to global variables are public static variables, which may be used as if they were global with <code>import static</code></p>&#xA;&#xA;<p>C++ does have global variables, but the order in which constructors of global class variables are invoked is undefined.  As such, a singleton lets you defer the creation of a global variable until the first time that variable is needed.</p>&#xA;&#xA;<p>Languages such as Python and Ruby use singletons very little because you can use global variables within a module instead.</p>&#xA;&#xA;<p>So when is it good/bad to use a singleton?  Pretty much exactly when it would be good/bad to use a global variable.</p>&#xA;
   408512 |    1 | <p>A random collection of Cook's aphorisms...</p>&#xA;&#xA;<ul>&#xA;<li><p>The hardest language to learn is your second.</p></li>&#xA;<li><p>The hardest OS to learn is your second one - especially if your first was an IBM mainframe.</p></li>&#xA;<li><p>Once you've learned several seemingly different languages,&#xA;you finally realize that all programming&#xA;languages are the same - just minor differences in syntax.</p></li>&#xA;<li><p>Although one can be quite productive and marketable without having learned any assembly,&#xA;no one will ever have a visceral understanding of computing without it.</p></li>&#xA;<li><p>Debuggers are the final refuge for programmers who don't really know&#xA;what they're doing in the first place.</p></li>&#xA;<li><p>No OS will ever be stable if it doesn't make use of hardware memory management.</p></li>&#xA;<li><p>Low level systems programming is much, much easier than applications programming.</p></li>&#xA;<li><p>The programmer who has a favorite language is just playing.</p></li>&#xA;<li><p>Write the User's Guide FIRST!</p></li>&#xA;<li><p>Policy and procedure are intended for those who lack the initiative to perform otherwise.</p></li>&#xA;<li><p>(The Contractor's Creed):&#xA;Tell'em what they need.&#xA;Give'em what they want.&#xA;Make sure the check clears.</p></li>&#xA;<li><p>If you don't find programming fun, get out of it or accept that although you may make a&#xA;living at it, you'll never be more than average.</p></li>&#xA;<li><p>Just as the old farts have to learn the .NET method names,&#xA;you'll have to learn the library calls.  But there's nothing new there.<br />&#xA;The life of a programmer is one of constantly adapting to different environments,&#xA;and the more tools you have hung on your belt, the more versatile and marketable you'll be.</p></li>&#xA;<li><p>You may piddle around a bit with little code chunks near the beginning to try out some ideas,&#xA;but, in general, one doesn't start coding in earnest until you KNOW how the whole program or&#xA;app is going to be layed out, and you KNOW that the whole thing is going to work EXACTLY as&#xA;advertised.  For most projects with at least some degree of complexity,&#xA;I generally end up spending 60 to 70 percent of the time up front just percolating ideas.</p></li>&#xA;<li><p>Understand that programming has little to do with language and everything to do with algorithm.&#xA;All of those nifty geegaws with memorable acronyms that folks have come up with over the years&#xA;are just different ways of skinning the implementation cat.  When you strip away all the&#xA;OOPiness, RADology, Development Methodology 37, and Best Practice 42, you still have to deal&#xA;with the basic building blocks of:</p>&#xA;&#xA;<ul>&#xA;<li>assignments</li>&#xA;<li>conditionals</li>&#xA;<li>iterations</li>&#xA;<li>control flow</li>&#xA;<li>I/O</li>&#xA;</ul></li>&#xA;</ul>&#xA;&#xA;<p>Once you can truly wrap yourself around that, you'll eventually get to the point where you&#xA;see (from a programming standpoint) little difference between writing an inventory app for&#xA;an auto parts company, a graphical real-time TCP performance analyzer, a mathematical model&#xA;of a stellar core, or an appointments calendar.</p>&#xA;&#xA;<ul>&#xA;<li>Beginning programmers work with small chunks of code.  As they gain experience,&#xA;they work with ever increasingly large chunks of code.<br />&#xA;As they gain even more experience, they work with small chunks of code.</li>&#xA;</ul>&#xA;
 21541902 |    1 | <p>While a lot of answers show why you'd use a <code>yield</code> to create a generator, there are more uses for <code>yield</code>.  It's quite easy to make a coroutine, which enables the passing of information between two blocks of code.  I won't repeat any of the fine examples that have already been given about using <code>yield</code> to create a generator.</p>&#xA;&#xA;<p>To help understand what a <code>yield</code> does in the following code, you can use your finger to trace the cycle through any code that has a <code>yield</code>.  Every time your finger hits the <code>yield</code>, you have to wait for a <code>next</code> or a <code>send</code> to be entered.  When a <code>next</code> is called, you trace through the code until you hit the <code>yield</code>ΓÇª the code on the right of the <code>yield</code> is evaluated and returned to the callerΓÇª then you wait.  When <code>next</code> is called again, you perform another loop through the code.  However, you'll note that in a coroutine, <code>yield</code> can also be used with a <code>send</code>ΓÇª which will send a value from the caller <em>into</em> the yielding function. If a <code>send</code> is given, then <code>yield</code> receives the value sent, and spits it out the left hand sideΓÇª then the trace through the code progresses until you hit the <code>yield</code> again (returning the value at the end, as if <code>next</code> was called).</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>&gt;&gt;&gt; def coroutine():&#xA;...     i = -1&#xA;...     while True:&#xA;...         i += 1&#xA;...         val = (yield i)&#xA;...         print("Received %s" % val)&#xA;...&#xA;&gt;&gt;&gt; sequence = coroutine()&#xA;&gt;&gt;&gt; sequence.next()&#xA;0&#xA;&gt;&gt;&gt; sequence.next()&#xA;Received None&#xA;1&#xA;&gt;&gt;&gt; sequence.send('hello')&#xA;Received hello&#xA;2&#xA;&gt;&gt;&gt; sequence.close()&#xA;</code></pre>&#xA;
    69718 |    1 | <p>CTRL+SPACE, for anything, anywhere.</p>&#xA;&#xA;<p>Generate getters and setters.</p>&#xA;&#xA;<p>Create Constructors using Fields</p>&#xA;&#xA;<p>Extract Method...</p>&#xA;&#xA;<p>Refactor->Rename</p>&#xA;&#xA;<p>CTRL+O for the quick outline.  CTRL+O+CTRL+O for the inherited outline.</p>&#xA;&#xA;<p>F4 to display a type hierarchy</p>&#xA;&#xA;<p>Open Call Hierarchy to display where a method is called from.</p>&#xA;&#xA;<p>CTRL+SHIFT+T to open a Java Type</p>&#xA;&#xA;<p>CTRL+SHIFT+R to open any resource.</p>&#xA;&#xA;<p>ALT + left or right to go forward or backwards through edit places in your documents (easy navigation)</p>&#xA;&#xA;<p>Override/Implement methods if you know you're going to do a lot of methods (otherwise, CTRL+SPACE is better for one at a time selection.</p>&#xA;&#xA;<p>Refactor->Extract Interface</p>&#xA;&#xA;<p>Refactor->Pull up</p>&#xA;&#xA;<p>Refactor->Push down</p>&#xA;&#xA;<p>CTRL+SHIFT+O for organize imports (when typing the general class name such as Map, pressing CTRL+SPACE and then selecting the appropriate class will import it directly for you).</p>&#xA;&#xA;<p>CTRL+SHIFT+F for formatting (although Eclipse's built in formatter can be a little braindead for long lines of code)</p>&#xA;&#xA;<p>EDIT: Oh yeah, some debugging:</p>&#xA;&#xA;<p>F5: Step into (show me the details!)</p>&#xA;&#xA;<p>F6: Step over (I believe you, on to the next part...)</p>&#xA;&#xA;<p>F7: Step out (I thought I cared about this method, but it turns out I don't, get me out of here!)</p>&#xA;&#xA;<p>F8: Resume (go until the next breakpoint is reached)</p>&#xA;&#xA;<p>CTRL+SHIFT+I: inspect an expression.  CTRL+SHIFT+I+CTRL+SHIFT+I: create a watch expression on the inspected expression.</p>&#xA;&#xA;<p>Conditional breakpoints: Right click a breakpoint and you may set a condition that occurs which triggers its breaking the execution of the program (context assist, with Ctrl+Space, is available here!)</p>&#xA;&#xA;<p>F11 - Debug last launched (application)</p>&#xA;&#xA;<p>CTRL+F11 - Run last launched (application)</p>&#xA;
  1837091 |    1 | <p>It's certainly possible depending on the implementation, but the scanning portion of the interpreter should only look at each character once.  It will need just an additional state (or possible set of states) and transitions to handle #{} blocks.  <br><br>In a table based scanner thats going to be a single lookup to determine transition, and will be happening for each character anyways.<br><br>When the parser gets the scanner output, it's already known that it will have to eval code in the block.  So the overhead is only really the memory overhead in the scanner/parser to handle the #{} block, which you pay for either way.<br><br>&#xA;Unless I'm missing something (or misremembering compiler construction details), which is also certainly possible :)</p>&#xA;
    45604 |    1 | <p>C# doesn't require you to specify a generic type parameter if the compiler can infer it, for instance:</p>&#xA;&#xA;<pre><code>List&lt;int&gt; myInts = new List&lt;int&gt; {0,1,1,&#xA;    2,3,5,8,13,21,34,55,89,144,233,377,&#xA;    610,987,1597,2584,4181,6765};&#xA;&#xA;//this statement is clunky&#xA;List&lt;string&gt; myStrings = myInts.&#xA;    Select&lt;int,string&gt;( i =&gt; i.ToString() ).&#xA;    ToList&lt;string&gt;();&#xA;&#xA;//the type is inferred from the lambda expression&#xA;//the compiler knows that it's taking an int and &#xA;//returning a string&#xA;List&lt;string&gt; myStrings = myInts.&#xA;    Select( i =&gt; i.ToString() ).&#xA;    ToList();&#xA;</code></pre>&#xA;&#xA;<p>This is needed for anonymous types where you don't know what the type parameter would be (in intellisense it shows up as <code>'a</code>) because it's added by the compiler.</p>&#xA;&#xA;<p>Class-level type parameters don't let you do this:</p>&#xA;&#xA;<pre><code>//sample generic class&#xA;public class GenericDemo&lt;T&gt; &#xA;{&#xA;    public GenericDemo ( T value ) &#xA;    {&#xA;        GenericTypedProperty = value;&#xA;    }&#xA;&#xA;    public T GenericTypedProperty {get; set;}&#xA;}&#xA;&#xA;//why can't I do:&#xA;int anIntValue = 4181;&#xA;var item = new GenericDemo( anIntValue ); //type inference fails&#xA;&#xA;//however I can create a wrapper like this:&#xA;public static GenericDemo&lt;T&gt; Create&lt;T&gt; ( T value )&#xA;{&#xA;    return new GenericDemo&lt;T&gt; ( value );&#xA;}&#xA;&#xA;//then this works - type inference on the method compiles&#xA;var item = Create( anIntValue );&#xA;</code></pre>&#xA;&#xA;<p>Why doesn't C# support this class level generic type inference?</p>&#xA;
  2969343 |    1 | <p><strong>The Me Keyword</strong></p>&#xA;&#xA;<p>The "Me" Keyword is unique in VB.Net. I know it is rather common but there is a difference between "Me" and the C# equivalent "this". The difference is "this" is read only and "Me" is not. This is valuable in constructors where you have an instance of a variable you want the variable being constructed to equal already as you can just set "Me = TheVariable" as opposed to C# where you would have to copy each field of the variable manually(which can be horrible if there are many fields and error prone). The C# workaround would be to do the assignment outside the constructor. Which means you now if the object is self-constructing to a complete object you now need another function.  </p>&#xA;
   328429 |    1 | <p>As mentioned by other posters, regular expressions are not the best tool for the job because they are almost universally implemented as greedy algorithms. This means that even if you tried to match code blocks using something like:</p>&#xA;&#xA;<pre><code>(\[code\].*\[/code\])&#xA;</code></pre>&#xA;&#xA;<p>Then the expression will match everything from the first <code>[code]</code> tag to the last <code>[/code]</code> tag, which is clearly not what you want. While there are ways to get around this, the resulting regular expressions are usually brittle, unintuitive, and downright ugly. Something like the following python code would work much better.</p>&#xA;&#xA;<pre><code>output = []&#xA;def add_brs(str):&#xA;    return str.replace('\n','&lt;br/&gt;\n')&#xA;# the first block will *not* have a matching [/code] tag&#xA;blocks = input.split('[code]')&#xA;output.push(add_brs(blocks[0]))&#xA;# for all the rest of the blocks, only add &lt;br/&gt; tags to&#xA;# the segment after the [/code] segment&#xA;for block in blocks[1:]:&#xA;    if len(block.split('[/code]'))!=1:&#xA;        raise ParseException('Too many or few [/code] tags')&#xA;    else:&#xA;        # the segment in the code block is pre, everything&#xA;        # after is post&#xA;        pre, post = block.split('[/code]')&#xA;        output.push(pre)&#xA;        output.push(add_brs(post))&#xA;# finally join all the processed segments together&#xA;output = "".join(output)&#xA;</code></pre>&#xA;&#xA;<p>Note the above code was <em>not</em> tested, it's just a rough idea of what you'll need to do.</p>&#xA;
   229899 |    1 | <p>You can access final local variables and parameters in initialization blocks and methods of local classes. Consider this:</p>&#xA;&#xA;<pre><code>    final String foo = "42";&#xA;    new Thread() {&#xA;        public void run() {&#xA;             dowhatever(foo);&#xA;        }&#xA;    }.start();&#xA;</code></pre>&#xA;&#xA;<p>A bit like a closure, isn't it?</p>&#xA;
 14839368 |    1 | <p>Keep in mind that while HTML itself isn't regular, portions of a page you are looking at <em>might</em> be regular.</p>&#xA;&#xA;<p>For example, it is an error for <code>&lt;form&gt;</code> tags to be nested; if the web page is working correctly, then using a regular expression to grab a <code>&lt;form&gt;</code> would be completely reasonable.</p>&#xA;&#xA;<p>I recently did some web scraping using only Selenium and regular expressions.  I got away with it because the data I wanted was put in a <code>&lt;form&gt;</code>, and put in a simple table format (so I could even count on <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code> and <code>&lt;td&gt;</code> to be non-nested--which is actually highly unusual).  In some degree, regular expressions were even almost necessary, because some of the structure I needed to access was delimited by comments.  (Beautiful Soup can give you comments, but it would have been difficult to grab <code>&lt;!-- BEGIN --&gt;</code> and <code>&lt;!-- END --&gt;</code> blocks using Beautiful Soup.)</p>&#xA;&#xA;<p>If I had to worry about nested tables, however, my approach simply would not have worked!  I would have had to fall back on Beautiful Soup.  Even then, however, sometimes you can use a regular expression to grab the chunk you need, and then drill down from there.</p>&#xA;
  2576855 |    1 | <p>This relates to static constructors.  This is a method for performing static destruction (i.e. cleaning up resources when the program quits).</p>&#xA;&#xA;<p>First off the class:</p>&#xA;&#xA;<pre><code>class StaticDestructor&#xA;{&#xA;    /// &lt;summary&gt;&#xA;    /// The delegate that is invoked when the destructor is called.&#xA;    /// &lt;/summary&gt;&#xA;    public delegate void Handler();&#xA;    private Handler doDestroy;&#xA;&#xA;    /// &lt;summary&gt;&#xA;    /// Creates a new static destructor with the specified delegate to handle the destruction.&#xA;    /// &lt;/summary&gt;&#xA;    /// &lt;param name="method"&gt;The delegate that will handle destruction.&lt;/param&gt;&#xA;    public StaticDestructor(Handler method)&#xA;    {&#xA;        doDestroy = method;&#xA;    }&#xA;&#xA;    ~StaticDestructor()&#xA;    {&#xA;        doDestroy();&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Then as a member of the class you wish to have a "static destructor" do:</p>&#xA;&#xA;<pre><code>private static readonly StaticDestructor destructor = new StaticDestructor&#xA;(&#xA;    delegate()&#xA;    {&#xA;        //Cleanup here&#xA;    }&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>This will now be called when final garbage collection occurs.  This is useful if you absolutely need to free up certain resources.</p>&#xA;&#xA;<p>A quick and dirty program exhibiting this behavior:</p>&#xA;&#xA;<pre><code>using System;&#xA;&#xA;namespace TestStaticDestructor&#xA;{&#xA;    class StaticDestructor&#xA;    {&#xA;        public delegate void Handler();&#xA;        private Handler doDestroy;&#xA;&#xA;        public StaticDestructor(Handler method)&#xA;        {&#xA;            doDestroy = method;&#xA;        }&#xA;&#xA;        ~StaticDestructor()&#xA;        {&#xA;            doDestroy();&#xA;        }&#xA;    }&#xA;&#xA;    class SomeClass&#xA;    {&#xA;        static SomeClass()&#xA;        {&#xA;            Console.WriteLine("Statically constructed!");&#xA;        }&#xA;&#xA;        static readonly StaticDestructor destructor = new StaticDestructor(&#xA;            delegate()&#xA;            {&#xA;                Console.WriteLine("Statically destructed!");&#xA;            }&#xA;        );&#xA;    }&#xA;&#xA;    class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            SomeClass someClass = new SomeClass();&#xA;            someClass = null;&#xA;            System.Threading.Thread.Sleep(1000);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>When the program exits, the "static destructor" is called.</p>&#xA;
 12182723 |    1 | <pre><code>window.onunload = alert("Are you sure 2?");&#xA;</code></pre>&#xA;&#xA;<p>This is incorrect.  You are setting <code>onunload</code> to the result of <code>alert</code>, you need to set it to a function:</p>&#xA;&#xA;<pre><code>window.onunload = function(){&#xA;    alert("Are you sure?");&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>If you want to use jQuery, this will work in all browsers.</p>&#xA;&#xA;<pre><code>$(window).unload(function () {&#xA;     alert("Are you sure?");&#xA;});&#xA;</code></pre>&#xA;&#xA;<p><strong>NOTE</strong>: It might <em>seem</em> like it's not working in Chrome, but it is.  That's because Chrome blocks <code>alert</code>s in the <code>onunload</code> event.</p>&#xA;
   682504 |    1 | <p>I can't find a definitive answer for this. AFAIK, you can't have multiple <code>__init__</code> functions in a Python class. So what is a good way to solve this problem? </p>&#xA;&#xA;<p>Suppose I have an class called <code>Cheese</code> with the <code>number_of_holes</code> property. How can I have two ways of creating cheese-objects...</p>&#xA;&#xA;<ul>&#xA;<li>one that takes a number of holes like this: <code>parmesan = Cheese(num_holes = 15)</code></li>&#xA;<li>and one that takes no arguments and just randomizes the <code>number_of_holes</code> property: <code>gouda = Cheese()</code></li>&#xA;</ul>&#xA;&#xA;<p>I can think of only one way to do this, but that seems kinda clunky:</p>&#xA;&#xA;<pre><code>class Cheese():&#xA;    def __init__(self, num_holes = 0):&#xA;        if (num_holes == 0):&#xA;            # randomize number_of_holes&#xA;        else:&#xA;            number_of_holes = num_holes&#xA;</code></pre>&#xA;&#xA;<p>What do you say? Is there a better way?</p>&#xA;
   682546 |    1 | <p>Why do you think your solution is "clunky"? Personally I would prefer one constructor with default values over multiple overloaded constructors in situations like yours (Python does not support method overloading anyway):</p>&#xA;&#xA;<pre><code>def __init__(self, num_holes=None):&#xA;    if num_holes is None:&#xA;        # Construct a gouda&#xA;    else:&#xA;        # custom cheese&#xA;    # common initialization&#xA;</code></pre>&#xA;&#xA;<p>For really complex cases with lots of different constructors, it might be cleaner to use different factory functions instead:</p>&#xA;&#xA;<pre><code>@classmethod&#xA;def create_gouda(cls):&#xA;    c = Cheese()&#xA;    # ...&#xA;    return c&#xA;&#xA;@classmethod&#xA;def create_cheddar(cls):&#xA;    # ...&#xA;</code></pre>&#xA;&#xA;<p>In your cheese example you might want to use a Gouda subclass of Cheese though...</p>&#xA;
  3577654 |    1 | <p>Try <a href="http://simplehtmldom.sourceforge.net/"><strong>Simple HTML Dom Parser</strong></a></p>&#xA;&#xA;<ul>&#xA;<li>A HTML DOM parser written in PHP5+ let you manipulate HTML in a very easy way!</li>&#xA;<li>Require PHP 5+.</li>&#xA;<li>Supports invalid HTML.</li>&#xA;<li>Find tags on an HTML page with selectors just like jQuery.</li>&#xA;<li>Extract contents from HTML in a single line.</li>&#xA;<li><a href="http://sourceforge.net/projects/simplehtmldom/files/">Download</a></li>&#xA;</ul>&#xA;&#xA;<p><br />&#xA;<a href="http://simplehtmldom.sourceforge.net/manual.htm"><h2>Examples:</h2></a></p>&#xA;&#xA;<p><strong>How to get HTML elements:</strong></p>&#xA;&#xA;<pre><code>// Create DOM from URL or file&#xA;$html = file_get_html('http://www.example.com/');&#xA;&#xA;// Find all images &#xA;foreach($html-&gt;find('img') as $element) &#xA;       echo $element-&gt;src . '&lt;br&gt;';&#xA;&#xA;// Find all links &#xA;foreach($html-&gt;find('a') as $element) &#xA;       echo $element-&gt;href . '&lt;br&gt;';&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;<strong>How to modify HTML elements:</strong></p>&#xA;&#xA;<pre><code>// Create DOM from string&#xA;$html = str_get_html('&lt;div id="hello"&gt;Hello&lt;/div&gt;&lt;div id="world"&gt;World&lt;/div&gt;');&#xA;&#xA;$html-&gt;find('div', 1)-&gt;class = 'bar';&#xA;&#xA;$html-&gt;find('div[id=hello]', 0)-&gt;innertext = 'foo';&#xA;&#xA;echo $html;&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;<strong>Extract content from HTML:</strong></p>&#xA;&#xA;<pre><code>// Dump contents (without tags) from HTML&#xA;echo file_get_html('http://www.google.com/')-&gt;plaintext;&#xA;</code></pre>&#xA;&#xA;<p><br />&#xA;<strong>Scraping Slashdot:</strong></p>&#xA;&#xA;<pre><code>// Create DOM from URL&#xA;$html = file_get_html('http://slashdot.org/');&#xA;&#xA;// Find all article blocks&#xA;foreach($html-&gt;find('div.article') as $article) {&#xA;    $item['title']     = $article-&gt;find('div.title', 0)-&gt;plaintext;&#xA;    $item['intro']    = $article-&gt;find('div.intro', 0)-&gt;plaintext;&#xA;    $item['details'] = $article-&gt;find('div.details', 0)-&gt;plaintext;&#xA;    $articles[] = $item;&#xA;}&#xA;&#xA;print_r($articles);&#xA;</code></pre>&#xA;
  2623640 |    1 | <p>You can't instantiate a SqlDataReader like that as mentioned above.  Generally I see 2 levels of using blocks, but the inner one would be the command object, something like this:</p>&#xA;&#xA;<pre><code> using (var conn = new SqlConnection(...))&#xA; {&#xA;    conn.Open();&#xA;    using (var cmd = new SqlCommand(...))&#xA;    {&#xA;       var rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection);&#xA;    }&#xA; }&#xA;</code></pre>&#xA;
  3138257 |    1 | <p>Also useful, but not commonly used : <a href="http://msdn.microsoft.com/en-us/library/ms228973.aspx" rel="nofollow">Constrained Execution Regions</a>.</p>&#xA;&#xA;<p>A quote from BCL Team blog :</p>&#xA;&#xA;<blockquote>&#xA;  <p>Constrained execution regions (CER's)&#xA;  exist to help a developer write her&#xA;  code to maintain consistency.  The CLR&#xA;  doesn't guarantee that the developer's&#xA;  code is correct, but the CLR does&#xA;  hoist all of the runtime-induced&#xA;  failure points (ie, async exceptions)&#xA;  to either before the code runs, or&#xA;  after it has completed.  Combined with&#xA;  constraints on what the developer can&#xA;  put in a CER, these are a useful way&#xA;  of making strong guarantees about&#xA;  whether your code will execute.  CER's&#xA;  are eagerly prepared, meaning that&#xA;  when we see one, we will eagerly JIT&#xA;  any code found in its&#xA;  statically-discoverable call graph. &#xA;  If the CLR's host cares about stack&#xA;  overflow, we'll probe for some amount&#xA;  of stack space as well (though perhaps&#xA;  not enough stack space for any&#xA;  arbitrary method*).  We also delay&#xA;  thread aborts until the CER has&#xA;  finished running.</p>&#xA;</blockquote>&#xA;&#xA;<p>It can be useful when making edits to more than one field of a data structure in an atomic fashion. So it helps to have transactions on objects.</p>&#xA;&#xA;<p>Also <a href="http://msdn.microsoft.com/en-us/library/system.runtime.constrainedexecution.criticalfinalizerobject.aspx" rel="nofollow">CriticalFinalizerObject</a> seems to be hidden(at least who are not writing unsafe code).&#xA;A CriticalFinalizerObject guarantees that garbage collection will execute the finalizer. Upon allocation, the finalizer and its call graph are prepared in advance. </p>&#xA;
    33023 |    1 | <p>Using regions (or otherwise folding code) <strong>should</strong> have nothing to do with code smells (or hiding them) or any other idea of hiding code you don't want people to "easily" see.</p>&#xA;&#xA;<p>Regions and code folding is really all about providing a way to easily group sections of code that can be collapsed/folded/hidden to minimize the amount of extraneous "noise" around what you are currently working on. If you set things up correctly (meaning actually name your regions something useful, like the name of the method contained) then you can collapse everything except for the function you are currently editing and still maintain some level of context without having to actually see the other code lines.</p>&#xA;&#xA;<p>There probably should be some best practice type guidelines around these ideas, but I use regions extensively to provide a standard structure to my code files (I group events, class-wide fields, private properties/methods, public properties/methods). Each method or property also has a region, where the region name is the method/property name. If I have a bunch of overloaded methods, the region name is the full signature and then that entire group is wrapped in a region that is just the function name.</p>&#xA;
    71386 |    1 | <p>Brian has a great list: I'd add "Always mark single argument constructors explicit (except in those rare cases you want automatic casting)."</p>&#xA;
   102251 |    1 | <p>It is also important to remember that VB.NET projects, by default, have a root namespace that is part of the projectΓÇÖs properties. By default this root namespace will have the same name as the project. When using the Namespace block structure, Names are actually appended to that root namespace. For example: if the project is named MyProject, then we could declare a variable as: </p>&#xA;&#xA;<pre><code>Private obj As MyProject.MyNamespace.MyClass&#xA;</code></pre>&#xA;&#xA;<p>To change the root namespace, use the Project -> Properties menu option. The root namespace can be cleared as well, meaning that all Namespace blocks become the root level for the code they contain. </p>&#xA;
   468272 |    1 | <p><strong>Objects Should Never Be In An Invalid State</strong></p>&#xA;&#xA;<p>Unfortunately, so many of the ORM framework mandate zero-arg constructors for all entity classes, using setters to populate the member variables. In those cases, it's very difficult to know which setters must be called in order to construct a valid object.</p>&#xA;&#xA;<pre><code>MyClass c = new MyClass(); // Object in invalid state. Doesn't have an ID.&#xA;c.setId(12345); // Now object is valid.&#xA;</code></pre>&#xA;&#xA;<p>In my opinion, it should be <em>impossible</em> for an object to ever find itself in an invalid state, and the class's API should actively enforce its class invariants after every method call.</p>&#xA;&#xA;<p>Constructors and mutator methods should atomically transition an object from one valid state to another. This is much better:</p>&#xA;&#xA;<pre><code>MyClass c = new MyClass(12345); // Object starts out valid. Stays valid.&#xA;</code></pre>&#xA;&#xA;<p>As the consumer of some library, it's a huuuuuuge pain to keep track of whether all the right setters have been invoked before attempting to use an object, since the documentation usually provides no clues about the class's contract.</p>&#xA;
 23987617 |    1 | <p>I have a JUnit test class, which I'm new to making. I also trying to learn how to make my own exception classes. I have been creating a BigInt class, and one of the constructors takes in Strings. This bit of code is looping through an array, and its supposed to be checking if the character at each position is an integer. Right now there is an error that says "Unreachable catch block for BigIntFormatException. This exception is never thrown from the try statement body" Any ideas for why? </p>&#xA;&#xA;<pre><code>    String[] s = { " - - 1424", "+ + 14324", "a142432", "1432 3413",&#xA;            "+242134.32421", "", "    \n", "\t ++" };&#xA;    for (int i = 0; i &lt; s.length; i++) {&#xA;        try {&#xA;            BigInt b = new BigInt(s[i]);&#xA;            assertFalse(true);&#xA;        } catch (BigIntFormatException e) {&#xA;            assertTrue(true);&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>So far this is what my BigIntFormatException class just looks like, so any help with this part would be appreciated too.</p>&#xA;&#xA;<pre><code>public class BigIntFormatException extends Exception {&#xA;    public BigIntFormatException() {&#xA;        super();&#xA;    }&#xA;    public BigIntFormatException(String message) {&#xA;        super(message);&#xA;    }&#xA;}&#xA;</code></pre>&#xA;
     3294 |    1 | <p>Static methods are not <em>instantiated</em> as such, they're just available without an object reference.</p>&#xD;&#xA;&#xD;&#xA;<p>A call to a static method is done through the class name, not through an object reference, and the IL code to call it will call the abstract method through the name of the class that defined it, not necessarily the name of the class you used.</p>&#xD;&#xA;&#xD;&#xA;<p>Let me show an example.</p>&#xD;&#xA;&#xD;&#xA;<p>With the following code:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>public class A<br>{<br>    public static void Test()<br>    {<br>    }<br>}<br><br>public class B : A<br>{<br>}<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>If you call B.Test, like this:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>class Program<br>{<br>    static void Main(string[] args)<br>    {<br>        B.Test();<br>    }<br>}<br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>Then the actual code inside the Main method is as follows:</p>&#xD;&#xA;&#xD;&#xA;<pre><code>.entrypoint<br>.maxstack 8<br>L0000: nop <br>L0001: call void ConsoleApplication1.A::Test()<br>L0006: nop <br>L0007: ret <br></code></pre>&#xD;&#xA;&#xD;&#xA;<p>As you can see, the call is made to A.Test, because it was the A class that defined it, and not to B.Test, even though you can write the code that way.</p>&#xD;&#xA;&#xD;&#xA;<p>If you had <em>class types</em>, like in Delphi, where you can make a variable referring to a type and not an object, you would have more use for virtual and thus abstract static methods (and also constructors), but they aren't available and thus static calls are non-virtual in .NET.</p>&#xD;&#xA;&#xD;&#xA;<p>I realize that the IL designers could allow the code to be compiled to call B.Test, and resolve the call at runtime, but it still wouldn't be virtual, as you would still have to write some kind of class name there.</p>&#xD;&#xA;&#xD;&#xA;<p>Virtual methods, and thus abstract ones, are only useful when you're using a variable which, at runtime, can contain many different types of objects, and you thus want to call the right method for the current object you have in the variable. With static methods you need to go through a class name anyway, so the exact method to call is known at compile time because it can't and won't change.</p>&#xD;&#xA;&#xD;&#xA;<p>Thus, virtual/abstract static methods are not available in .NET.</p>
 26849599 |    1 | <p>An alternative to packed bitmaps and wheels - but equally efficient in certain contexts - is storing the differences between consecutive primes. If you leave out the number 2 as usual then all differences are even. Storing difference/2 you can get up to 2^40ish regions (just before 1999066711391) using byte-sized variables. </p>&#xA;&#xA;<p>The primes up 2^32 require only 194 MByte, compared to 256 MByte for an odds-only packed bitmap. Iterating over delta-stored primes is much faster than for wheeled storage, which includes the modulo-2 wheel known as odds-only bitmap. </p>&#xA;&#xA;<p>For ranges from 1999066711391 onwards, bigger cell size or variable-length storage are needed. The latter can be extremely efficient even if very simple schemes are used (e.g. keep adding until a byte &lt; 255 has been added, like in <a href="http://en.wikipedia.org/wiki/LZ4_%28compression_algorithm%29" rel="nofollow">LZ4</a>-style compression), because of the extremely low frequency of gaps longer than 510/2.</p>&#xA;&#xA;<p>For efficiency's sake it is best to divide the range into sections (pages) and manage them B-Tree style.</p>&#xA;&#xA;<p>Entropy-coding the differences (Huffmann or arithmetic coding) cuts permanent storage requirements to a bit less than half, which is close to the theoretical optimum and better than lists or wheels compressed using the best available packers. </p>&#xA;&#xA;<p>If the data is stored uncompressed then it is still much more compact than files of binary or textual numbers, by an order of magnitude or more. With a B-Tree style index in place it is easy to simply map sections into memory as needed and iterate over them at blazing speed.</p>&#xA;
   636785 |    1 | <p><strong>Update:</strong> <em>Final edit.</em> Switched to STRICT DTD, removed italic to match the image in the question, and reverted back to full colour names for ids to show intent as per OPs comment on question, and sorted the main column of id names in the css into the order they appear in the html.</p>&#xA;&#xA;<p>I also opted not to reused the outer div as the white 7 square (it didn't have it's own div in <a href="http://stackoverflow.com/revisions/viewmarkup/850725">previous edits</a>), as it wouldn't have been practical if you wanted to use the layout, and felt a little like cheating (although from a brevity/pixel perfect standpoint I liked the cheekiness of it).</p>&#xA;&#xA;<p>View here: <a href="http://jsbin.com/efidi">http://jsbin.com/efidi</a><br />&#xA;Edit here: <a href="http://jsbin.com/efidi/edit">http://jsbin.com/efidi/edit</a><br />&#xA;<a href="http://validator.w3.org/check?verbose=1&amp;uri=http%3A%2F%2Fjsbin.com%2Fefidi">Validates as XHTML strict</a></p>&#xA;&#xA;<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"&#xA;  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;&#xA;&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;&#xA;&lt;head&gt;&lt;title&gt;The Challenge&lt;/title&gt;&#xA;&lt;style type="text/css"&gt;&#xA;div     { text-align: center; width:175px; height:175px; line-height: 35px;}&#xA;div div {         float:left; width: 35px; height: 35px;}&#xA;#orange, #maroon,&#xA;#blue  , #green  {float:right;}&#xA;&#xA;#orange, #silver {background-color:silver;  width:140px;}&#xA;#navy  , #maroon {background-color:maroon; height:140px; line-height:140px;}&#xA;         #navy   {background-color:navy  ;}&#xA;#green , #red    {background-color:red   ;  width: 70px;}&#xA;#yellow, #blue   {background-color:blue  ; height: 70px; line-height: 70px;}&#xA;         #yellow {background-color:yellow;}&#xA;         #white  {background-color:white ;}&#xA;         #green  {background-color:green ;}&#xA;         #orange {background-color:orange;}&#xA;&lt;/style&gt; &#xA;&lt;/head&gt; &#xA;&lt;body&gt; &#xA;  &lt;div&gt; &#xA;    &lt;div id="silver"&gt;1&lt;/div&gt; &#xA;    &lt;div id="maroon"&gt;2&lt;/div&gt; &#xA;    &lt;div id="navy"  &gt;3&lt;/div&gt; &#xA;    &lt;div id="red"   &gt;4&lt;/div&gt; &#xA;    &lt;div id="blue"  &gt;5&lt;/div&gt; &#xA;    &lt;div id="yellow"&gt;6&lt;/div&gt; &#xA;    &lt;div id="white" &gt;7&lt;/div&gt;&#xA;    &lt;div id="green" &gt;8&lt;/div&gt; &#xA;    &lt;div id="orange"&gt;9&lt;/div&gt; &#xA;  &lt;/div&gt;&#xA;&lt;/body&gt;&lt;/html&gt;&#xA;</code></pre>&#xA;&#xA;<p>Aside: I would perhaps put a little more whitespace in if I could, but this is at the limit before the code blocks here on SO starts getting scrollbars and I opted to have it all appear on screen.</p>&#xA;&#xA;<p>Note: I borrowed the <code>line-height</code> fix from <a href="http://stackoverflow.com/questions/636712/how-would-you-do-this-with-css/636780#636780">Tyson</a> (who was first to get a correctly rendering answer).</p>&#xA;
  3125367 |    1 | <p>From the <a href="http://www.faqs.org/faqs/compilers/faq/">comp.compilers FAQ</a>:</p>&#xA;&#xA;<p>"Programming a Personal Computer" by Per Brinch Hansen&#xA;Prentice-Hall 1982 ISBN 0-13-730283-5</p>&#xA;&#xA;<p>This unfortunately-titled book&#xA;explains the design and creation of a single-user programming environment&#xA;for micros, using a Pascal-like language called Edison.  The author presents&#xA;all source code and explanations for the step-by-step implementation of an&#xA;Edison compiler and simple supporting operating system, all written in&#xA;Edison itself (except for a small supporting kernel written in a symbolic&#xA;assembler for PDP 11/23; the complete source can also be ordered for the IBM&#xA;PC).</p>&#xA;&#xA;<p>The most interesting things about this book are:  1) its ability to&#xA;demonstrate how to create a complete, self-contained, self-maintaining,&#xA;useful compiler and operating system, and 2) the interesting discussion of&#xA;language design and specification problems and trade-offs in Chapter 2.</p>&#xA;&#xA;<p>"Brinch Hansen on Pascal Compilers" by Per Brinch Hansen&#xA;Prentice-Hall 1985 ISBN 0-13-083098-4</p>&#xA;&#xA;<p>Another light-on-theory&#xA;heavy-on-pragmatics here's-how-to-code-it book.  The author presents the&#xA;design, implementation, and complete source code for a compiler and p-code&#xA;interpreter for Pascal- (Pascal "minus"), a Pascal subset with boolean and&#xA;integer types (but no characters, reals, subranged or enumerated types),&#xA;constant and variable definitions and array and record types (but no packed,&#xA;variant, set, pointer, nameless, renamed, or file types), expressions,&#xA;assignment statements, nested procedure definitions with value and variable&#xA;parameters, if statements, while statements, and begin-end blocks (but no&#xA;function definitions, procedural parameters, goto statements and labels,&#xA;case statements, repeat statements, for statements, and with statements).</p>&#xA;&#xA;<p>The compiler and interpreter are written in Pascal* (Pascal "star"), a&#xA;Pascal subset extended with some Edison-style features for creating&#xA;software development systems.  A Pascal* compiler for the IBM PC is sold by&#xA;the author, but it's easy to port the book's Pascal- compiler to any&#xA;convenient Pascal platform.</p>&#xA;&#xA;<p>This book makes the design and implementation of a compiler look easy.  I&#xA;particularly like the way the author is concerned with quality,&#xA;reliability, and testing.  The compiler and interpreter can easily be used&#xA;as the basis for a more involved language or compiler project, especially&#xA;if you're pressed to quickly get something up and running. </p>&#xA;
 23989129 |    1 | <p>I have a singleton A which I am going to use throughout class B, so it does not make that much sense do A::getInstance() in multiple methods rather than trying to store a reference A&amp; ref_ to this singleton and then just call the methods of ref_. The problem is: how do I get and store A&amp; ref_, when all constructors, copy constructors, copy assignment operators are private? How would I solve this?</p>&#xA;&#xA;<p>--Daniel.</p>&#xA;
   185283 |    1 | <p>Another use occurred to me today, so i searched the web excitedly and found an existing mention of it: <a href="http://web.archive.org/web/20090111183416/http://www.hedgerwow.com/360/dhtml/js_block_scope.html">Defining Variables inside Block Scope</a>.</p>&#xA;&#xA;<h3>Background</h3>&#xA;&#xA;<p>JavaScript, in spite of its superficial resemblance to C and C++, does not scope variables to the block they are defined in:</p>&#xA;&#xA;<pre><code>var name = "Joe";&#xA;if ( true )&#xA;{&#xA;   var name = "Jack";&#xA;}&#xA;// name now contains "Jack"&#xA;</code></pre>&#xA;&#xA;<p>Declaring a closure in a loop is a common task where this can lead to errors:</p>&#xA;&#xA;<pre><code>for (var i=0; i&lt;3; ++i)&#xA;{&#xA;   var num = i;&#xA;   setTimeout(function() { alert(num); }, 10);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Because the for loop does not introduce a new scope, the same <code>num</code> - with a value of <code>2</code> - will be shared by all three functions. </p>&#xA;&#xA;<h3>A new scope: <code>let</code> and <code>with</code></h3>&#xA;&#xA;<p>With the introduction of the <code>let</code> statement in <a href="http://developer.mozilla.org/En/New_in_JavaScript_1.7#Block_scope_with_let">JavaScript 1.7</a>, it becomes easy to introduce a new scope when necessary to avoid these problems:</p>&#xA;&#xA;<pre><code>for (var i=0; i&lt;3; ++i)&#xA;{&#xA;   // variables introduced in this statement &#xA;   // are scoped to the block following it.&#xA;   let (num = i) &#xA;   {&#xA;      setTimeout(function() { alert(num); }, 10);&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But until other browsers implement it, this will remain limited to Mozilla-targeted code. However, we can easily simulate this behavior using <code>with</code>:</p>&#xA;&#xA;<pre><code>for (var i=0; i&lt;3; ++i)&#xA;{&#xA;   // object members introduced in this statement &#xA;   // are scoped to the block following it.&#xA;   with ({num: i})&#xA;   {&#xA;      setTimeout(function() { alert(num); }, 10);&#xA;   }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>The loop now works as intended, creating three separate variables with values from 0 to 2. Note that variables declared <em>within</em> the block are not scoped to it - this is identical to the behavior of <code>let</code>, but unlike the behavior of blocks in C++ (in C, variables must be declared at the start of a block, so in a way it is similar). </p>&#xA;
  5132612 |    1 | <p>You need to read Jacques Garrigue's "Code reuse with polymorphic variants":</p>&#xA;&#xA;<p><a href="http://www.math.nagoya-u.ac.jp/~garrigue/papers/fose2000.html">http://www.math.nagoya-u.ac.jp/~garrigue/papers/fose2000.html</a></p>&#xA;&#xA;<p>The problem with polymorphic variants is that they are so flexible that type inference cannot help you a lot with errors in polymorphic variants code. For example, if you mistype one constructor name, the compiler won't be able to flag an error, it will only infer a slightly different types with the usual constructors, plus the misspelled one. Errors will only be spotted later, when you try to combine the faulty code with a function with strict assumptions on the variants (closed pattern matching), with an unwieldy error message.</p>&#xA;&#xA;<p>My advice for polymorphic variant users is to massively use annotations to control type-checking : every time you take a polymorphic variant as input, or output one, the function should be annotated with a precise type for the variant part. This will shield you from most inference issues, and force you to build an expressive set of type definitions that can be composed and help reasoning about your program.</p>&#xA;
  1628870 |    1 | <p>Well, C# is a strange beast when it comes to the performance part of struct vs classes. </p>&#xA;&#xA;<p>Check this link: <a href="http://msdn.microsoft.com/en-us/library/y23b5415%28VS.71%29.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/y23b5415%28VS.71%29.aspx</a></p>&#xA;&#xA;<p>According to Microsoft you should use a struct only when the instance size is under 16 bytes. Andrew is right. If you do not pass around a struct, you might see a performance benefit. Value type semantics have a heavy performance (and at time memory, depending on what you are doing) penalty while passing them around.</p>&#xA;&#xA;<p>As far as collections are concerned, if you are using a non-generic collection, the boxing and unboxing of a value-type (struct in this case) will have a higher performance overhead than a reference type (i.e. class). That said, it is also true that structs get allocated faster than classes.</p>&#xA;&#xA;<p>Although struct and class have same syntax, the behavior is vastly different. This can force you to make many errors that might be difficult to trace. For example, like static constructors in a struct would not be called when you call it's public (hidden constructor) or as operator will fail with structs.</p>&#xA;&#xA;<p>Nullable types are themselves are implemented with structs. But they do have a penalty. Even every operation of a Nullable type emit more IL.</p>&#xA;&#xA;<p>Well, in my opinion, struct are well left to be used in types such as DateTime or Guids. If you need an immutable type, use struct otherwise, don't. The performance benefits are not that huge. Similarly even the overhead is not that huge. So at the end of day, it depends on your data you are storing in the struct and also how you are using it.</p>&#xA;
  3693699 |    1 | <h3>Overview</h3>&#xA;&#xA;<p>At a high level, the pattern matches any one character <code>.</code>, but additionally performs a <code>grab$2</code> action, which captures the reversal "mate" of the character that was matched into group 2. This capture is done by building a suffix of the input string whose length matches the length of the prefix up to the current position. We do this by applying <code>assertSuffix</code> on a pattern that grows the suffix by one character, repeating this once <code>forEachDotBehind</code>. Group 1 captures this suffix. The first character of that suffix, captured in group 2, is the reversal "mate" for the character that was matched.</p>&#xA;&#xA;<p>Thus, replacing each matched character with its "mate" has the effect of reversing a string.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h3>How it works: a simpler example</h3>&#xA;&#xA;<p>To better understand how the regex pattern works, let's first apply it on a simpler input. Also, for our replacement pattern, we'll just "dump" out all the captured strings so we get a better idea of what's going on. Here's a Java version:</p>&#xA;&#xA;<pre><code>System.out.println(&#xA;    "123456789"&#xA;        .replaceAll(REVERSE, "[$0; $1; $2]\n")&#xA;);&#xA;</code></pre>&#xA;&#xA;<p>The above prints (<a href="http://ideone.com/V91bg">as seen on ideone.com</a>):</p>&#xA;&#xA;<pre><code>[1; 9; 9]&#xA;[2; 89; 8]&#xA;[3; 789; 7]&#xA;[4; 6789; 6]&#xA;[5; 56789; 5]&#xA;[6; 456789; 4]&#xA;[7; 3456789; 3]&#xA;[8; 23456789; 2]&#xA;[9; 123456789; 1]&#xA;</code></pre>&#xA;&#xA;<p>Thus, e.g. <code>[3; 789; 7]</code> means that the dot matched <code>3</code> (captured in group 0), the corresponding suffix is <code>789</code> (group 1), whose first character is <code>7</code> (group 2). Note that <code>7</code> is <code>3</code>'s "mate".</p>&#xA;&#xA;<pre><code>                   current position after&#xA;                      the dot matched 3&#xA;                              Γåô        ________&#xA;                      1  2 [3] 4  5  6 (7) 8  9&#xA;                      \______/         \______/&#xA;                       3 dots        corresponding&#xA;                       behind      suffix of length 3&#xA;</code></pre>&#xA;&#xA;<p>Note that a character's "mate" may be to its right or left. A character may even be its own "mate".</p>&#xA;&#xA;<hr>&#xA;&#xA;<h3>How the suffix is built: nested reference</h3>&#xA;&#xA;<p>The pattern responsible for matching and building the growing suffix is the following:</p>&#xA;&#xA;<pre><code>    ((.) \1?)&#xA;    |\_/    |&#xA;    | 2     |       "suffix := (.) + suffix&#xA;    |_______|                    or just (.) if there's no suffix"&#xA;        1&#xA;</code></pre>&#xA;&#xA;<p>Note that within the definition of group 1 is a reference to itself (with <code>\1</code>), though it is optional (with <code>?</code>). The optional part provides the "base case", a way for the group to match without the reference to itself. This is required because an attempt to match a group reference always fails when the group hasn't captured anything yet.</p>&#xA;&#xA;<p>Once group 1 captures something, the optional part is never exercised in our setup, since the suffix that we just captured last time will still be there this time, and we can always prepend another character to the beginning of this suffix with <code>(.)</code>. This prepended character is captured into group 2.</p>&#xA;&#xA;<p>Thus this pattern attempts to grow the suffix by one dot. Repeating this once <code>forEachDotBehind</code> will therefore results in a suffix whose length is exactly the length of the prefix up to our current position.</p>&#xA;&#xA;<hr>&#xA;&#xA;<h3>How <code>assertSuffix</code> and <code>forEachDotBehind</code> work: meta-pattern abstractions</h3>&#xA;&#xA;<p>Note that so far we've treated <code>assertSuffix</code> and <code>forEachDotBehind</code> as blackboxes. In fact, leaving this discussion for last is a deliberate act: the names and the brief documentation suggest <em>WHAT</em> they do, and this was enough information for us to write and read our <code>REVERSE</code> pattern!</p>&#xA;&#xA;<p>Upon closer inspection, we see that the Java and C# implementations of these abstractions slightly differ. This is due to the differences between the two regex engines.</p>&#xA;&#xA;<p>The .NET regex engine allows full regular expression in a lookbehind, so these meta-patterns look a lot more natural in that flavor.</p>&#xA;&#xA;<ul>&#xA;<li><code>AssertSuffix(pattern) := (?=.*$(?&lt;=pattern))</code>, i.e. we use a lookahead to go all the way to the end of the string, then use a nested lookbehind to match the pattern against a suffix.</li>&#xA;<li><code>ForEachDotBehind(assertion) := (?&lt;=(?:.assertion)*)</code>, i.e. we simply match <code>.*</code> in a lookbehind, tagging the assertion along with the dot inside a non-capturing group.</li>&#xA;</ul>&#xA;&#xA;<p>Since Java's doesn't officially support infinite-length lookbehind (but it works anyway under certain circumstances), its counterpart is a bit more awkward:</p>&#xA;&#xA;<ul>&#xA;<li><code>assertSuffix(pattern) := (?&lt;=(?=^.*?pattern$).*)</code>, i.e. we use a lookbehind to go all the way to the <em>beginning</em> of the string, then use a nested lookahead to match the <em>entire string</em>, prepending the suffix pattern with <code>.*?</code> to reluctantly match some irrelevant prefix.</li>&#xA;<li><code>forEachDotBehind(assertion) := (?&lt;=^(?:.assertion)*?)</code>, i.e. we use an anchored lookbehind with reluctant repetition, i.e. <code>^.*?</code> (and likewise tagging the assertion along with the dot inside a non-capturing group).</li>&#xA;</ul>&#xA;&#xA;<p>It should be noted that while the C# implementation of these meta-patterns doesn't work in Java, <em>the Java implementation DOES work in C#</em> (<a href="http://ideone.com/PeUfn">see on ideone.com</a>). Thus, there is no actual need to have different implementations for C# and Java, but the C# implementation deliberately took advantage of the more powerful .NET regex engine lookbehind support to express the patterns more naturally.</p>&#xA;&#xA;<p>We have thus shown the benefits of using meta-pattern abstractions:</p>&#xA;&#xA;<ul>&#xA;<li>We can independently develop, examine, test, optimize, etc. these meta-patterns implementations, perhaps taking advantage of flavor-specific features for extra performance and/or readability.</li>&#xA;<li>Once these building blocks are developed and well-tested, we can simply use them as parts of a bigger pattern, which allows us to express ideas at higher levels for more readable, more maintainable, more portable solutions.</li>&#xA;<li>Meta-patterns promote reuse, and programmatic generation means there's less duplication</li>&#xA;</ul>&#xA;&#xA;<p>While this particular manifestation of the concept is rather primitive, it's also possible to take this further and develop a more robust programmatic pattern generation framework, with a library of well-tested and optimized meta-patterns.</p>&#xA;&#xA;<h3>See also</h3>&#xA;&#xA;<ul>&#xA;<li><a href="http://martinfowler.com/bliki/ComposedRegex.html">Martin Fowler - Composed Regex</a></li>&#xA;<li><a href="http://msdn.microsoft.com/en-us/library/bs2twtah.aspx#balancing_group_definition">.NET regular expressions - Balancing group definition</a> - a great example of a meta-pattern!</li>&#xA;</ul>&#xA;&#xA;<hr>&#xA;&#xA;<h3>Closing thoughts</h3>&#xA;&#xA;<p>It needs to be reiterated that reversing a string with regex is <em>NOT</em> a good idea in practice. It's way more complicated than necessary, and the performance is quite poor.</p>&#xA;&#xA;<p>That said, this article shows that it <em>CAN</em> in fact be done, and that when expressed at higher levels using meta-pattern abstractions, the solution is in fact quite readable. As a key component of the solution, the nested reference is showcased once again in what is hopefully another engaging example.</p>&#xA;&#xA;<p>Less tangibly, perhaps the article also shows the determination required to solve a problem that may seem difficult (or even "impossible") at first. Perhaps it also shows the clarity of thought that comes with a deeper understanding of a subject matter, a result of numerous studies and hard work.</p>&#xA;&#xA;<p>No doubt regex can be an intimidating subject, and certainly it's not designed to solve all of your problems. This is no excuse for hateful ignorance, however, and this is one surprisingly deep well of knowledge if you're willing to learn.</p>&#xA;
 14361308 |    1 | <p>I've noticed that the Razor <code>&lt;text&gt;</code> tag refuses to follow any formatting conventions. For example, when formatting a <code>cshtml</code> document, I end up with code like the following:</p>&#xA;&#xA;<pre><code>@MyHelper.MyMethod(@&lt;div&gt;&#xA;    &lt;p&gt;Hello world&lt;/p&gt;&#xA;&lt;/div&gt;)&#xA;&#xA;@MyHelper.MyMethod(@&lt;text&gt;&#xA;&lt;p&gt;Hello world&lt;/p&gt;&#xA;&lt;/text&gt;)&#xA;</code></pre>&#xA;&#xA;<p><sub>Note that this isn't specific to Razor template functions either, <code>&lt;text&gt;</code> blocks anywhere will do the same thing.</sub></p>&#xA;&#xA;<p>The client HTML tags (<em>and their contents</em>) such as <code>&lt;div&gt;</code> follow the formatting style I've specified, however regardless of where I add (<em>or remove</em>) the <code>&lt;text&gt;</code> element in the <kbd>Tag Specific Options...</kbd>, there is no effect. The desired result would be that the <code>&lt;text&gt;</code> element contents be formatted like the <code>&lt;div&gt;</code> element contents, in the previous example.</p>&#xA;&#xA;<p>Are there any tricks, or work-arounds to enforcing the same formatting style on <code>&lt;text&gt;</code> elements as that of other block-level client HTML elements (<em><code>&lt;div&gt;</code>, <code>&lt;section&gt;</code>, etc.</em>)</p>&#xA;&#xA;<p>I've seen other such formatting issues with the Razor language, such as <a href="http://stackoverflow.com/questions/8269660/how-can-i-make-code-indentation-behave-correctly-in-vbhtml-razor-files">here</a> and <a href="http://stackoverflow.com/questions/6902204/why-doesnt-visual-studio-code-formatting-work-properly-for-razor-markup">here</a>, so this isn't without precedent and it seems likely there may be no solution. Either way, maybe someone has come across a fix.</p>&#xA;&#xA;<p><sub>It's a Razor 2.X website, building in VS 2010</sub></p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>Addendum</strong><br>&#xA;<sup>(<em>I've grown weary of this.</em>)</sup></p>&#xA;&#xA;<p>Perhaps this issue has been solved in 2012; don't know, haven't updated. However, <code>&lt;text&gt;</code> blocks, <code>@</code>-prefixed blocks, and more do not format well.</p>&#xA;&#xA;<p>Another example, this time the <code>@</code>-prefixed blocks (<em>constructs and such</em>)</p>&#xA;&#xA;<pre><code>@foreach (var foo in bar) {&#xA;    &lt;div&gt;@(foo.A)&lt;/div&gt;&#xA;    &lt;div&gt;@(foo.B)&lt;/div&gt;&#xA;    @foreach (var qux in foo.C) {&#xA;        &lt;div&gt;@(qux.D)&lt;/div&gt;&#xA;        &lt;div&gt;@(qux.E)&lt;/div&gt;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Looks more or less fine, right? Yea, unfortunately it's actually syntactically invalid. The <code>@</code>-prefix on the inner <code>foreach</code> is not permitted, as it occurs within the uninterrupted scope of an outer block (<em>the outer <code>foreach</code></em>).</p>&#xA;&#xA;<p>The solution? Omit the <code>@</code> from the inner <code>foreach</code>. What happens when I format?</p>&#xA;&#xA;<pre><code>@foreach (var foo in bar) {&#xA;    &lt;div&gt;@(foo.A)&lt;/div&gt;&#xA;    &lt;div&gt;@(foo.B)&lt;/div&gt;&#xA;    foreach (var qux in foo.C) {&#xA;    &lt;div&gt;@(qux.D)&lt;/div&gt;&#xA;    &lt;div&gt;@(qux.E)&lt;/div&gt;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Awesome, lost the inner indentation. Poo.</p>&#xA;&#xA;<p>Ok, how about those <code>&lt;text&gt;</code> blocks, they must be useful for something, right? Sure, wrap the contents of the outer <code>foreach</code> block in a <code>&lt;text&gt;</code> block. Now, as far as Razor is concerned, <code>@</code>-prefixing the inner <code>foreach</code> is syntactically valid.</p>&#xA;&#xA;<pre><code>@foreach (var foo in bar) {&#xA;    &lt;text&gt;&#xA;    &lt;div&gt;@(foo.A)&lt;/div&gt;&#xA;    &lt;div&gt;@(foo.B)&lt;/div&gt;&#xA;    @foreach (var qux in foo.C) {&#xA;        &lt;div&gt;@(qux.D)&lt;/div&gt;&#xA;        &lt;div&gt;@(qux.E)&lt;/div&gt;&#xA;    }&#xA;    &lt;/text&gt;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Ok, <em>fine</em>; however, while this works it does exemplify my original question's issue. <em>Now the <code>&lt;text&gt;</code> block contents aren't adhering to indentation</em>. Why can't we just have:</p>&#xA;&#xA;<pre><code>@foreach (var foo in bar) {&#xA;    &lt;text&gt;&#xA;        &lt;div&gt;@(foo.A)&lt;/div&gt;&#xA;        &lt;div&gt;@(foo.B)&lt;/div&gt;&#xA;        @foreach (var qux in foo.C) {&#xA;            &lt;div&gt;@(qux.D)&lt;/div&gt;&#xA;            &lt;div&gt;@(qux.E)&lt;/div&gt;&#xA;        }&#xA;    &lt;/text&gt;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Or better yet, screw the <code>&lt;text&gt;</code> block and permit <code>@</code>-prefixed constructs within the scope of others:</p>&#xA;&#xA;<pre><code>@foreach (var foo in bar) {&#xA;    &lt;div&gt;@(foo.A)&lt;/div&gt;&#xA;    &lt;div&gt;@(foo.B)&lt;/div&gt;&#xA;    @foreach (var qux in foo.C) {&#xA;        &lt;div&gt;@(qux.D)&lt;/div&gt;&#xA;        &lt;div&gt;@(qux.E)&lt;/div&gt;&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>tl;dr</strong></p>&#xA;&#xA;<p>Call me anal, call me insane. Doesn't matter; so far as I can tell, this product is not working correctly, regardless of my formatting settings.</p>&#xA;&#xA;<p><strong>Does anyone know how to force VS 2010 Razor formatting to behave as described? (<em>or, is this just some pipe-dream for my OCD?</em>)</strong></p>&#xA;
  1744828 |    1 | <p>There's several reasons in C++.</p>&#xA;&#xA;<p>First, it's frequently hard to see where exceptions are coming from (since they can be thrown from almost anything) and so the catch block is something of a COME FROM statement.  It's worse than a GO TO, since in a GO TO you know where you're coming from (the statement, not some random function call) and where you're going (the label).  They're basically a potentially resource-safe version of C's setjmp() and longjmp(), and nobody wants to use those.</p>&#xA;&#xA;<p>Second, C++ doesn't have garbage collection built in, so C++ classes that own resources get rid of them in their destructors.  Therefore, in C++ exception handling the system has to run all the destructors in scope.  In languages with GC and no real constructors, like Java, throwing exceptions is a lot less burdensome.</p>&#xA;&#xA;<p>Third, the C++ community, including Bjarne Stroustrup and the Standards Committee and various compiler writers, has been assuming that exceptions should be exceptional.  In general, it's not worth going against language culture.  The implementations are based on the assumption that exceptions will be rare.  The better books treat exceptions as exceptional.  Good source code uses few exceptions.  Good C++ developers treat exceptions as exceptional.  To go against that, you'd want a good reason, and all the reasons I see are on the side of keeping them exceptional.</p>&#xA;
   528594 |    1 | <p>The reason WHY it works is because XOR doesn't lose information. You could do the same thing with ordinary addition and subtraction if you could ignore overflow. For example, if the variable pair A,B originally contains the values 1,2, you could swap them like this:</p>&#xA;&#xA;<pre><code> // A,B  = 1,2&#xA;A = A+B // 3,2&#xA;B = A-B // 3,1&#xA;A = A-B // 2,1&#xA;</code></pre>&#xA;&#xA;<p>BTW there's an old trick for encoding a 2-way linked list in a single "pointer".&#xA;Suppose you have a list of memory blocks at addresses A, B, and C. The first word in each block is , respectively:</p>&#xA;&#xA;<pre><code> // first word of each block is sum of addresses of prior and next block&#xA; 0 + &amp;B   // first word of block A&#xA;&amp;A + &amp;C   // first word of block B&#xA;&amp;B + 0    // first word of block C&#xA;</code></pre>&#xA;&#xA;<p>If you have access to block A, it gives you the address of B. To get to C, you take the "pointer" in B and subtract A, and so on. It works just as well backwards. To run along the list, you need to keep pointers to two consecutive blocks. Of course you would use XOR in place of addition/subtration, so you wouldn't have to worry about overflow.</p>&#xA;&#xA;<p>You could extend this to a "linked web" if you wanted to have some fun.</p>&#xA;
   444995 |    1 | <p>First, I think you already considered using an ORM vs. rolling your own. I won't go into this one.</p>&#xA;&#xA;<p>My thoughts on rolling your own data access code:</p>&#xA;&#xA;<ul>&#xA;<li>Over time, I found it easier not to have separate DAL/BL objects, but rather merge them into a single object (some time later after reaching this conclusion I found out it's a pretty well known pattern - namely ActiveRecord). It might look nice and decoupled to have separate DAL assemblies, but the overhead in maintenance costs will add up. Everytime you add a new feature, you'll have to create more code/modify more classes. In my experience, the team that maintains the application is often way less than the original team of developers that built it, and they'll hate the extra work required.</li>&#xA;<li>For large teams, it might make sense to separate the DAL (and let a group work on it while the others. But this makes a good incentive for code bloat.</li>&#xA;<li>Coming down to your specific sample: how do you use the resulting DataTable? Iterate the rows, create typed objects and get the data from the row? If the answer is yes, think of the extra DataTable you created just for moving data between the DAL and the BL. Why not take it directly from the DataReader?</li>&#xA;<li>Also about the sample: if you return an untyped DataTable, then I guess you have to use the column names (of the result set the SP call returns) way up in the calling code. This means if I have to change something in the database, it might affect both layers.</li>&#xA;</ul>&#xA;&#xA;<p>My suggestion (I tried both methods - the suggestion is the latest working approach I came up with - it sort of evolved over time).</p>&#xA;&#xA;<ul>&#xA;<li>Make a base class for your typed business objects.</li>&#xA;<li>Keep object state in the base class (new, modified etc.)</li>&#xA;<li>Put the main data access methods in this class, as static methods. With a little effort (hint: generic methods + Activator.CreateInstance) you can create one business object per each row returned in the reader.</li>&#xA;<li>make an abstract method in the business object for parsing the row data (directly from the DataReader!) and fill the object.</li>&#xA;<li>make static methods in the derived business objects that prepare the stored proc parameters (depending on various filter criteria) and call the generic data access methods from the base class.</li>&#xA;</ul>&#xA;&#xA;<p>The aim is to end up with usage such as:</p>&#xA;&#xA;<pre><code>List&lt;MyObject&gt; objects = MyObject.FindMyObject(string someParam);&#xA;</code></pre>&#xA;&#xA;<p>The benefit for me was that I only have to change one file in order to cope with changes in the database column names, types etc. (small changes in general). With some well thought regions, you can organize the code so that they're separate "layers" in the same object :). The other benefit is that the base class is really reusable from one project to another. And the code bloat is minimal (well, compared with the benefits. You could also fill datasets and bind them to UI controls :D</p>&#xA;&#xA;<p>The limitations - you end up with one class per domain object (usually per main database table). And you can't load objects in existing transactions (although you could think of passing on the transaction, if you have one).</p>&#xA;&#xA;<p>Let me know if you're interested in more details - I could expand the answer a bit.</p>&#xA;
   420378 |    1 | <p><strong>Development teams should be segregated more often by technological/architectural layers instead of business function.</strong></p>&#xA;&#xA;<p>I come from a general culture where developers own "everything from web page to stored procedure". So in order to implement a feature in the system/application, they would prepare the database table schemas, write the stored procs, match the data access code, implement the business logic and web service methods, and the web page interfaces.</p>&#xA;&#xA;<p>And guess what? Everybody has their <em>own way to doing things</em>! Everyone <em>struggles</em> to learn the ASP.NET AJAX and Telerik or Infragistic suites, Enterprise Library or other productivity and data layer and persistence frameworks, Aspect-oriented frameworks, logging and caching application blocks, DB2 or Oracle percularities. And guess what? Everybody takes <em>heck of a long time</em> to learn how to do things the proper way! Meaning, lots of mistakes in the meantime and plenty of resulting defects and performance bottlenecks! And heck of a longer time to fix them! Across each and every layer! Everybody has a hand in every Visual Studio project. Nobody is specialised to handle and optmise one problem/technology domain. Too many chefs spoil the soup. All the chefs result in some radioactive goo.</p>&#xA;&#xA;<p>Developers may have cross-layer/domain responsibilities, but they should not pretend that they can be masters of all disciplines, and should be limited to only a few. In my experience, when a project is not a small one and utilises lots of technologies, covering more business functions in a single layer is more productive (as well as encouraging more test code test that layer) than covering less business functions spanning the entire architectural stack (which motivates developers to test only via their UI and not test code).</p>&#xA;
  4337370 |    1 | <p><strong>Conversion</strong> is when a value is, um, converted to a different type. The result is a value of the target type, and there are rules for what output value results from what input (of the source type).</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>int i = 3;&#xA;unsigned int j;&#xA;j = i; // the value of "i" is converted to "unsigned int".&#xA;</code></pre>&#xA;&#xA;<p>The result is the <code>unsigned int</code> value that is equal to <code>i</code> modulo <code>UINT_MAX+1</code>, and this rule is part of the language. So, in this case the value (in English) is still "3", but it's an unsigned int value of 3, which is subtly different from a signed int value of 3.</p>&#xA;&#xA;<p>Note that conversion happened automatically, we just used a signed int value in a position where an unsigned int value is required, and the language defines what that means without us actually saying that we're converting. That's called an "implicit conversion".</p>&#xA;&#xA;<p>"<strong>Casting</strong>" is an explicit conversion.</p>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>unsigned int k = (unsigned int)i;&#xA;long l = long(i);&#xA;unsigned int m = static_cast&lt;unsigned int&gt;(i);&#xA;</code></pre>&#xA;&#xA;<p>are all casts. Specifically, according to 5.4/2 of the standard, <code>k</code> uses a <em>cast-expression</em>, and according to 5.2.3/1, <code>l</code> uses an equivalent thing (except that I've used a different type). <code>m</code> uses a "type conversion operator" (<code>static_cast</code>), but other parts of the standard refer to those as "casts" too.</p>&#xA;&#xA;<p>User-defined types can define "conversion functions" which provide specific rules for converting your type to another type, and single-arg constructors are used in conversions too:</p>&#xA;&#xA;<pre><code>struct Foo {&#xA;    int a;&#xA;    Foo(int b) : a(b) {}                   // single-arg constructor&#xA;    Foo(int b, int c) : a(b+c) {}          // two-arg constructor&#xA;    operator float () { return float(a); } // conversion function&#xA;};&#xA;&#xA;Foo f(3,4);              // two-arg constructor&#xA;f = static_cast&lt;Foo&gt;(4); // conversion: single-arg constructor is called&#xA;float g = f;             // conversion: conversion function is called&#xA;</code></pre>&#xA;
 23745961 |    1 | <p>Not sure if this would help you or not, but I am providing a solution considering the following assumptions - </p>&#xA;&#xA;<ol>&#xA;<li>You need an elegant solution to check all the conditions</li>&#xA;<li>Conditions can change in future and anytime.</li>&#xA;<li>One condition should not depend on others.</li>&#xA;</ol>&#xA;&#xA;<p>However I considered also the following - </p>&#xA;&#xA;<ol>&#xA;<li>The file given has minimal errors in it. If it doe then my code might need some modifications to cope with that.</li>&#xA;<li>I used Stack to keep track of <code>if(</code> blocks.</li>&#xA;</ol>&#xA;&#xA;<p>Ok here is the solution -</p>&#xA;&#xA;<p>I used C# and with it MEF (Microsoft Extensibility Framework) to implement the configurable parsers. The idea is, use a single parser to parse and a list of configurable validator classes to validate the line and return true or false based on the validation. Then you can add or remove any validator anytime or add new ones if you like. So far I have already implemented for S1, S2 and S3 you mentioned, check classes at point 3. You have to add classes for s4, s5 if you need in future.</p>&#xA;&#xA;<ol>&#xA;<li><p>First, Create the Interfaces - </p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace FileParserDemo.Contracts&#xA;{&#xA;    public interface IParser&#xA;    {&#xA;        String[] GetMatchedLines(String filename);&#xA;    }&#xA;&#xA;    public interface IPatternMatcher&#xA;    {&#xA;        Boolean IsMatched(String line, Stack&lt;string&gt; stack);&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Then comes the file reader and checker - </p>&#xA;&#xA;<pre><code>using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Threading.Tasks;&#xA;using FileParserDemo.Contracts;&#xA;using System.ComponentModel.Composition.Hosting;&#xA;using System.ComponentModel.Composition;&#xA;using System.IO;&#xA;using System.Collections;&#xA;&#xA;namespace FileParserDemo.Parsers&#xA;{&#xA;    public class Parser : IParser&#xA;    {&#xA;        [ImportMany]&#xA;        IEnumerable&lt;Lazy&lt;IPatternMatcher&gt;&gt; parsers;&#xA;        private CompositionContainer _container;&#xA;&#xA;        public void ComposeParts()&#xA;        {&#xA;            var catalog = new AggregateCatalog();&#xA;            catalog.Catalogs.Add(new AssemblyCatalog(typeof(IParser).Assembly));&#xA;            _container = new CompositionContainer(catalog);&#xA;            try&#xA;            {&#xA;                this._container.ComposeParts(this);&#xA;            }&#xA;            catch&#xA;            {&#xA;&#xA;            }&#xA;        }&#xA;&#xA;        public String[] GetMatchedLines(String filename)&#xA;        {&#xA;            var matched = new List&lt;String&gt;();&#xA;            var stack = new Stack&lt;string&gt;();&#xA;            using (StreamReader sr = File.OpenText(filename))&#xA;            {&#xA;                String line = "";&#xA;                while (!sr.EndOfStream)&#xA;                {&#xA;                    line = sr.ReadLine();&#xA;                    var m = true;&#xA;                    foreach(var matcher in this.parsers){&#xA;                        m = m &amp;&amp; matcher.Value.IsMatched(line, stack);&#xA;                    }&#xA;                    if (m)&#xA;                    {&#xA;                        matched.Add(line);&#xA;                    }&#xA;                 }&#xA;            }&#xA;            return matched.ToArray();&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>Then comes the implementation of individual checkers, the class names are self explanatory, so I don't think they need more descriptions.</p>&#xA;&#xA;<pre><code>using FileParserDemo.Contracts;&#xA;using System;&#xA;using System.Collections.Generic;&#xA;using System.ComponentModel.Composition;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Text.RegularExpressions;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace FileParserDemo.PatternMatchers&#xA;{&#xA;    [Export(typeof(IPatternMatcher))]&#xA;    public class MatchAllNumbers : IPatternMatcher&#xA;    {&#xA;        public Boolean IsMatched(String line, Stack&lt;string&gt; stack)&#xA;        {&#xA;            var regex = new Regex("\\d+");&#xA;            return regex.IsMatch(line);&#xA;        }&#xA;    }&#xA;&#xA;    [Export(typeof(IPatternMatcher))]&#xA;    public class RemoveIfBlock : IPatternMatcher&#xA;    {&#xA;        public Boolean IsMatched(String line, Stack&lt;string&gt; stack)&#xA;        {&#xA;            var regex = new Regex("if\\(");&#xA;            if (regex.IsMatch(line))&#xA;            {&#xA;                foreach (var m in regex.Matches(line))&#xA;                {&#xA;                    //push the if&#xA;                    stack.Push(m.ToString());&#xA;                }&#xA;                //ignore current line, and will validate on next line with stack&#xA;                return true;&#xA;            }&#xA;            regex = new Regex("//endif");&#xA;            if (regex.IsMatch(line))&#xA;            {&#xA;                foreach (var m in regex.Matches(line))&#xA;                {&#xA;                    stack.Pop();&#xA;                }&#xA;            }&#xA;            return stack.Count == 0; //if stack has an item then ignoring this block&#xA;        }&#xA;    }&#xA;&#xA;    [Export(typeof(IPatternMatcher))]&#xA;    public class RemoveWithEndPeriod : IPatternMatcher&#xA;    {&#xA;        public Boolean IsMatched(String line, Stack&lt;string&gt; stack)&#xA;        {&#xA;            var regex = new Regex("(?m)(?!\\d+.*?\\.$)\\d+");&#xA;            return regex.IsMatch(line);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    [Export(typeof(IPatternMatcher))]&#xA;    public class RemoveWithInParenthesis : IPatternMatcher&#xA;    {&#xA;        public Boolean IsMatched(String line, Stack&lt;string&gt; stack)&#xA;        {&#xA;            var regex = new Regex("\\(.*\\d+.*\\)");&#xA;            return !regex.IsMatch(line);&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;<li><p>The program - </p>&#xA;&#xA;<pre><code>using FileParserDemo.Contracts;&#xA;using FileParserDemo.Parsers;&#xA;using System;&#xA;using System.Collections.Generic;&#xA;using System.ComponentModel.Composition;&#xA;using System.IO;&#xA;using System.Linq;&#xA;using System.Text;&#xA;using System.Threading.Tasks;&#xA;&#xA;namespace FileParserDemo&#xA;{&#xA;    class Program&#xA;    {&#xA;        static void Main(string[] args)&#xA;        {&#xA;            var parser = new Parser();&#xA;            parser.ComposeParts();&#xA;            var matches = parser.GetMatchedLines(Path.GetFullPath("test.txt"));&#xA;            foreach (var s in matches)&#xA;            {&#xA;                Console.WriteLine(s);&#xA;            }&#xA;            Console.ReadLine();&#xA;        }&#xA;    }&#xA;}&#xA;</code></pre></li>&#xA;</ol>&#xA;&#xA;<p>For testing I took @Tiago's sample file as <code>Test.txt</code> which had the following lines - </p>&#xA;&#xA;<pre><code>this is a text&#xA;it should match 12345&#xA;if(&#xA;it should not match 12345&#xA;//endif &#xA;it should match 12345&#xA;it should not match 12345.&#xA;it should not match ( blabla 12345  blablabla )&#xA;it should not match ( 12345 )&#xA;it should match 12345&#xA;</code></pre>&#xA;&#xA;<p>Gives the output - </p>&#xA;&#xA;<pre><code>it should match 12345&#xA;it should match 12345&#xA;it should match 12345&#xA;</code></pre>&#xA;&#xA;<p>Don't know if this would help you or not, I do had a fun time playing with it.... :)</p>&#xA;&#xA;<p>The best part with it is that, for adding a new condition all you have to do is provide an implementation of <code>IPatternMatcher</code>, it will automatically get called and thus will validate.</p>&#xA;
  1605151 |    1 | <p>I'm reading a lot about "Singleton", its problems, when to use it, etc., and these are my conclusions until now:</p>&#xA;&#xA;<ul>&#xA;<li><p>Confusion between the classic implementation of Singleton and the real requirement: TO HAVE JUST ONE INSTANCE OF a CLASS!</p></li>&#xA;<li><p>It's generally bad implemented. If you want a unique instance, don't use the (anti)pattern of using a static GetInstance() method returning a static object. This makes a class to be responsible for instantiating a single instance of itself and also perform logic. This breaks the <a href="http://en.wikipedia.org/wiki/Single%5Fresponsibility%5Fprinciple" rel="nofollow">Single Responsibility Principle</a>. Instead, this should be implemented by a factory class with the responsibility of ensuring that only one instance exists.</p></li>&#xA;<li><p>It's used in constructors, because it's easy to use and must not be passed as a parameter. This should be resolved using <a href="http://en.wikipedia.org/wiki/Dependency%5Finjection" rel="nofollow">dependency injection</a>, that is a great pattern to achieve a good and testable object model.</p></li>&#xA;<li><p>Not <a href="http://en.wikipedia.org/wiki/Test-driven%5Fdevelopment" rel="nofollow">TDD</a>. If you do TDD, dependencies are extracted from the implementation because you want your tests to be easy to write. This makes your object model to be better. If you use TDD, you won't write a static GetInstance =). BTW, if you think in objects with clear responsibilities instead classes, you'll get the same effect =).</p></li>&#xA;</ul>&#xA;
  2055618 |    1 | <p>Don't know if this is a secret per se but I loved the added Enumerable (adds to IEnumerable) class in System.Linq.</p>&#xA;&#xA;<p><a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx</a></p>&#xA;&#xA;<p>While the yield keyword is already listed. Iterator blocks are freaking amazing. I used them to build Lists that would be tested to see if they were co-prime. It basically allows you to go though a function that returns values one by one and stop any time.</p>&#xA;&#xA;<p>Oh, I almost forgot the best class in the world when you can't optimize it any more. The BackgroundWorker!!!!</p>&#xA;&#xA;<p><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx</a></p>&#xA;
  9030438 |    1 | <p>I personally hate regions. The only code that should be in regions in my opinion is generated code.&#xA;When I open file I always start with Ctrl+M+O. This folds to method level. When you have regions you see nothing but region names.</p>&#xA;&#xA;<p>Before checking in I group methods/fields logically so that it looks ok after Ctrl+M+O.&#xA;If you need regions you have to much lines in your class. I also find that this is very common.</p>&#xA;&#xA;<h1>region ThisLooksLikeWellOrganizedCodeBecauseIUseRegions</h1>&#xA;&#xA;<p>// total garbage, no structure here</p>&#xA;&#xA;<h1>endregion</h1>&#xA;
   225330 |    1 | <p>I'm writing a tool to report information about .NET applications deployed across environments and regions within my client's systems.</p>&#xA;&#xA;<p>I'd like to read the values of assembly attributes in these assemblies.</p>&#xA;&#xA;<p>This can be achieved using <code>Assembly.ReflectionOnlyLoad</code>, however even this approach keeps the assembly loaded.  The issue here is that I cannot load two assemblies that have the same name from different paths, so naturally I can't compare the same application deployed in different systems.</p>&#xA;&#xA;<p>At this point I'm assuming the solution will involve using temporary <code>AppDomain</code>s.</p>&#xA;&#xA;<p>Can someone detail how to load an assembly into another <code>AppDomain</code>, read the attributes from it and then unload the <code>AppDomain</code>?</p>&#xA;&#xA;<p>This needs to work for assemblies on the file system as well as those at URL addresses.</p>&#xA;
 12123020 |    1 | <p>Finally its done with <code>prawn</code> and <code>prawn-rails</code>. Here are the details. </p>&#xA;&#xA;<p>To make my system ready</p>&#xA;&#xA;<pre><code># Add this to your Gemfile&#xA;gem 'prawn'&#xA;gem 'prawn_rails'&#xA;&#xA;# run&#xA;bundle install&#xA;</code></pre>&#xA;&#xA;<p>I hit the url <code>http://localhost:3000/regions</code> i.e. to hit the <code>index</code> of <code>RegionsController</code> and it shows the page as pdf format.</p>&#xA;&#xA;<p>I have a <code>Region</code> Model with a single attribute <code>name</code>. Has two entries in <code>regions</code> table.</p>&#xA;&#xA;<pre><code>[&#xA; #&lt;Region id: 1, name: "Region 1", ... &gt;,&#xA; #&lt;Region id: 2, name: "Region 2", ... &gt;&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>My Controller Method:</p>&#xA;&#xA;<pre><code>def index&#xA;    @regions = Region.all # Should return two region objects :)&#xA;&#xA;    respond_to do |format|&#xA;        format.html # index.html.erb&#xA;        format.json { render json: @regions }&#xA;        format.pdf    # &lt;---------- This will handle the pdf response&#xA;    end&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>I have created a view file in <code>views/regions/index.pdf.prawn</code>. Anyway the view file name format is <code>:action.pdf.prawn</code> and the view file is containing</p>&#xA;&#xA;<pre><code>prawn_document() do |pdf|&#xA;    @regions.each {|r| pdf.text r.name}&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>This will just output the name of Regions. </p>&#xA;&#xA;<p>Thats it. You have your page in pdf format. Now just play with all other options provided by <code>Prawn</code> and <code>Prawn-Rails</code>. You can find some here - <a href="http://prawn-rails-demo.heroku.com/" rel="nofollow">http://prawn-rails-demo.heroku.com/</a></p>&#xA;&#xA;<p>Just thinking to write a series of blogs guiding how to use different pdf generation tool with rails 3.</p>&#xA;&#xA;<p>Let me know if it solves your problem.</p>&#xA;
  8498871 |    1 | <p>Here's an alternative event procedure that handles the case where the user updates more than one cell at a time (i.e. pastes a block of cells). </p>&#xA;&#xA;<p>When working with the <code>Worksheet_Change</code> event procedure it is imperative to turn off event handling at the beginning and to make sure it always gets turned back on at the end.</p>&#xA;&#xA;<p>Note that I intentionally left out the formatting of the time stamp as previous examples stripped off the date. If the column is not already formatted and you need to format it, I suggest you add a line of code to set the <code>.NumberFormat</code> property.</p>&#xA;&#xA;<pre><code>Private Sub Worksheet_Change(ByVal Target As Range)&#xA;    Application.EnableEvents = False&#xA;    If Target.Column = 1 Then&#xA;        Target.Resize(ColumnSize:=1).Offset(ColumnOffset:=1).Value = Now&#xA;    End If&#xA;    Application.EnableEvents = True&#xA;End Sub&#xA;</code></pre>&#xA;&#xA;<p>The case of tracking changes in Column A is easy; other columns can be a bit trickier when users paste blocks of cells. For example, if you want to capture changes to Column D, the code needs to handle the case when cells C2:D2 are pasted in which case <code>Target.Column</code> = 3. (Use the <code>Intersect</code> method or also look at the <code>Target.Columns.Count</code> property.</p>&#xA;
  7234311 |    1 | <p>hammar gave the biggest reason. Here are two others:</p>&#xA;&#xA;<ul>&#xA;<li>Scala uses types to resolve names</li>&#xA;</ul>&#xA;&#xA;<p>Consider</p>&#xA;&#xA;<pre><code>def foo(x) = x.a + x.b&#xA;</code></pre>&#xA;&#xA;<p>How could Scala possibly infer the type of the argument? Should it look for every class with an <code>a</code> and <code>b</code> field? What if there are more than 1? In Haskell</p>&#xA;&#xA;<pre><code>foo x = (a x) + (b x)&#xA;</code></pre>&#xA;&#xA;<p>record names are unique, which presents its own problems, but means you can always infer what kind of record is being referred to.</p>&#xA;&#xA;<ul>&#xA;<li>For your example: <code>case</code> expressions in Scala can be heterogeneous</li>&#xA;</ul>&#xA;&#xA;<p>In Scala the type of the object being matched can be used either as part of the match, or to decide how matching should be done. So even if all the constructors in the <code>case</code> are for <code>List</code>, you <em>might</em> want to pass something other than a list to it, and have it fail.</p>&#xA;
   100321 |    1 | <p>Static constructors.</p>&#xA;&#xA;<p>Instances:</p>&#xA;&#xA;<pre><code>public class Example&#xA;{&#xA;    static Example()&#xA;    {&#xA;        // Code to execute during type initialization&#xA;    }&#xA;&#xA;    public Example()&#xA;    {&#xA;        // Code to execute during object initialization&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Static classes:</p>&#xA;&#xA;<pre><code>public static class Example&#xA;{&#xA;    static Example()&#xA;    {&#xA;        // Code to execute during type initialization&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>MSDN <a href="http://msdn.microsoft.com/en-us/library/k9x6w0hc.aspx" rel="nofollow">says</a>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A static constructor is used to initialize any static data, or to perform a particular action that needs performed once only. It is called automatically before the first instance is created or any static members are referenced.</p>&#xA;</blockquote>&#xA;&#xA;<p>For example:</p>&#xA;&#xA;<pre><code>public class MyWebService&#xA;{&#xA;    public static DateTime StartTime;&#xA;&#xA;    static MyWebService()&#xA;    {&#xA;        MyWebService.StartTime = DateTime.Now;&#xA;    }&#xA;&#xA;    public TimeSpan Uptime&#xA;    {&#xA;        get { return DateTime.Now - MyWebService.StartTime; }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>But, you could also just as easily have done:</p>&#xA;&#xA;<pre><code>public class MyWebService&#xA;{&#xA;    public static DateTime StartTime = DateTime.Now;&#xA;&#xA;    public TimeSpan Uptime&#xA;    {&#xA;        get { return DateTime.Now - MyWebService.StartTime; }&#xA;    }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>So you'll be hard-pressed to find any instance when you actually need to use a static constructor.</p>&#xA;&#xA;<p>MSDN offers useful notes on static constructors:</p>&#xA;&#xA;<blockquote>&#xA;  <ul>&#xA;  <li><p>A static constructor does not take access modifiers or have parameters.</p></li>&#xA;  <li><p>A static constructor is called automatically to initialize the class &#xA;  before the first instance is created<br>&#xA;  or any static members are referenced.</p></li>&#xA;  <li><p>A static constructor cannot be called directly.</p></li>&#xA;  <li><p>The user has no control on when the static constructor is executed in the &#xA;  program.</p></li>&#xA;  <li><p>A typical use of static constructors is when the class is&#xA;  using a log file and the&#xA;  constructor is used to write<br>&#xA;  entries to this file.</p></li>&#xA;  <li><p>Static constructors are also useful when creating wrapper classes for<br>&#xA;  unmanaged code, when the constructor<br>&#xA;  can call the LoadLibrary method.</p></li>&#xA;  <li><p>If a static constructor throws an exception, the runtime will not<br>&#xA;  invoke it a second time, and the type &#xA;  will remain uninitialized for the<br>&#xA;  lifetime of the application domain in &#xA;  which your program is running.</p></li>&#xA;  </ul>&#xA;</blockquote>&#xA;&#xA;<p>The most important note is that if an error occurs in the static constructor, a <code>TypeIntializationException</code> is thrown and you cannot drill down to the offending line of code. Instead, you have to examine the <code>TypeInitializationException</code>'s <code>InnerException</code> member, which is the specific cause.</p>&#xA;
  5133301 |    1 | <p><a href="http://stackoverflow.com/questions/5131954/open-and-closed-union-types-in-ocaml/5132612#5132612">gasche's answer has good advice</a>. I'm going to explain open and closed unions a bit more.</p>&#xA;&#xA;<p>First, you need to distinguish the two kinds of unions: basic variants (no backtick) and polymorphic variants (with backtick).</p>&#xA;&#xA;<ul>&#xA;<li>Basic variants are generative: if you define two types with the same constructor names in different modules <code>M1</code> and <code>M2</code>, you have different types. <code>M1.Foo</code> and <code>M2.Foo</code> are different constructors. <code>`Foo</code> is always the same constructor no matter where you use it.</li>&#xA;<li>Apart from this, polymorphic variants can do everything basic variants can do and more. But with great power comes great complexity, so you should use them only when necessary and carefully.</li>&#xA;</ul>&#xA;&#xA;<p>A polymorphic variant type describes what constructors the type may have. But many polymorphic variant types are not fully known ΓÇö they contain (row) type variables. Consider the empty list <code>[]</code>: its type is <code>'a list</code>, and it can be used in many contexts that assign more specific types to <code>'a</code>. For example:</p>&#xA;&#xA;<pre><code># let empty_list = [];;&#xA;val empty_list : 'a list = []&#xA;# let list_of_lists = [] :: empty_list;;&#xA;val list_of_lists : 'a list list = [[]]&#xA;# let list_of_integers = 3 :: empty_list;;&#xA;val list_of_integers : int list = [3]&#xA;</code></pre>&#xA;&#xA;<p>The same holds for the row type variables. An open type, written <code>[&gt; ΓÇª ]</code>, has a row variable that can be instantiated to cover more constructors each time the value is used.</p>&#xA;&#xA;<pre><code># let foo = `Foo;;&#xA;val foo : [&gt; `Foo ] = `Foo&#xA;# let bar = `Bar;;&#xA;val bar : [&gt; `Bar ] = `Bar&#xA;# let foobar = [foo; bar];;&#xA;val foobar : [&gt; `Bar | `Foo ] list = [`Foo; `Bar]&#xA;</code></pre>&#xA;&#xA;<p>Just because a constructor appears in a type doesn't mean every use of that type has to allow all constructors. <code>[&gt; ΓÇª]</code> says that a type must have at least these constructors, and dually <code>[&lt; ΓÇª]</code> says that a type must have at most these constructors. Consider this function:</p>&#xA;&#xA;<pre><code># let h = function `Foo -&gt; `Bar | `Bar -&gt; `Foo;;&#xA;val h : [&lt; `Bar | `Foo ] -&gt; [&gt; `Bar | `Foo ] = &lt;fun&gt;&#xA;</code></pre>&#xA;&#xA;<p><code>h</code> is only capable of handling <code>Foo</code> and <code>Bar</code>, so the input type may not allow other constructors; but it's ok to call <code>h</code> on a type that only allows <code>Foo</code>. Conversely, <code>h</code> may return <code>Foo</code> or <code>Bar</code>, and any context where <code>h</code> is used must allow both <code>Foo</code> and <code>Bar</code> (and may allow others).</p>&#xA;&#xA;<p>Closed types arise when there are matching minimum and maximum constructor requirements on a type. For example, let's add the constraint that <code>h</code> must have the same input and output type:</p>&#xA;&#xA;<pre><code># let hh : 'a -&gt; 'a = function `Foo -&gt; `Bar | `Bar -&gt; `Foo;;&#xA;val hh : [ `Bar | `Foo ] -&gt; [ `Bar | `Foo ] = &lt;fun&gt;&#xA;</code></pre>&#xA;&#xA;<p>Closed types rarely arise naturally from type inference. Most of the time, like here, they are a consequence of a user annotation. When you use polymorphic annotations, it's a good idea to define named types and use them at least on every toplevel function. Otherwise the inferred type is likely to be a little more general than you thought. While this rarely opens the way to bugs, it often means that any type error will be diagnosed later than it could have been, and will generate a very long error message where it will be hard to find the helpful bits.</p>&#xA;&#xA;<p>I recommend reading and working through (i.e. retype the examples in the toplevel, play around a bit to make sure you understand each step) the <a href="http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html#toc36">polymorphic variant tutorial in the Ocaml manual</a>.</p>&#xA;
   300100 |    1 | <p>Several people have mentioned <em>using</em> blocks, but I think they are much more useful than people have realised.   Think of them as the poor man's AOP tool.  I have a host of simple objects that capture state in the constructor and then restore it in the <em>Dispose()</em> method.  That allows me to wrap a piece of functionality in a <em>using</em> block and be sure that the state is restored at the end.  For example:</p>&#xA;&#xA;<pre><code>using(new CursorState(this, BusyCursor));&#xA;{&#xA;    // Do stuff&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><em>CursorState</em> captures the current cursor being used by form, then sets the form to use the cursor supplied.  At the end it restores the original cursor.  I do loads of things like this, for example capturing the selections and current row on a grid before refreshing and so on.</p>&#xA;
   367662 |    1 | <h3>Pointer</h3>&#xA;&#xA;<ul>&#xA;<li>Dereferencing a <code>NULL</code> pointer</li>&#xA;<li>Dereferencing a pointer returned by a "new" allocation of size zero</li>&#xA;<li>Using pointers to objects whose lifetime has ended (for instance, stack allocated objects or deleted objects)</li>&#xA;<li>Dereferencing  a pointer that has not yet been definitely initialized</li>&#xA;<li>Performing pointer arithmetic that yields a result outside the boundaries (either above or below) of an array.</li>&#xA;<li>Dereferencing the pointer at a location beyond the end of an array.</li>&#xA;<li>Converting pointers to objects of incompatible types</li>&#xA;<li><a href="http://stackoverflow.com/a/11211519/241536">Using <code>memcpy</code> to copy overlapping buffers</a>.</li>&#xA;</ul>&#xA;&#xA;<h3>Buffer overflows</h3>&#xA;&#xA;<ul>&#xA;<li>Reading or writing to an object or array at an offset that is negative, or beyond the size of that object (stack/heap overflow)</li>&#xA;</ul>&#xA;&#xA;<h3>Integer Overflows</h3>&#xA;&#xA;<ul>&#xA;<li>Signed integer overflow</li>&#xA;<li>Evaluating an expression that is not mathematically defined</li>&#xA;<li>Left-shifting values by a negative amount (right shifts by negative amounts are implementation defined)</li>&#xA;<li>Shifting values by an amount greater than or equal to the number of bits in the number (e.g. <code>int64_t i = 1; i &lt;&lt;= 72</code> is undefined)</li>&#xA;</ul>&#xA;&#xA;<h3>Types, Cast and Const</h3>&#xA;&#xA;<ul>&#xA;<li>Casting a numeric value into a value that can't be represented by the target type (either directly or via static_cast)</li>&#xA;<li>Using an automatic variable before it has been definitely assigned (e.g., <code>int i; i++; cout &lt;&lt; i;</code>)</li>&#xA;<li>Using the value of any object of type other than <code>volatile</code> or <code>sig_atomic_t</code> at the receipt of a signal</li>&#xA;<li>Attempting to modify a string literal or any other const object during its lifetime</li>&#xA;<li>Concatenating a narrow with a wide string literal during preprocessing</li>&#xA;</ul>&#xA;&#xA;<h3>Function and Template</h3>&#xA;&#xA;<ul>&#xA;<li>Not returning a value from a value-returning function (directly or by flowing off from a try-block)</li>&#xA;<li>Multiple different definitions for the same entity (class, template, enumeration, inline function, static member function, etc.)</li>&#xA;<li>Infinite recursion in the instantiation of templates</li>&#xA;<li>Calling a function using different parameters or linkage to the parameters and linkage that the function is defined as using.</li>&#xA;</ul>&#xA;&#xA;<h3>OOP</h3>&#xA;&#xA;<ul>&#xA;<li>Cascading destructions of objects with static storage duration</li>&#xA;<li>The result of assigning to partially overlapping objects</li>&#xA;<li>Recursively re-entering a function during the initialization of its static objects</li>&#xA;<li>Making virtual function calls to pure virtual functions of an object from its constructor or destructor</li>&#xA;<li>Referring to nonstatic members of objects that have not been constructed or have already been destructed</li>&#xA;</ul>&#xA;&#xA;<h3>Source file and Preprocessing</h3>&#xA;&#xA;<ul>&#xA;<li>A non-empty source file that doesn't end with a newline, or ends with a backslash (prior to C++11)</li>&#xA;<li>A backslash followed by a character that is not part of the specified escape codes in a character or string constant (this is implementation-defined in C++11).</li>&#xA;<li>Exceeding implementation limits (number of nested blocks, number of functions in a program, available stack space ...)</li>&#xA;<li>Preprocessor numeric values that can't be represented by a <code>long int</code></li>&#xA;<li>Preprocessing directive on the left side of a function-like macro definition</li>&#xA;<li>Dynamically generating the defined token in a <code>#if</code> expression</li>&#xA;</ul>&#xA;&#xA;<h3>To be classified</h3>&#xA;&#xA;<ul>&#xA;<li>Calling exit during the destruction of a program with static storage duration</li>&#xA;</ul>&#xA;
    47699 |    1 | <p>Judging from <a href="http://blogs.msdn.com/oldnewthing/archive/2008/08/12/8849519.aspx" rel="nofollow">this technical explanation</a>, your code will not work as expected, but abort on the second item, because the connection was already closed when returning the first item.</p>&#xA;&#xA;<p>@<a href="#47746" rel="nofollow">Joel Gauvreau </a>: Yes, I should have read on. <a href="http://blogs.msdn.com/oldnewthing/archive/2008/08/14/8862242.aspx" rel="nofollow">Part 3</a> of this series explains that the compiler adds special handling for finally blocks to trigger only at the <em>real</em> end.</p>&#xA;
   117268 |    1 | <p>This is one of the things that having a preprocessor is useful for.  You could define a macro that swallows exceptions, then with a quick script add that macro to all lines.</p>&#xA;&#xA;<p>So, if this were C++, you could do something like this:</p>&#xA;&#xA;<pre><code>#define ATTEMPT(x) try { x; } catch (...) { }&#xA;// ...&#xA;ATTEMPT(WidgetMaker.SetAlignment(57));&#xA;ATTEMPT(contactForm["Title"] = txtTitle.Text);&#xA;ATTEMPT(Casserole.Season(true, false));&#xA;ATTEMPT(((RecordKeeper)Session["CasseroleTracker"]).Seasoned = true);&#xA;</code></pre>&#xA;&#xA;<p>Unfortunately, not many languages seem to include a preprocessor like C/C++ did.</p>&#xA;&#xA;<p>You could create your own preprocessor and add it as a pre-build step.  If you felt like completely automating it you could probably write a preprocessor that would take the actual code file and add the try/catch stuff in on its own (so you don't have to add those ATTEMPT() blocks to the code manually).  Making sure it only modified the lines it's supposed to could be difficult though (have to skip variable declarations, loop constructs, etc to that you don't break the build).</p>&#xA;&#xA;<p>However, I think these are horrible ideas and should never be done, but the question was asked. :)</p>&#xA;&#xA;<p>Really, you shouldn't ever do this.  You need to find what's causing the error and fix it.  Swallowing/ignoring errors is a bad thing to do, so I think the <em>correct</em> answer here is "Fix the bug, don't ignore it!". :)</p>&#xA;
 10668611 |    1 | <p>To elaborate on @St3fan's solution, you can try this after initiating the request:</p>&#xA;&#xA;<pre><code>- (BOOL)waitForCompletion:(NSTimeInterval)timeoutSecs&#xA;{&#xA;    NSDate *timeoutDate = [NSDate dateWithTimeIntervalSinceNow:timeoutSecs];&#xA;&#xA;    do&#xA;    {&#xA;        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:timeoutDate];&#xA;        if ([timeoutDate timeIntervalSinceNow] &lt; 0.0)&#xA;        {&#xA;            break;&#xA;        }&#xA;    }&#xA;    while (!done);&#xA;&#xA;    return done;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Another way:</p>&#xA;&#xA;<pre><code>//block the thread in 0.1 second increment, until one of callbacks is received.&#xA;    NSRunLoop *theRL = [NSRunLoop currentRunLoop];&#xA;&#xA;    //setup timeout&#xA;    float waitIncrement = 0.1f;&#xA;    int timeoutCounter  = (int)(30 / waitIncrement); //30 sec timeout&#xA;    BOOL controlConditionReached = NO;&#xA;&#xA;&#xA;    // Begin a run loop terminated when the downloadComplete it set to true&#xA;    while (controlConditionReached == NO)&#xA;    {&#xA;&#xA;        [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:waitIncrement]];&#xA;        //control condition is set in one of your async operation delegate methods or blocks&#xA;        controlConditionReached = self.downloadComplete || self.downloadFailed ;&#xA;&#xA;        //if there's no response - timeout after some time&#xA;        if(--timeoutCounter &lt;= 0)&#xA;        {&#xA;            break;&#xA;        }&#xA;    }&#xA;</code></pre>&#xA;
   169307 |    1 | <p>Going on with what has been previously said by Russell Myers, if you learn how to refactor your code properly (a skill proficient developers must learn), there really isn't too much of a need for regions.</p>&#xA;&#xA;<p>A couple of weeks ago I thought regions were great because they allowed me to hide my fat code, but after exercising my code skills I was able to make it slimmer and now I fit into a size 7 class (someone should SO make that a measurement for refactoring in the future! :P)</p>&#xA;
   682545 |    1 | <p>Using <code>num_holes=None</code> as the default is fine if you are going to have just <code>__init__</code>.</p>&#xA;&#xA;<p>If you want multiple, independent "constructors", you can provide these as class methods. These are usually called factory methods.  In this case you could have the default for <code>num_holes</code> be <code>0</code>.</p>&#xA;&#xA;<pre><code>class Cheese(object):&#xA;    def __init__(self, num_holes=0):&#xA;        "defaults to a solid cheese"&#xA;        self.number_of_holes = num_holes&#xA;&#xA;    @classmethod&#xA;    def random(cls):&#xA;        return cls(random(100))&#xA;&#xA;    @classmethod&#xA;    def slightly_holey(cls):&#xA;        return cls(random(33))&#xA;&#xA;    @classmethod&#xA;    def very_holey(cls):&#xA;        return cls(random(66, 100))&#xA;</code></pre>&#xA;&#xA;<p>Now create object like this:</p>&#xA;&#xA;<pre><code>gouda = Cheese()&#xA;emmentaler = Cheese.random()&#xA;leerdammer = Cheese.slightly_holey()&#xA;</code></pre>&#xA;
    84074 |    1 | <p>The whole idea around semantic markup is the separation of markup and presentation, which includes layout.</p>&#xA;&#xA;<p>Div's aren't replacing tables, they have their own use in separating content into blocks of related content (, ). When you don't have the skills and are relying on tables, you'll often have to separate your content in to cells in order to get the desired layout, but you wont need to touch the markup to achieve presentation when using semantic markup. This is really important when the markup is being generated rather than static pages.</p>&#xA;&#xA;<p>Developers need to stop providing markup that implies layout so that those of us who do have the skills to present content can get on with our jobs, and developers don't have to come back to their code to make changes when presentation needs change.</p>&#xA;
 22107032 |    1 | <p>Well, the only way to destroy a <strong>class</strong> is to remove it from your source tree :D You can, though destroy <strong>instances</strong> of a class.</p>&#xA;&#xA;<p>Unlike C# doesn't have deterministic destructors. An object instance becomes <em>eligible</em> for garbage collection when the object instance becomes unreachable. That can happen by virtue of</p>&#xA;&#xA;<ul>&#xA;<li>all references to it being released (e.g., variable going out of scope), or</li>&#xA;<li>all references to it being themselves unreachable (e.g., the object instance is references in a collection, and the collection is itself unreachable.</li>&#xA;</ul>&#xA;&#xA;<p>When and if an object instance is garbage-collected depends on memory/resource pressure within the app domain (process). When the app domain ends, though, everything is garbage collected.</p>&#xA;&#xA;<p>Usually you want to make things that matter implement <code>IDisposable</code>, so non-managed resources held can be deterministically released via <code>using</code> blocks and the like.</p>&#xA;&#xA;<p>This is a simplistic answer, but the gist of it is: don't sweat it.</p>&#xA;
  2405367 |    1 | <p><strong>Empty blocks with braces are allowed.</strong></p>&#xA;&#xA;<p>You can write code like this</p>&#xA;&#xA;<pre><code>{&#xA;    service.DoTonsOfWork(args);&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>It's helpful when you want to try something without a <code>using</code> or <code>try... finally</code> that you've already written.</p>&#xA;&#xA;<pre><code>//using(var scope = new TransactionScope)&#xA;{&#xA;    service.DoTonsOfWork(args);&#xA;}&#xA;</code></pre>&#xA;
 20722398 |    1 | <p>I've been downloading and parsing a webpage with Jsoup, to show the content in a list. This process takes a while so I implemented <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Callable.html" rel="nofollow">Callable</a> interface to do the task in another thread and get the result back.&#xA;The problem is that it still blocks UI during the process.</p>&#xA;&#xA;<pre><code>public class GetListaNotizie implements Callable&lt;ArrayList&lt;Notizia&gt;&gt; {&#xA;&#xA; static ArrayList&lt;Notizia&gt; getNotizieBySezione() {&#xA;    [...] Long process &#xA;    return notizie;&#xA; }&#xA;&#xA; @Override&#xA; public ArrayList&lt;Notizia&gt; call() throws Exception {&#xA;    return getNotizieBySezione();&#xA; }&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>And then:</p>&#xA;&#xA;<pre><code>final ExecutorService service;&#xA;final Future&lt;ArrayList&lt;Notizia&gt;&gt; task;&#xA;service = Executors.newFixedThreadPool(1);&#xA;task = service.submit(new GetListaNotizie());&#xA;try {&#xA;    ArrayList&lt;Notizia&gt; notizie = task.get();&#xA;    lvListaNotizie.setAdapter(new RiempiLista(activity, notizie));&#xA;} catch (InterruptedException e) {&#xA;    e.printStackTrace();&#xA;} catch (ExecutionException e) {&#xA;    e.printStackTrace();&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>What am I missing?</p>&#xA;
   169441 |    1 | <p>I find that they obfuscate the code in all but the simplest of uses. The only use we advocate in our projects are the ones the IDE uses (interface implementations and designer code).</p>&#xA;&#xA;<p>The right tools should be used for the right purpose. Code should be written to show intent and function rather than arbitrarily grouping things. Organizing things into access modifier grouping or some other grouping just seems to be illogical. I find the code should be organized in a manner that makes sense for the particular class; after all, there are other tools for viewing class members by access modifier. This is also the case for almost every other use of regions; there is a better way.</p>&#xA;&#xA;<p>For example, grouping properties, events, constants or otherwise together doesn't really make sense either as code is generally more maintainable if the things are grouped together by function (as in, a property that uses a constant should be near that constant, not near other unrelated properties just because it's a property).</p>&#xA;
   146589 |    1 | <h3>Very informally:</h3>&#xA;&#xA;<p>A POD is a type (including classes) where the C++ compiler guarantees that there will be no "magic" going on in the structure: for example hidden pointers to vtables, offsets that get applied to the address when it is cast to other types (at least if the target's POD too), constructors, or destructors. Roughly speaking, a type is a POD when the only things in it are built-in types and combinations of them. The result is something that "acts like" a C type.</p>&#xA;&#xA;<h3>Less informally:</h3>&#xA;&#xA;<ul>&#xA;<li>int, char, wchar_t, bool, float, double are PODs, as are long/short and signed/unsigned versions of them.</li>&#xA;<li>pointers (including pointer-to-function and pointer-to-member) are PODs, </li>&#xA;<li>enums are PODs</li>&#xA;<li>a const or volatile POD is a POD.</li>&#xA;<li>a class, struct or union of PODs is a POD provided that all non-static data members are public, and it has no base class and no constructors, destructors, or virtual methods. Static members don't stop something being a POD under this rule.</li>&#xA;<li>Wikipedia is wrong to say that a POD cannot have members of type pointer-to-member. Or rather, it's correct for the C++98 wording, but TC1 made explicit that pointers-to-member are POD.</li>&#xA;</ul>&#xA;&#xA;<h3>Formally (C++03 Standard):</h3>&#xA;&#xA;<blockquote>&#xA;  <p><strong>3.9(10):</strong> "Arithmetic types (3.9.1), enumeration types, pointer types, and pointer to member types (3.9.2) and cv-qualified versions of these types (3.9.3) are collectively caller scalar types. Scalar types, POD-struct types, POD-union types (clause 9), arrays of such types and cv-qualified versions of these types (3.9.3) are collectively called POD types"</p>&#xA;  &#xA;  <p><strong>9(4):</strong> "A POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-define copy operator and no user-defined destructor. Similarly a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-define copy operator and no user-defined destructor.</p>&#xA;  &#xA;  <p><strong>8.5.1(1):</strong> "An aggregate is an array or class (clause 9) with no user-declared constructors (12.1), no private or protected non-static data members (clause 11), no base classes (clause 10) and no virtual functions (10.3)."</p>&#xA;</blockquote>&#xA;
  6494763 |    1 | <p>A few quick suggestions:</p>&#xA;&#xA;<pre><code>let pict = Pictures . (map Line) . (map $ map $ mkPt) . blocks $ pes&#xA;in do displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>You've got some superfluous stuff that can be removed outright:</p>&#xA;&#xA;<pre><code>let pict = Pictures . map Line . (map $ map mkPt) . blocks $ pes&#xA;in do displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>You're not avoiding parentheses anyway with the <code>map (map mkPt)</code> term, so get rid of the <code>$</code>:</p>&#xA;&#xA;<pre><code>let pict = Pictures . map Line . map (map mkPt) . blocks $ pes&#xA;in do displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>You can write the composition chain on multiple lines for clarity:</p>&#xA;&#xA;<pre><code>let pict = Pictures &#xA;         . map Line &#xA;         . map (map mkPt) &#xA;         . blocks $ pes&#xA;in do displayInWindow "My Window" (200, 200) (10, 10) white pict&#xA;</code></pre>&#xA;&#xA;<p>The <code>do</code> block is superfluous because it only has one statement, and you can move the final application outside the definition:</p>&#xA;&#xA;<pre><code>let displayPict = displayInWindow "My Window" (200, 200) (10, 10) white&#xA;                . Pictures &#xA;                . map Line &#xA;                . map (map mkPt) &#xA;                . blocks&#xA;in displayPict pes&#xA;</code></pre>&#xA;&#xA;<p>You can merge the two <code>map</code>s:</p>&#xA;&#xA;<pre><code>let displayPict = displayInWindow "My Window" (200, 200) (10, 10) white&#xA;                . Pictures &#xA;                . map (Line . map mkPt) &#xA;                . blocks&#xA;in displayPict pes&#xA;</code></pre>&#xA;&#xA;<p>Sometimes it's also more readable for long chains to use the reversed composition operator from <code>Control.Arrow</code>:</p>&#xA;&#xA;<pre><code>let displayPict = blocks&#xA;                  &gt;&gt;&gt; map (Line . map mkPt) &#xA;                  &gt;&gt;&gt; Pictures&#xA;                  &gt;&gt;&gt; displayInWindow "My Window" (200, 200) (10, 10) white&#xA;in displayPict pes&#xA;</code></pre>&#xA;&#xA;<p>But all of that is optional; season your code to taste.</p>&#xA;&#xA;<p>On the subject of efficiency, I see no reason to think the two would be any different, once GHC's optimizer is through with the code.</p>&#xA;
   810839 |    1 | <p>Im having a debate with a co-worker about throwing exceptions from constructors, and thought I would like some feedback.</p>&#xA;&#xA;<p>Is it ok to throw exceptions from constructors, form a design point of view?</p>&#xA;&#xA;<p>Lets say I'm wrapping a posix mutex in a class, it would look something like this.</p>&#xA;&#xA;<pre><code>class Mutex {&#xA;public:&#xA;  Mutex() {&#xA;    if(pthread_mutex_init(&amp;mutex_,0)!=0) {&#xA;      throw MutexInitException();&#xA;    }&#xA;  }&#xA;&#xA;  ~Mutex() {&#xA;    pthread_mutex_destroy(&amp;mutex_);&#xA;  }&#xA;&#xA;  void lock() {&#xA;    if(pthread_mutex_lock(&amp;mutex_)!=0) {&#xA;      throw MutexLockException();&#xA;    }&#xA;  }&#xA;&#xA;  void unlock() {&#xA;    if(pthread_mutex_unlock(&amp;mutex_)!=0) {&#xA;      throw MutexUnlockException();&#xA;    }&#xA;  }&#xA;&#xA;private:&#xA;  pthread_mutex_t mutex_;&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>My question is, is this the standard way to do it? because if the pthread mutex_init call fails the mutex object is unusable so throwing an exception ensures that the mutex won't be created.</p>&#xA;&#xA;<p>Should I rather create a member function init for the Mutex class and call pthread mutex_init within which would return a bool based on pthread mutex_init's return? This way i don't have to use exceptions for such a low level object.</p>&#xA;
   287371 |    1 | <p>There are times when your methods HAVE to be long, especially with web development.  In those cases (such as when I've got a gridview with a large, complex object bound to it) I've found it useful to use regions:</p>&#xA;&#xA;<pre><code>#region Declaring variables for fields and object properties&#xA;&#xA;#region Getting the fields in scope&#xA;&#xA;#region Getting the properties of the object&#xA;&#xA;#region Setting Fields&#xA;</code></pre>&#xA;&#xA;<p>These are discreet sections of the method that COULD be broken out, but it would be difficult (I'd have to use variables with larger scope than I like or pass a LOT of variables as 'out'), and it is basic plumbing.</p>&#xA;&#xA;<p>In this case, regions are perfectly acceptable.  In others, they are needless.</p>&#xA;&#xA;<p>I will also use regions to group methods into logical groups.  I reject partial classes for this purpose, as I tend to have a lot of pages open when I'm debugging, and the fewer partial classes there are in an object (or page, or dialog), the more of them I can have on my tab list (which I limit to one line so I can see more code).</p>&#xA;&#xA;<p>Regions are only a problem when used as a crutch, or when they cover poor code (for instance, if you are nesting regions inside of each other within the same scope, it's a bad sign).</p>&#xA;
  2594230 |    1 | <p>I have a Singleton class that I inherit from in many instances.</p>&#xA;&#xA;<p>Here is the Singleton:</p>&#xA;&#xA;<pre><code>template &lt;class Target&gt;&#xA;class Singleton_Shared_Ptr&#xA;{&#xA;    //---------------------------------------------------------------------&#xA;    //  Public Constructors &amp; Destructors&#xA;    //---------------------------------------------------------------------&#xA;  public:&#xA;    //! Destructor.&#xA;    virtual         ~Singleton_Shared_Ptr();&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Public methods&#xA;    //---------------------------------------------------------------------&#xA;  public:&#xA;    //! Returns a pointer to the instance.&#xA;    static boost::shared_ptr&lt;Target&gt;    ptr(void);&#xA;&#xA;    //! Returns a reference to the instance.&#xA;    static Target &amp;                     ref(void);&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Protected methods&#xA;    //---------------------------------------------------------------------&#xA;  protected:&#xA;    //! Default constructor.&#xA;                    Singleton_Shared_Ptr();&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Private methods&#xA;    //---------------------------------------------------------------------&#xA;  private:&#xA;     //! Copy constructor, not implemented.&#xA;     /*! The copy constructor is declared so that the compiler will not&#xA;      *  automatically generate one.&#xA;      */&#xA;                   Singleton_Shared_Ptr(const Singleton_Shared_Ptr&amp; s);&#xA;&#xA;     //! Assignment operator, declared but not defined.&#xA;     /*! The assignment operator is declared so that the compiler will not&#xA;      *  automatically generate one.&#xA;      */&#xA;    Singleton_Shared_Ptr&amp;     operator=(const Singleton_Shared_Ptr&amp; s);&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Private members&#xA;    //---------------------------------------------------------------------&#xA;  private:&#xA;    static wxMutex                      m_instance_mutex;&#xA;};&#xA;&#xA;template&lt;class Target&gt;&#xA;wxMutex                     Singleton_Shared_Ptr&lt;Target&gt;::m_instance_mutex;&#xA;&#xA;//-------------------------------------------------------------------------&#xA;//  Singleton_Shared_Ptr Constructors &amp; Destructors&#xA;//-------------------------------------------------------------------------&#xA;template &lt;class Target&gt;&#xA;inline&#xA;Singleton_Shared_Ptr&lt;Target&gt; ::&#xA;Singleton_Shared_Ptr()&#xA;{&#xA;}&#xA;&#xA;&#xA;template &lt;class Target&gt;&#xA;inline&#xA;Singleton_Shared_Ptr&lt;Target&gt; ::&#xA;~Singleton_Shared_Ptr()&#xA;{&#xA;}&#xA;&#xA;&#xA;//-------------------------------------------------------------------------&#xA;//  Singleton_Shared_Ptr methods in alphabetical order&#xA;//-------------------------------------------------------------------------&#xA;template &lt;class Target&gt;&#xA;boost::shared_ptr&lt;Target&gt;&#xA;Singleton_Shared_Ptr&lt;Target&gt; ::&#xA;ptr(void)&#xA;{&#xA;    static boost::shared_ptr&lt;Target&gt;    p_instance;&#xA;    if (p_instance.get() == NULL)&#xA;    {&#xA;        wxMutexLocker   lock(m_instance_mutex);&#xA;        if (!p_instance)&#xA;        {&#xA;            p_instance.reset(new Target);&#xA;        }&#xA;    }&#xA;    return p_instance;&#xA;}&#xA;&#xA;&#xA;template &lt;class Target&gt;&#xA;Target &amp;&#xA;Singleton_Shared_Ptr&lt;Target&gt; ::&#xA;ref(void)&#xA;{&#xA;    return *(ptr());&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Here is the usage of the singleton:</p>&#xA;&#xA;<pre><code>class Manager&#xA;    : public Singleton_Shared_Ptr&lt;Manager&gt;&#xA;{&#xA;    //---------------------------------------------------------------------&#xA;    //  Friends&#xA;    //---------------------------------------------------------------------&#xA;    friend class Common::Singleton_Shared_Ptr&lt;Manager&gt;;&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Public Constructors and Destructors&#xA;    //---------------------------------------------------------------------&#xA;  public:&#xA;    //! destructor&#xA;    virtual                 ~Manager();&#xA;&#xA;    //---------------------------------------------------------------------&#xA;    //  Protected Methods&#xA;    //---------------------------------------------------------------------&#xA;  protected:&#xA;    //! Constructor&#xA;                                Manager();&#xA;&#xA;    //! Copy constructor -- declared but not implemented.&#xA;                                Manager(const Manager&amp; m);&#xA;&#xA;    //! Assignment operator -- declared but not implemented.&#xA;    Manager&amp;                    operator= (const Manager&amp; m);&#xA;};&#xA;</code></pre>&#xA;
   199247 |    1 | <p>If you want to exit your program without calling any finally blocks or finalizers use <a href="http://msdn.microsoft.com/en-us/library/ms131100.aspx" rel="nofollow">FailFast</a>:</p>&#xA;&#xA;<pre><code>Environment.FailFast()&#xA;</code></pre>&#xA;
   993118 |    1 | <p>A few from me - make of them what you will.</p>&#xA;&#xA;<p>The attribute:</p>&#xA;&#xA;<pre><code>[assembly::InternalsVisibleTo("SomeAssembly")]&#xA;</code></pre>&#xA;&#xA;<p>Allows you to expose out the internal methods/properties or data from your assembly to another assembly called 'SomeAssembly'. All protected/private stuff remains hidden.</p>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p>Static constructors ( otherwise called 'Type Constructor' )</p>&#xA;&#xA;<pre><code>public MyClass&#xA;{&#xA;  public static MyClass()&#xA;  {&#xA;     // type init goes here&#xA;  }&#xA;  ......&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><hr /></p>&#xA;&#xA;<p>The keyword <code>internal</code>. So useful in so many ways.</p>&#xA;
   848025 |    1 | <p>Is there a faster way to rotate a <em>large</em> bitmap by 90 or 270 degrees than simply doing a nested loop with inverted coordinates?</p>&#xA;&#xA;<p>The bitmaps are 8bpp and typically 2048*2400*8bpp </p>&#xA;&#xA;<p>Currently I do this by simply copying with argument inversion, roughly (pseudo code:</p>&#xA;&#xA;<pre><code>for x = 0 to 2048-1&#xA;  for y = 0 to 2048-1&#xA;    dest[x][y]=src[y][x];&#xA;</code></pre>&#xA;&#xA;<p>(In reality I do it with pointers, for a bit more speed, but that is roughly the same magnitude)</p>&#xA;&#xA;<p>GDI is quite slow with large images, and GPU load/store times for textures (GF7 cards) are in the same magnitude as the current CPU time.</p>&#xA;&#xA;<p>Any tips, pointers? An in-place algorithm would even be better, but speed is more important than being in-place.</p>&#xA;&#xA;<p>Target is Delphi, but it is more an algorithmic question. SSE(2) vectorization no problem, it is a big enough problem for me to code it in assembler</p>&#xA;&#xA;<hr>&#xA;&#xA;<p><b>Follow up to Nils' answer</b></p>&#xA;&#xA;<ul>&#xA;<li>Image 2048x2700  -> 2700x2048</li>&#xA;<li>Compiler Turbo Explorer 2006  with optimization on.</li>&#xA;<li>Windows:  Power scheme set to "Always on". (<b>important!!!!</b>)</li>&#xA;<li>Machine: Core2 6600  (2.4 GHz)</li>&#xA;</ul>&#xA;&#xA;<p>time with old routine: 32ms (step 1)<p>&#xA;time with stepsize 8 : 12ms<p>&#xA;time with stepsize 16 : 10ms<p>&#xA;time with stepsize 32+ : 9ms</p>&#xA;&#xA;<p>Meanwhile I also tested on a Athlon 64 X2 (5200+ iirc), and the speed up there was slightly more than a factor four (80 to 19 ms). </p>&#xA;&#xA;<p>The speed up is well worth it, thanks. Maybe that during the summer months I'll torture myself with a SSE(2) version. However I already thought about how to tackle that, and I think I'll run out of SSE2 registers for an straight implementation: </p>&#xA;&#xA;<pre><code>for n:=0 to 7 do&#xA;  begin&#xA;    load r0, &lt;source+n*rowsize&gt; &#xA;    shift byte from r0 into r1&#xA;    shift byte from r0 into r2&#xA;    ..&#xA;    shift byte from r0 into r8&#xA;  end; &#xA;store r1, &lt;target&gt;   &#xA;store r2, &lt;target+1*&lt;rowsize&gt;&#xA;..&#xA;store r8, &lt;target+7*&lt;rowsize&gt;   &#xA;</code></pre>&#xA;&#xA;<p>So 8x8 needs 9 registers, but 32-bits SSE only has 8. Anyway that is something for the summer months :-)</p>&#xA;&#xA;<p>Note that the pointer thing is something that I do out of instinct, but it could be there is actually something to it, if your dimensions are not hardcoded, the compiler can't turn the mul into a shift. While muls an sich are cheap nowadays, they also generate more register pressure afaik.</p>&#xA;&#xA;<p>The code (validated by subtracting result from the "naieve" rotate1 implementation):</p>&#xA;&#xA;<pre><code>const stepsize = 32;&#xA;procedure rotatealign(Source: tbw8image; Target:tbw8image);&#xA;&#xA;var stepsx,stepsy,restx,resty : Integer;&#xA;   RowPitchSource, RowPitchTarget : Integer;&#xA;   pSource, pTarget,ps1,ps2 : pchar;&#xA;   x,y,i,j: integer;&#xA;   rpstep : integer;&#xA;begin&#xA;  RowPitchSource := source.RowPitch;          // bytes to jump to next line. Can be negative (includes alignment)&#xA;  RowPitchTarget := target.RowPitch;        rpstep:=RowPitchTarget*stepsize;&#xA;  stepsx:=source.ImageWidth div stepsize;&#xA;  stepsy:=source.ImageHeight div stepsize;&#xA;  // check if mod 16=0 here for both dimensions, if so -&gt; SSE2.&#xA;  for y := 0 to stepsy - 1 do&#xA;    begin&#xA;      psource:=source.GetImagePointer(0,y*stepsize);    // gets pointer to pixel x,y&#xA;      ptarget:=Target.GetImagePointer(target.imagewidth-(y+1)*stepsize,0);&#xA;      for x := 0 to stepsx - 1 do&#xA;        begin&#xA;          for i := 0 to stepsize - 1 do&#xA;            begin&#xA;              ps1:=@psource[rowpitchsource*i];   // ( 0,i)&#xA;              ps2:=@ptarget[stepsize-1-i];       //  (maxx-i,0);&#xA;              for j := 0 to stepsize - 1 do&#xA;               begin&#xA;                 ps2[0]:=ps1[j];&#xA;                 inc(ps2,RowPitchTarget);&#xA;               end;&#xA;            end;&#xA;          inc(psource,stepsize);&#xA;          inc(ptarget,rpstep);&#xA;        end;&#xA;    end;&#xA;  // 3 more areas to do, with dimensions&#xA;  // - stepsy*stepsize * restx        // right most column of restx width&#xA;  // - stepsx*stepsize * resty        // bottom row with resty height&#xA;  // - restx*resty                    // bottom-right rectangle.&#xA;  restx:=source.ImageWidth mod stepsize;   // typically zero because width is &#xA;                                          // typically 1024 or 2048&#xA;  resty:=source.Imageheight mod stepsize;&#xA;  if restx&gt;0 then&#xA;    begin&#xA;      // one loop less, since we know this fits in one line of  "blocks"&#xA;      psource:=source.GetImagePointer(source.ImageWidth-restx,0);    // gets pointer to pixel x,y&#xA;      ptarget:=Target.GetImagePointer(Target.imagewidth-stepsize,Target.imageheight-restx);&#xA;      for y := 0 to stepsy - 1 do&#xA;        begin&#xA;          for i := 0 to stepsize - 1 do&#xA;            begin&#xA;              ps1:=@psource[rowpitchsource*i];   // ( 0,i)&#xA;              ps2:=@ptarget[stepsize-1-i];       //  (maxx-i,0);&#xA;              for j := 0 to restx - 1 do&#xA;               begin&#xA;                 ps2[0]:=ps1[j];&#xA;                 inc(ps2,RowPitchTarget);&#xA;               end;&#xA;            end;&#xA;         inc(psource,stepsize*RowPitchSource);&#xA;         dec(ptarget,stepsize);&#xA;       end;&#xA;    end;&#xA;  if resty&gt;0 then&#xA;    begin&#xA;      // one loop less, since we know this fits in one line of  "blocks"&#xA;      psource:=source.GetImagePointer(0,source.ImageHeight-resty);    // gets pointer to pixel x,y&#xA;      ptarget:=Target.GetImagePointer(0,0);&#xA;      for x := 0 to stepsx - 1 do&#xA;        begin&#xA;          for i := 0 to resty- 1 do&#xA;            begin&#xA;              ps1:=@psource[rowpitchsource*i];   // ( 0,i)&#xA;              ps2:=@ptarget[resty-1-i];       //  (maxx-i,0);&#xA;              for j := 0 to stepsize - 1 do&#xA;               begin&#xA;                 ps2[0]:=ps1[j];&#xA;                 inc(ps2,RowPitchTarget);&#xA;               end;&#xA;            end;&#xA;         inc(psource,stepsize);&#xA;         inc(ptarget,rpstep);&#xA;       end;&#xA;    end;&#xA; if (resty&gt;0) and (restx&gt;0) then&#xA;    begin&#xA;      // another loop less, since only one block&#xA;      psource:=source.GetImagePointer(source.ImageWidth-restx,source.ImageHeight-resty);    // gets pointer to pixel x,y&#xA;      ptarget:=Target.GetImagePointer(0,target.ImageHeight-restx);&#xA;      for i := 0 to resty- 1 do&#xA;        begin&#xA;          ps1:=@psource[rowpitchsource*i];   // ( 0,i)&#xA;          ps2:=@ptarget[resty-1-i];       //  (maxx-i,0);&#xA;          for j := 0 to restx - 1 do&#xA;            begin&#xA;              ps2[0]:=ps1[j];&#xA;              inc(ps2,RowPitchTarget);&#xA;            end;&#xA;       end;&#xA;    end;&#xA;end;&#xA;</code></pre>&#xA;&#xA;<p><b>Update 2 Generics</b></p>&#xA;&#xA;<p>I tried to update this code to a generics version in Delphi XE. I failed because of QC 99703, and forum people have already confirmed it also exists in XE2. Please vote for it :-)</p>&#xA;
    48676 |    1 | <p>Here are a few pits I had the misfortune to fall into. All these have good reasons which I only understood after being bitten by behaviour that surprised me. </p>&#xA;&#xA;<ul>&#xA;<li><p><code>virtual</code> functions in constructors <a href="http://stackoverflow.com/questions/36832" title="Virtual functions in constructors, why do languages differ?">aren't</a>.</p></li>&#xA;<li><p>Don't violate the <a href="http://en.wikipedia.org/wiki/One_Definition_Rule" rel="nofollow">ODR (One Definition Rule)</a>, that's what anonymous namespaces are for (among other things).</p></li>&#xA;<li><p>Order of initialization of members depends on the order in which they are declared.</p>&#xA;&#xA;<pre><code>class bar {&#xA;    vector&lt;int&gt; vec_;&#xA;    unsigned size_; // Note size_ declared *after* vec_&#xA;public:&#xA;    bar(unsigned size)&#xA;        : size_(size)&#xA;        , vec_(size_) // size_ is uninitialized&#xA;        {}&#xA;};&#xA;</code></pre></li>&#xA;<li><p>Default values and <code>virtual</code> have different semantics.</p>&#xA;&#xA;<pre><code>class base {&#xA;public:&#xA;    virtual foo(int i = 42) { cout &lt;&lt; "base " &lt;&lt; i; }&#xA;};&#xA;&#xA;class derived : public base {&#xA;public:&#xA;    virtual foo(int i = 12) { cout &lt;&lt; "derived "&lt;&lt; i; }&#xA;};&#xA;&#xA;derived d;&#xA;base&amp; b = d;&#xA;b.foo(); // Outputs `derived 42`&#xA;</code></pre></li>&#xA;</ul>&#xA;
  4178176 |    1 | <h1>How to read:</h1>&#xA;&#xA;<p>This article is rather long. If you want to know about both aggregates and PODs (Plain Old Data) take time and read it. If you are interested just in aggregates, read only the first part. If you are interested only in PODs then you must first read the definition, implications, and examples of aggregates and then you <em>may</em> jump to PODs but I would still recommend reading the first part in its entirety. The notion of aggregates is essential for defining PODs. If you find any errors (even minor, including grammar, stylistics, formatting, syntax, etc.) please leave a comment, I'll edit.</p>&#xA;&#xA;<h1>What are aggregates and why they are special </h1>&#xA;&#xA;<p><strong>Formal definition from the C++ standard (<em>C++03 8.5.1 ┬º1</em>)</strong>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate is an array or a class (clause 9) with no user-declared &#xA;  constructors (12.1), no private or protected non-static data members (clause 11),&#xA;  no base classes (clause 10), and no virtual functions (10.3).</p>&#xA;</blockquote>&#xA;&#xA;<p>So, OK, let's parse this definition. First of all, any array is an aggregate. A class can also be an aggregate if&hellip;wait! nothing is said about structs or unions, can't they be aggregates? Yes, they can. In C++, the term <code>class</code> refers to all classes, structs, and unions. So, a class (or struct, or union) is an aggregate if and only if it satisfies the criteria from the above definitions. What do these criteria imply?</p>&#xA;&#xA;<ul>&#xA;<li><p>This does not mean an aggregate class cannot have constructors, in fact it can have a default constructor and/or a copy constructor as long as they are implicitly declared by the compiler, and not explicitly by the user</p></li>&#xA;<li><p>No private or protected <strong><em>non-static data members</em></strong>. You can have as many private and protected member functions (but not constructors) as well as as many private or protected <strong><em>static</em></strong> data members and member functions as you like and not violate the rules for aggregate classes</p></li>&#xA;<li><p>An aggregate class can have a user-declared/user-defined copy-assignment operator and/or destructor</p></li>&#xA;<li><p>An array is an aggregate even if it is an array of non-aggregate class type. </p></li>&#xA;</ul>&#xA;&#xA;<p>Now let's look at some examples:</p>&#xA;&#xA;<pre><code>class NotAggregate1&#xA;{&#xA;  virtual void f(){} //remember? no virtual functions&#xA;};&#xA;&#xA;class NotAggregate2&#xA;{&#xA;  int x; //x is private by default and non-static &#xA;};&#xA;&#xA;class NotAggregate3&#xA;{&#xA;public:&#xA;  NotAggregate3(int) {} //oops, user-defined constructor&#xA;};&#xA;&#xA;class Aggregate1&#xA;{&#xA;public:&#xA;  NotAggregate1 member1;   //ok, public member&#xA;  Aggregate1&amp; operator = (Aggregate1 const &amp; rhs) {/* */} //ok, copy-assignment  &#xA;private:&#xA;  void f() {} // ok, just a private function&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>You get the idea. Now let's see how aggregates are special. They, unlike non-aggregate classes, can be initialized with curly braces <code>{}</code>. This initialization syntax is commonly known for arrays, and we just learnt that these are aggregates. So, let's start with them.</p>&#xA;&#xA;<p><code>Type array_name[n] = {a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>m</sub>};</code></p>&#xA;&#xA;<p><strong><em>if(m == n)</em></strong><br>&#xA;   the i<sup>th</sup> element of the array is initialized with a<sub>i</sub><br>&#xA;<strong><em>else if(m &lt; n)</em></strong><br>&#xA;  the first m elements of the array are initialized with a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>m</sub> and the other <code>n - m</code> elements are, if possible, <em>value-initialized</em> (see below for the explanation of the term)<br>&#xA;<strong><em>else if(m > n)</em></strong><br>&#xA;   the compiler will issue an error<br>&#xA;<strong><em>else</em></strong> <em>(this is the case when n isn't specified at all like <code>int a[] = {1,2,3};</code>)</em><BR>&#xA; the size of the array (n) is assumed to be equal to m, so <code>int a[] = {1,2,3}</code> is equivalent to <code>int a[3] = {1,2,3};</code></p>&#xA;&#xA;<p>When an object of scalar type (<code>bool</code>, <code>int</code>, <code>char</code>, <code>double</code>, pointers, etc.) is <em>value-initialized</em> it means it is initialized with <code>0</code> for that type (<code>false</code> for <code>bool</code>, <code>0.0</code> for <code>double</code>, etc.). When an object of class type with a user-declared default constructor is value-initialized its default constructor is called. If the default constructor is implicitly defined then all nonstatic members are recursively value-initialized. This definition is imprecise and a bit incorrect but it should give you the basic idea. A reference cannot be value-initialized. Value-initialization for a non-aggregate class can fail if, for example, the class has no appropriate default constructor.</p>&#xA;&#xA;<p>Examples of array initialization:</p>&#xA;&#xA;<pre><code>class A&#xA;{&#xA;public:&#xA;  A(int){} //no default constructor&#xA;};&#xA;class B&#xA;{&#xA;public:&#xA;  B() {} //default constructor available&#xA;};&#xA;int main()&#xA;{&#xA;  A a1[3] = {A(2), A(1), A(14)}; //OK n == m&#xA;  A a2[3] = {A(2)}; //ERROR A has no default constructor. Unable to value-initialize a2[1] and a2[2]&#xA;  B b1[3] = {B()}; //OK b1[1] and b1[2] are value initialized, in this case with the default-ctor&#xA;  int Array1[1000] = {0}; //All elements are initialized with 0;&#xA;  int Array2[1000] = {1}; //Attention: only the first element is 1, the rest are 0;&#xA;  bool Array3[1000] = {}; //the braces can be empty too. All elements initialized with false&#xA;  int Array4[1000]; //no initializer. This is different from an empty {} initializer in that&#xA;  //the elements in this case are not value-initialized, but have indeterminate values &#xA;  //(unless, of course, Array4 is a global array)&#xA;  int array[2] = {1,2,3,4}; //ERROR, too many initializers&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>Now let's see how aggregate classes can be initialized with braces. Pretty much the same way. Instead of the array elements we will initialize the non-static data members in the order of their appearance in the class definition (they are all public by definition). If there are fewer initializers than members, the rest are value-initialized. If it is impossible to value-initialize one of the members which were not explicitly initialized, we get a compile-time error. If there are more initializers than necessary, we get a compile-time error as well.</p>&#xA;&#xA;<pre><code>struct X{&#xA;  int i1;&#xA;  int i2;&#xA;};&#xA;struct Y{&#xA;  char c;&#xA;  X x;&#xA;  int i[2];&#xA;  float f; &#xA;protected:&#xA;  static double d;&#xA;private:&#xA;  void g(){}      &#xA;}; &#xA;&#xA;Y y = {'a', {10,20}, {20,30}};&#xA;</code></pre>&#xA;&#xA;<p>In the above example <code>y.c</code> is initialized with <code>'a'</code>, <code>y.x.i1</code> with <code>10</code>, <code>y.x.i2</code> with <code>20</code>, <code>y.i[0]</code> with <code>20</code>, <code>y.i[1]</code> with <code>30</code> and <code>y.f</code> is value-initialized, that is, initialized with <code>0.0</code>. The protected static member <code>d</code> is not initialized at all, because it is <code>static</code>. </p>&#xA;&#xA;<p>Aggregate unions are different in that you may initialize only their first member with braces. I think that if you are advanced enough in C++ to even consider using unions (their use may be very dangerous and must be thought of carefully), you could look up the rules for unions in the standard yourself :). </p>&#xA;&#xA;<p>Now that we know what's special about aggregates, let's try to understand the restrictions on classes; that is, why they are there. We should understand that memberwise initialization with braces implies that the class is nothing more than the sum of its members. If a user-defined constructor is present, it means that the user needs to do some extra work to initialize the members therefore brace initialization would be incorrect. If virtual functions are present, it means that the objects of this class have (on most implementations) a pointer to the so-called vtable of the class, which is set in the constructor, so brace-initialization would be insufficient. You could figure out the rest of the restrictions in a similar manner as an exercise :)</p>&#xA;&#xA;<p>So enough about the aggregates. Now we can define a stricter set of types, to wit, PODs</p>&#xA;&#xA;<h1>What are PODs and why they are special</h1>&#xA;&#xA;<p><strong>Formal definition from the C++ standard (<em>C++03 9 ┬º4</em>)</strong>:</p>&#xA;&#xA;<blockquote>&#xA;  <p>A POD-struct is an aggregate class&#xA;  that has no non-static data members of&#xA;  type non-POD-struct, non-POD-union (or&#xA;  array of such types) or reference, and&#xA;  has no user-defined copy assignment&#xA;  operator and no user-defined&#xA;  destructor. Similarly, a POD-union is&#xA;  an aggregate union that has no&#xA;  non-static data members of type&#xA;  non-POD-struct, non-POD-union (or&#xA;  array of such types) or reference, and&#xA;  has no user-defined copy assignment&#xA;  operator and no user-defined&#xA;  destructor. A POD class is a class&#xA;  that is either a POD-struct or a&#xA;  POD-union.</p>&#xA;</blockquote>&#xA;&#xA;<p>Wow, this one's tougher to parse, isn't it? :) Let's leave unions out (on the same grounds as above) and rephrase in a bit clearer way:</p>&#xA;&#xA;<blockquote>&#xA;  <p>An aggregate class is called a POD if&#xA;  it has no user-defined copy-assignment&#xA;  operator and destructor and none of&#xA;  its nonstatic members is a non-POD&#xA;  class, array of non-POD, or a&#xA;  reference.</p>&#xA;</blockquote>&#xA;&#xA;<p>What does this definition imply? (did I mention <strong>POD</strong> stands for <strong><em>Plain Old Data</em></strong> ?:)</p>&#xA;&#xA;<ul>&#xA;<li>All POD classes are aggregates, or, to put it the other way around, if a class is not an aggregate then it is sure not a POD</li>&#xA;<li>Classes, just like structs, can be PODs even though the standard term is POD-struct for both cases</li>&#xA;<li>Just like in the case of aggregates, it doesn't matter what static members the class has</li>&#xA;</ul>&#xA;&#xA;<p>Examples:</p>&#xA;&#xA;<pre><code>struct POD&#xA;{&#xA;  int x;&#xA;  char y;&#xA;  void f() {} //no harm if there's a function&#xA;  static std::vector&lt;char&gt; v; //static members do not matter&#xA;};&#xA;&#xA;struct AggregateButNotPOD1&#xA;{&#xA;  int x;&#xA;  ~AggregateButNotPOD1(){} //user-defined destructor&#xA;};&#xA;&#xA;struct AggregateButNotPOD2&#xA;{&#xA;  AggregateButNotPOD1 arrOfNonPod[3]; //array of non-POD class&#xA;};&#xA;</code></pre>&#xA;&#xA;<p>POD-classes, POD-unions, scalar types, and arrays of such types are collectively called <strong><em>POD-types.</em></strong><br>&#xA;PODs are special in many ways. I'll provide just some examples.</p>&#xA;&#xA;<ul>&#xA;<li><p>POD-classes are the closest to C structs. Unlike them, PODs can have member functions and arbitrary static members, but neither of these two change the memory layout of the object. So if you want to write a more or less portable dynamic library that can be used from C and even .NET, you should try to make all your exported functions take and return only parameters of POD-types.</p></li>&#xA;<li><p>The lifetime of objects of non-POD class type begins when the constructor has finished and ends when the destructor has finished. For POD classes, the lifetime begins when storage for the object is occupied and finishes when that storage is released or reused.  </p></li>&#xA;<li><p>For objects of POD types it is guaranteed by the standard that when you <code>memcpy</code> the contents of your object into an array of char or unsigned char, and then <code>memcpy</code> the contents back into your object, the object will hold its original value. Do note that there is no such guarantee for objects of non-POD types. Also, you can safely copy POD objects with <code>memcpy</code>. The following example assumes T is a POD-type:</p>&#xA;&#xA;<pre><code>#define N sizeof(T)&#xA;char buf[N];&#xA;T obj; // obj initialized to its original value&#xA;memcpy(buf, &amp;obj, N); // between these two calls to memcpy,&#xA;// obj might be modified&#xA;memcpy(&amp;obj, buf, N); // at this point, each subobject of obj of scalar type&#xA;// holds its original value&#xA;</code></pre></li>&#xA;<li><p>goto statement. As you may know, it is illegal (the compiler should issue an error) to make a jump via goto from a point where some variable was not yet in scope to a point where it is already in scope. This restriction applies only if the variable is of non-POD type. In the following example <code>f()</code> is ill-formed whereas <code>g()</code> is well-formed. Note that Microsoft's compiler is too liberal with this ruleΓÇöit just issues a warning in both cases.</p>&#xA;&#xA;<pre><code>int f() {&#xA;  struct NonPOD { NonPOD(){}};&#xA;  goto label;&#xA;  NonPOD x;&#xA;label:&#xA;  return 0;&#xA;}&#xA;&#xA;int g(){&#xA;  struct POD {int i;  char c;};&#xA;  goto label;&#xA;  POD x;&#xA;label:&#xA;  return 0;&#xA;}&#xA;</code></pre></li>&#xA;<li><p>It is guaranteed that there will be no padding in the beginning of a POD object. In other words, if a POD-class A's first member is of type T, you can safely <code>reinterpret_cast</code> from <code>A*</code> to <code>T*</code> and get the pointer to the first member and vice versa.</p></li>&#xA;</ul>&#xA;&#xA;<p>The list goes on and on...  </p>&#xA;&#xA;<h1>Conclusion</h1>&#xA;&#xA;<p>It is important to understand what exactly a POD is because many language features, as you see, behave differently for them.</p>&#xA;
  1712003 |    1 | <p>I don't know how you could miss this one, it's pretty basic. That's the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.</p>&#xA;
 13951447 |    1 | <p>cant believe that nobody linked this:<br>&#xA;<a href="http://flamingdangerzone.com/cxx11/2012/08/15/rule-of-zero.html">http://flamingdangerzone.com/cxx11/2012/08/15/rule-of-zero.html</a>&#xA;Basically article argues for "Rule of Zero".&#xA;It is not appropriate for me to quote entire article but I believe this is the main point:&#xA;(Rule of Zero)</p>&#xA;&#xA;<blockquote>&#xA;  <p>Classes that have custom destructors, copy/move constructors or copy/move assignment >operators should deal exclusively with ownership.&#xA;  Other classes should not have custom destructors, copy/move&#xA;  constructors or copy/move assignment operators.</p>&#xA;</blockquote>&#xA;&#xA;<p>Also this bit is IMHo important:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Common ΓÇ£ownership-in-a-packageΓÇ¥ classes are included in the standard&#xA;  library: std::unique_ptr and std::shared_ptr. Through the use of&#xA;  custom deleter objects, both have been made flexible enough to manage&#xA;  virtually any kind of resource.</p>&#xA;</blockquote>&#xA;
 10065917 |    1 | <p><strong>Move semantics</strong> is about <strong>transferring resources rather than copying them</strong> when nobody needs the source value anymore.</p>&#xA;&#xA;<p>In C++03, objects are often copied, only to be destroyed or assigned-over before any code uses the value again.  For example, when you return by value from a functionΓÇöunless RVO kicks inΓÇöthe value you're returning is copied to the caller's stack frame, and then it goes out of scope and is destroyed.  This is just one of many examples: see pass-by-value when the source object is a temporary, algorithms like <code>sort</code> that just rearrange items, reallocation in <code>vector</code> when its <code>capacity()</code> is exceeded, etc.</p>&#xA;&#xA;<p>When such copy/destroy pairs are expensive, it's typically because the object owns some heavyweight resource. For example, <code>vector&lt;string&gt;</code> may own a dynamically-allocated memory block containing an array of <code>string</code> objects, each with its own dynamic memory.  Copying such an object is costly: you have to allocate new memory for each dynamically-allocated blocks in the source, and copy all the values across.  <em>Then</em> you need deallocate all that memory you just copied.  However, <em>moving</em> a large <code>vector&lt;string&gt;</code> means just copying a few pointers (that refer to the dynamic memory block) to the destination and zeroing them out in the source.</p>&#xA;
  1712149 |    1 | <p>The other already explained to you that the syntax that you observe is called "constructor initializer list". This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).</p>&#xA;&#xA;<p>I just want to note that the syntax that, as you said, "looks like a constructor call", is not necessarily a constructor call. In C++ language the <code>()</code> syntax is just one standard form of <em>initialization syntax</em>. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called value-initialization for empty <code>()</code>) and for non-class types it again means something different (since non-class types have no constructors).</p>&#xA;&#xA;<p>In your case the data member has type <code>int</code>. <code>int</code> is not a class type, so it has no constructor. For type <code>int</code> this syntax means simply "initialize <code>bar</code> with the value of <code>num</code>" and that's it. It is done just like that, directly, no constructors involved, since, once again, <code>int</code> is not a class type of therefore it can't have any constructors.</p>&#xA;
   871240 |    1 | <p>Check "Open data types and open functions" <a href="http://lambda-the-ultimate.org/node/1453">http://lambda-the-ultimate.org/node/1453</a></p>&#xA;&#xA;<blockquote>&#xA;  <p>In object-oriented languages, it is&#xA;  easy to extend data by defining new&#xA;  classes, but it is difficult to add&#xA;  new functions. In functional&#xA;  languages, the situation is reversed:&#xA;  adding new functions poses no&#xA;  problems, but <strong>extending data (adding&#xA;  new data constructors) requires&#xA;  modifying existing code</strong>. The problem&#xA;  of supporting both directions of&#xA;  extensibility is known as <strong>the&#xA;  expression problem</strong>. We present open&#xA;  data types and open functions as a&#xA;  lightweight solution to the expression&#xA;  problem in the Haskell language. The&#xA;  idea is that constructors of open data&#xA;  types, and equations of open functions&#xA;  can appear scattered throughout a&#xA;  program. In particular, they may&#xA;  reside in different modules. The&#xA;  intended semantics is as follows: the&#xA;  program should behave as if the data&#xA;  types and functions were closed,&#xA;  defined in one place. The order of&#xA;  function equations is determined by&#xA;  best-fit pattern matching, where a&#xA;  specific pattern takes precedence over&#xA;  an unspecific one. We show that our&#xA;  solution is applicable to the&#xA;  expression problem, generic&#xA;  programming, and exceptions. We sketch&#xA;  two implementations. A simple one,&#xA;  derived from the semantics, and one&#xA;  based on mutually recursive modules&#xA;  that permits separate compilation.</p>&#xA;</blockquote>&#xA;
 26669285 |    1 | <p>I'm trying to find occurrences of BLOB_SMUGHO, from the file test.out from the bottom of the file. If found, return a chunk of data which I'm interested in between the string "2014.10"</p>&#xA;&#xA;<blockquote>&#xA;  <p>I'm getting Use of uninitialized value $cc in pattern match (m//) at</p>&#xA;</blockquote>&#xA;&#xA;<p>Whats is wrong with this script?</p>&#xA;&#xA;<pre><code>#!/usr/bin/perl&#xA;use strict;&#xA;use warnings;&#xA;use POSIX qw(strftime);&#xA;use File::ReadBackwards;&#xA;&#xA;my $find = "BLOB_SMUGHO";&#xA;my $chnkdelim = "\n[" . strftime "%Y.%m", localtime;&#xA;&#xA;my $fh = File::ReadBackwards-&gt;new('test.out', $chnkdelim, 0) or die "err-file: $!\n";&#xA;&#xA;while ( defined(my $line = $fh-&gt;readline) ) {&#xA;     if(my $cc =~ /$find/){&#xA;        print $cc;&#xA;     }&#xA;}&#xA;&#xA;close($fh);&#xA;</code></pre>&#xA;&#xA;<p>In case if this helps, here is a sample content of test.out</p>&#xA;&#xA;<pre><code>2014.10.31 lots and &#xA;lots of &#xA;gibbrish &#xA;2014.10.31 which I'm not &#xA;interested &#xA;in. It &#xA;also &#xA;2014.10.31 spans&#xA;across thousands of &#xA;lines and somewhere in the middle there will be&#xA;2014.10.31&#xA;this precious word BLOB_SMUGHO and &#xA;2014.10.31 certain other &#xA;2014.10.31 words &#xA;2014.10.31&#xA;this precious word BLOB_SMUGHO and&#xA;2014.10.31&#xA;this precious word BLOB_SMUGHO and&#xA;which &#xA;I &#xA;will &#xA;be &#xA;interested &#xA;in.&#xA;</code></pre>&#xA;&#xA;<p>And I'm expecting to capture all the multiple occurrences of the chunk of the text from bottom of the file.</p>&#xA;&#xA;<pre><code>2014.10.31&#xA;this precious word BLOB_SMUGHO and &#xA;</code></pre>&#xA;
   169465 |    1 | <p>Like any language feature, regions have the potential to be misused and abused but they also have their benefits.</p>&#xA;&#xA;<p>They are great for creating "folding" groups around:</p>&#xA;&#xA;<ul>&#xA;<li>methods, especially if you have a lot of overloaded methods</li>&#xA;<li>interface implementations</li>&#xA;<li>operator overloads</li>&#xA;</ul>&#xA;&#xA;<p>You can also use it to group properties, public/private methods, events, class-wide variables, etc.</p>&#xA;&#xA;<p>I use regions in my code to help create a consistent structure in my code so I always know where things are at a glance. Yes, it makes things a bit harder during refactoring or adding new functions (especially when autogenerated by Visual Studio) but I feel it's a small price to pay to keep things consistent and structured.</p>&#xA;
    12316 |    1 | <p>I didn't start to really appreciate the "using" blocks until recently.  They make things so much more tidy :)</p>&#xA;
   231788 |    1 | <p>It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as <a href="http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx">C#'s iterator blocks</a> if you're familiar with those.</p>&#xA;&#xA;<p>There's an <a href="http://www.ibm.com/developerworks/library/l-pycon.html">IBM article</a> which explains it reasonably well (for Python) as far as I can see.</p>&#xA;&#xA;<p>The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - <em>as if the generator method was paused</em>. Now obviously you can't really "pause" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.</p>&#xA;
  2428865 |    1 | <p>I was bored one day and was playing around with blocks in Objective-C...</p>&#xA;&#xA;<pre><code>#define Lambda(var, body) [^ id(id (var)) { return (body);} copy]&#xA;#define Call(f, arg) ((id(^)(id))(f))(arg)&#xA;#define Int(num) [NSNumber numberWithInteger:(num)]&#xA;#define Mult(a, b) Int([(a) integerValue] * [(b) integerValue])&#xA;#define Add(a, b) Int([(a) integerValue] + [(b) integerValue])&#xA;#define Sub1(n) Int([(n) integerValue] - 1)&#xA;#define Add1(n) Int([(n) integerValue] + 1)&#xA;#define If(cond, thenblock, elseblock) ([(cond) integerValue] ? (thenblock) : (elseblock))&#xA;#define Cons(car, cdr_) [[ConsType alloc] initWithCar:(car) cdr:(cdr_)]&#xA;#define Car(list) [(list) car]&#xA;#define Cdr(list) [(list) cdr]&#xA;#define Define(var, value) id var = (value)&#xA;#define Nullq(value) Int(value == nil)&#xA;</code></pre>&#xA;&#xA;<p>allowing "interesting" things like:</p>&#xA;&#xA;<pre><code>Define(Y, Lambda(f, Call(Lambda(x, Call(x, x)),&#xA;                         Lambda(x, Call(f, Lambda(y, Call(Call(x, x), y)))))));&#xA;Define(AlmostTotal, Lambda(f, Lambda(list, If(Nullq(list), Int(0),&#xA;                                              Add(Car(list), Call(f, Cdr(list)))))));&#xA;Define(Total, Call(Y, AlmostTotal));&#xA;Print(Call(Total, Cons(Int(4), Cons(Int(5), Cons(Int(8), nil)))));&#xA;</code></pre>&#xA;&#xA;<p>(some function and class definitions not shown for sake of brevity)</p>&#xA;
 14829202 |    1 | <p>Enumerations</p>&#xA;&#xA;<p>Properties</p>&#xA;&#xA;<p>.ctors</p>&#xA;&#xA;<p>Methods</p>&#xA;&#xA;<p>Event Handlers</p>&#xA;&#xA;<p>That's all I use regions for.  I had no idea you could use them inside of methods.</p>&#xA;&#xA;<p>Sounds like a terrible idea :)</p>&#xA;
  4797525 |    1 | <p><a href="http://www.webpronews.com/expertarticles/2006/11/06/using-the-compilationmode-attribute-to-boost-performance" rel="nofollow">CompilationMode="Never"</a> is a feature which can be crucial in certain ASP.NET sites.</p>&#xA;&#xA;<p>If you have an ASP.NET application where ASPX pages are frequently generated and updated via a CMS or other publishing system, it is important to use CompilationMode="Never".</p>&#xA;&#xA;<p>Without this setting, the ASPX file changes will trigger recompilations which will quickly make your appdomain restart. This can wipe out session state and httpruntime cache, not to mention lag caused by recompilation.</p>&#xA;&#xA;<p>(To prevent recompilation you <em>could</em> increase the <a href="http://msdn.microsoft.com/en-us/library/s10awwz0.aspx" rel="nofollow">numRecompilesBeforeAppRestart</a> setting, but that is not ideal as it consumes more memory.)</p>&#xA;&#xA;<p>One caveat to this feature is that the ASPX pages cannot contain any code blocks. To get around this, one may place code in custom controls and/or base classes.</p>&#xA;&#xA;<p>This feature is mostly irrelevant in cases where ASPX pages don't change often.</p>&#xA;
 13842742 |    1 | <p>I think these answers address your side-by-side part of your question but does not explain the  "same image" issue. Their code is written correctly but does not explain the reason.</p>&#xA;&#xA;<p>Your code:</p>&#xA;&#xA;<pre><code>        &lt;IMG src="logo/#top10MostRated.Logo#" &#xA;             alt="#top10MostRated.Name#" &#xA;             width="100%" height="100%"&gt;&lt;/IMG&gt;&#xA;</code></pre>&#xA;&#xA;<p><br>&#xA;... would be fine if you were only inside a <code>&lt;cfloop query = "top10MostRated"&gt;</code> or <code>&lt;cfoutput query = "top10MostRated"&gt;</code> block.  The reason is because inside these types of blocks CF is smart enough to know you want the data for the current row.  It would be the same as:</p>&#xA;&#xA;<pre><code>        &lt;IMG src="logo/#top10MostRated.Logo[top10MostRated.currentRow]#" &#xA;             alt="#top10MostRated.Name[top10MostRated.currentRow]#" &#xA;             width="100%" height="100%" /&gt;&#xA;</code></pre>&#xA;&#xA;<p><br>Because you're nesting the to/from <code>cfloop</code> inside a <code>&lt;cfoutput query = ""&gt;</code> block, you are getting unexpected results. Your existing code is always asking for the record provided by your outer loop. Hence you see the same image 5 times.  (using any of the fine examples provided will help you get out of this) but, you can remove the query from your <code>cfoutput</code> and simply ask CF to show you the value for the correct row in your loop using your index (you set your index to "i") so the below would show you the image that corresponds to your loop.</p>&#xA;&#xA;<pre><code>        &lt;IMG src="logo/#top10MostRated.Logo[i]#" &#xA;              alt="#top10MostRated.Name[i]#" &#xA;              width="100%" height="100%" /&gt;&#xA;</code></pre>&#xA;
 14947162 |    1 | <p>From looking at the <a href="http://doc.qt.digia.com/stable/qaxbase.html" rel="nofollow">documentation</a>, you are not calling the function correctly. You are passing in  a <code>QString</code>, yet the function takes a <code>QVariant</code>. Since <code>QVariant</code> doesn't have explicit constructors (by design), a temporary QVariant is created and passed to <code>dynamicCall</code>. As a consequence your <code>returnValue</code> doesn't get updated.</p>&#xA;&#xA;<pre><code>QVariant dynamicCall( const char * function, const QVariant &amp; var1 = QVariant(), ...&#xA;                    , const QVariant &amp; var8 = QVariant() )&#xA;</code></pre>&#xA;&#xA;<p>I think that everything will work when you use a QVariant instead. </p>&#xA;&#xA;<pre><code> QVariant returnValue;&#xA; mAX-&gt;dynamicCall("SendCommand(QString,QString&amp;)", "something", returnValue );&#xA;</code></pre>&#xA;
 14385902 |    1 | <p>I found one "solution" that allows you to continue using tab indentation and have correct formatting.  It's more of a pattern.  The key is to use razor code blocks instead of inline code.</p>&#xA;&#xA;<p>So for example, replace the following:</p>&#xA;&#xA;<pre><code>&lt;div&gt;&#xA;    &lt;div&gt;&#xA;        @if (true)&#xA;        {&#xA;            &lt;b&gt;Hi&lt;/b&gt;&#xA;        }&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>with:</p>&#xA;&#xA;<pre><code>&lt;div&gt;&#xA;    &lt;div&gt;&#xA;        @{&#xA;            if (true)&#xA;            {&#xA;                &lt;b&gt;Hi&lt;/b&gt;&#xA;            }&#xA;        }&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;</code></pre>&#xA;&#xA;<p>The latter will format correctly, but the former won't.</p>&#xA;&#xA;<p>Keep in mind, the formatting isn't perfect, but it's better than before.</p>&#xA;
 20371409 |    1 | <p>First of all the name of variabeles should start with low letter in JavaScript. Names with the first capital variable should be used only for classes (functions used in constructors). Prettify formatting of the code used on stackoverflow uses other colors for JavaScript classes. For example to define data in JavaScript one should use <code>var d = new Date();</code> instead of <code>var d = new Date();</code>. So the code like <code>var GetErrorCountUrl = "some string";</code> looks in JavaScript very strange. I understand that JavaScript is not your main language, but it's really better the name conversion used in the language which one uses.</p>&#xA;&#xA;<p>Now back to your main question. It seems to me that</p>&#xA;&#xA;<pre><code>GetErrorCountUrl.replace('Token',pkid).replace('Token1',cid).replace('Token2',itemclass);&#xA;</code></pre>&#xA;&#xA;<p>Isn't what you really want. If the string <code>GetErrorCountUrl</code> contains <code>'Token1'</code> then the <code>'Token'</code> part of the substring <code>'Token1'</code> will be first replaced to <code>pkid</code> and the next replacement (to <code>cid</code>) will never work.</p>&#xA;&#xA;<p>To fix the problem you can change the order or replacements to the following for example:</p>&#xA;&#xA;<pre><code>GetErrorCountUrl.replace('Token1',cid)&#xA;    .replace('Token2',itemclass)&#xA;    .replace('Token',pkid);&#xA;</code></pre>&#xA;
   578164 |    1 | <p>I love regions because it helps me focus on just what I am working on.  I use them even if the class just has a method.  </p>&#xA;&#xA;<p>I use code snippets with regions already pre-populated, which is less typing.  I feel the class is more organized and does what Code Complete talks about make it nicer for other people to read.  The compiler just ignores them, they are now to make code more readable.</p>&#xA;
 12953145 |    1 | <h2>Standard reference</h2>&#xA;&#xA;<p>For a less technical view &amp; introduction - <a href="http://stackoverflow.com/a/12953129/673730">skip to this answer</a>.</p>&#xA;&#xA;<p>For common cases where copy elision occurs - <a href="http://stackoverflow.com/a/12953150/673730">skip to this answer</a>.</p>&#xA;&#xA;<p><strong>Copy elision</strong> is defined in the standard in:</p>&#xA;&#xA;<h3>12.8 Copying and moving class objects [class.copy]</h3>&#xA;&#xA;<p>as</p>&#xA;&#xA;<blockquote>&#xA;  <p>31) When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class&#xA;  object, even if the copy/move constructor and/or destructor for the object have side effects. In such cases,&#xA;  the implementation treats the source and target of the omitted copy/move operation as simply two different&#xA;  ways of referring to the same object, and the destruction of that object occurs at the later of the times&#xA;  when the two objects would have been destroyed without the optimization.<sup>123</sup> This elision of copy/move&#xA;  operations, called <em>copy elision</em>, is permitted in the following circumstances (which may be combined to&#xA;  eliminate multiple copies):</p>&#xA;  &#xA;  <p>ΓÇö in a return statement in a function with a class return type, when the expression is the name of a&#xA;  non-volatile automatic object (other than a function or catch-clause parameter) with the same cvunqualified&#xA;  type as the function return type, the copy/move operation can be omitted by constructing&#xA;  the automatic object directly into the functionΓÇÖs return value</p>&#xA;  &#xA;  <p>ΓÇö in a throw-expression, when the operand is the name of a non-volatile automatic object (other than a&#xA;  function or catch-clause parameter) whose scope does not extend beyond the end of the innermost&#xA;  enclosing try-block (if there is one), the copy/move operation from the operand to the exception&#xA;  object (15.1) can be omitted by constructing the automatic object directly into the exception object</p>&#xA;  &#xA;  <p>ΓÇö when a temporary class object that has not been bound to a reference (12.2) would be copied/moved&#xA;  to a class object with the same cv-unqualified type, the copy/move operation can be omitted by&#xA;  constructing the temporary object directly into the target of the omitted copy/move</p>&#xA;  &#xA;  <p>ΓÇö when the exception-declaration of an exception handler (Clause 15) declares an object of the same type&#xA;  (except for cv-qualification) as the exception object (15.1), the copy/move operation can be omitted&#xA;  by treating the exception-declaration as an alias for the exception object if the meaning of the program&#xA;  will be unchanged except for the execution of constructors and destructors for the object declared by&#xA;  the exception-declaration.</p>&#xA;  &#xA;  <p><sub>123) Because only one object is destroyed instead of two, and one copy/move constructor is not executed, there is still one&#xA;  object destroyed for each one constructed.</sub></p>&#xA;</blockquote>&#xA;&#xA;<p>The example given is:</p>&#xA;&#xA;<pre><code>class Thing {&#xA;public:&#xA;  Thing();&#xA;  ~Thing();&#xA;  Thing(const Thing&amp;);&#xA;};&#xA;Thing f() {&#xA;  Thing t;&#xA;  return t;&#xA;}&#xA;Thing t2 = f();&#xA;</code></pre>&#xA;&#xA;<p>and explained:</p>&#xA;&#xA;<blockquote>&#xA;  <p>Here the criteria for elision can be combined to eliminate two calls to the copy constructor of class <code>Thing</code>:&#xA;  the copying of the local automatic object <code>t</code> into the temporary object for the return value of function <code>f()</code>&#xA;  and the copying of that temporary object into object <code>t2</code>. Effectively, the construction of the local object <code>t</code>&#xA;  can be viewed as directly initializing the global object <code>t2</code>, and that objectΓÇÖs destruction will occur at program&#xA;  exit. Adding a move constructor to Thing has the same effect, but it is the move construction from the&#xA;  temporary object to <code>t2</code> that is elided.</p>&#xA;</blockquote>&#xA;
   328413 |    1 | <p>To get it right, you really need to make three passes:</p>&#xA;&#xA;<ol>&#xA;<li>Find [code] blocks and replace them with a unique token + index (saving the original block), e.g., "foo [code]abc[/code] bar[code]efg[/code]" becomes "foo TOKEN-1 barTOKEN-2"</li>&#xA;<li>Do your newline replacement.</li>&#xA;<li>Scan for escape tokens and restore the original block.</li>&#xA;</ol>&#xA;&#xA;<p>The code looks something* like:</p>&#xA;&#xA;<pre><code>Matcher m = escapePattern.matcher(input);&#xA;while(m.find()) {&#xA;    String key = nextKey();&#xA;    escaped.put(key,m.group());&#xA;    m.appendReplacement(output1,"TOKEN-"+key);&#xA;}&#xA;m.appendTail(output1);&#xA;Matcher m2 = newlinePatten.matcher(output1);&#xA;while(m2.find()) {&#xA;    m.appendReplacement(output2,newlineReplacement);&#xA;}&#xA;m2.appendTail(output2);&#xA;Matcher m3 = Pattern.compile("TOKEN-(\\d+)").matcher(output2); &#xA;while(m3.find()) {&#xA;    m.appendReplacement(finalOutput,escaped.get(m3.group(1)));&#xA;}&#xA;m.appendTail(finalOutput);&#xA;</code></pre>&#xA;&#xA;<p>That's the quick and dirty way. There are more efficient ways (others have mentioned parser/lexers), but unless you're processing millions of lines and your code is CPU bound (rather than I/O bound, like most webapps) and you've confirmed with a profiler that this is the bottleneck, they probably aren't worth it.</p>&#xA;&#xA;<p>* I haven't run it, this is all from memory. Just check the <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Matcher.html" rel="nofollow">API</a> and you'll be able to work it out.</p>&#xA;
  4096559 |    1 | <p>FluentDOM uses the DOMDocument but blocks loading notices and warnings. It does not have an own parser. You can add your own loaders (For example one that uses the html5lib).</p>&#xA;
  4800053 |    1 | <p>Yes, it's valid to suspend a dispatch object from any queue.  If a block is currently running when dispatch_suspend() is called, that block will complete execution and subsequent scheduled blocks will be prevented from executing.</p>&#xA;
    30420 |    1 | <p>A short list might be:</p>&#xA;&#xA;<ul>&#xA;<li>Avoid memory leaks through use shared pointers to manage memory allocation and cleanup</li>&#xA;<li>Use the <a href="https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" rel="nofollow">Resource Acquisition Is Initialization</a> (RAII) idiom to manage resource cleanup - especially in the presence of exceptions</li>&#xA;<li>Avoid calling virtual functions in constructors</li>&#xA;<li>Employ minimalist coding techniques where possible - for example, declaring variables only when needed, scoping variables, and early-out design where possible. </li>&#xA;<li>Truly understand the exception handling in your code - both with regard to exceptions you throw, as well as ones thrown by classes you may be using indirectly. This is especially important in the presence of templates.</li>&#xA;</ul>&#xA;&#xA;<p>RAII, shared pointers and minimalist coding are of course not specific to C++, but they help avoid problems that do frequently crop up when developing in the language. </p>&#xA;&#xA;<p>Some excellent books on this subject are:</p>&#xA;&#xA;<ul>&#xA;<li>Effective C++ - Scott Meyers</li>&#xA;<li>More Effective C++ - Scott Meyers</li>&#xA;<li>C++ Coding Standards - Sutter &amp; Alexandrescu</li>&#xA;<li>C++ FAQs - Cline</li>&#xA;</ul>&#xA;&#xA;<p>Reading these books has helped me more than anything else to avoid the kind of pitfalls you are asking about.</p>&#xA;
    37322 |    1 | <blockquote>&#xA;  <p>Virtual functions in constructors, why do languages differ?</p>&#xA;</blockquote>&#xA;&#xA;<p>Because there's no one good behaviour.  I find the C++ behaviour makes more sense (since base class c-tors are called first, it stands to reason that they should call base class virtual functions--after all, the derived class c-tor hasn't run yet, so it may not have set up the right preconditions for the derived class virtual function).</p>&#xA;&#xA;<p>But sometimes, where I want to use the virtual functions to initialize state (so it doesn't matter that they're being called with the state uninitialized) the C#/Java behaviour is nicer.</p>&#xA;
   628474 |    1 | <p>inline blocks (alternative to floating divs):</p>&#xA;&#xA;<pre><code>.inline_block&#xA;{&#xA;    display:-moz-inline-box;&#xA;    display:inline-block;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p><strong>Don't apply this class to a div!</strong> it won't work! apply it to a span (or an inline element)</p>&#xA;&#xA;<pre><code>&lt;span class="inline_block"&gt;&#xA;&lt;/span&gt;&#xA;</code></pre>&#xA;
  3130141 |    1 | <p>I have a WordPress plugin that loads pages with AJAX and to ensure compatibility with other plugins and "widgets."</p>&#xA;&#xA;<p>As of right now I use the following code to evaluate all inline JS that is inside the content blocks to be updated:</p>&#xA;&#xA;<pre><code>  function do_JS(e){&#xA;        var Reg = '(?:&lt;script.*?&gt;)((\n|.)*?)(?:&lt;/script&gt;)';&#xA;        var match    = new RegExp(Reg, 'img');&#xA;        var scripts  = e.innerHTML.match(match);&#xA;        var doc = document.write;&#xA;        document.write = function(p){ e.innerHTML = e.innerHTML.replace(scripts[s],p)};&#xA;        if(scripts) {&#xA;            for(var s = 0; s &lt; scripts.length; s++) {&#xA;                var js = '';&#xA;                var match = new RegExp(Reg, 'im');&#xA;                js = scripts[s].match(match)[1];&#xA;                js = js.replace('&lt;!--','');&#xA;                js = js.replace('--&gt;','');&#xA;                eval('try{'+js+'}catch(e){}');&#xA;            }&#xA;        }&#xA;        document.write = doc;&#xA;    }&#xA;</code></pre>&#xA;&#xA;<p>I'd like to be able to sandbox the JS a bit better so that the risk of conflicts are minimized. One idea I had was to dynamically create an <code>&lt;iframe&gt;</code> and run the JS inside of it, but I was hoping there was a bit better method to both ensure compatibility and increase security.</p>&#xA;
  6273432 |    1 | <p>If you define a parameterized constructor in <code>CBase</code>, there <em>is no default constructor</em>. You do not need to do anything special.</p>&#xA;&#xA;<p>If your intention is for all derived classes of <code>CAbstract</code> to implement a parameterized constructor, that is not something you can (cleanly) accomplish. The derived types have freedom to provide their own members, including constructor overloads.</p>&#xA;&#xA;<p>The only thing <em>required</em> of them is that if <code>CAbstract</code> only exposes a parameterized constructor, the constructors of derived types must invoke it directly.</p>&#xA;&#xA;<pre><code>class CDerived : CAbstract&#xA;{&#xA;     public CDerived() : base("some default argument") { }&#xA;     public CDerived(string arg) : base(arg) { }&#xA;}&#xA;</code></pre>&#xA;
 12939100 |    1 | <p>What does copying an object mean? &#xA;There are a few ways you can copy objects--let's talk about the 2 kinds you're most likely referring to--deep copy and shallow copy.</p>&#xA;&#xA;<p>Since we're in an object-oriented language (or at least are assuming so), let's say you have a piece of memory allocated.  Since it's an OO-language, we can easily refer to chunks of memory we allocate because they are usually primitive variables (ints, chars, bytes) or classes we defined that are made of our own types and primitives.  So let's say we have a class of Car as follows:</p>&#xA;&#xA;<pre><code>class Car //A very simple class just to demonstrate what these definitions mean.&#xA;//It's pseudocode C++/Javaish, I assume strings do not need to be allocated.&#xA;{&#xA;private String sPrintColor;&#xA;private String sModel;&#xA;private String sMake;&#xA;&#xA;public changePaint(String newColor)&#xA;{&#xA;   this.sPrintColor = newColor;&#xA;}&#xA;&#xA;public Car(String model, String make, String color) //Constructor&#xA;{&#xA;   this.sPrintColor = color;&#xA;   this.sModel = model;&#xA;   this.sMake = make;&#xA;}&#xA;&#xA;public ~Car() //Destructor&#xA;{&#xA;//Because we did not create any custom types, we aren't adding more code.&#xA;//Anytime your object goes out of scope / program collects garbage / etc. this guy gets called + all other related destructors.&#xA;//Since we did not use anything but strings, we have nothing additional to handle.&#xA;//The assumption is being made that the 3 strings will be handled by string's destructor and that it is being called automatically--if this were not the case you would need to do it here.&#xA;}&#xA;&#xA;public Car(const Car &amp;other) // Copy Constructor&#xA;{&#xA;   this.sPrintColor = other.sPrintColor;&#xA;   this.sModel = other.sModel;&#xA;   this.sMake = other.sMake;&#xA;}&#xA;public Car &amp;operator =(const Car &amp;other) // Assignment Operator&#xA;{&#xA;   if(this != &amp;other)&#xA;   {&#xA;      this.sPrintColor = other.sPrintColor;&#xA;      this.sModel = other.sModel;&#xA;      this.sMake = other.sMake;&#xA;   }&#xA;   return *this;&#xA;}&#xA;&#xA;}&#xA;</code></pre>&#xA;&#xA;<p>A deep copy is if we declare an object and then create a completely separate copy of the object...we end up with 2 objects in 2 completely sets of memory.</p>&#xA;&#xA;<pre><code>Car car1 = new Car("mustang", "ford", "red");&#xA;Car car2 = car1; //Call the copy constructor&#xA;car2.changePaint("green");&#xA;//car2 is now green but car1 is still red.&#xA;</code></pre>&#xA;&#xA;<p>Now let's do something strange.  Let's say car2 is either programmed wrong or purposely meant to share the actual memory that car1 is made of.  (It's usually a mistake to do this and in classes is usually the blanket it's discussed under.)  Pretend that anytime you ask about car2, you're really resolving a pointer to car1's memory space...that's more or less what a shallow copy is.</p>&#xA;&#xA;<pre><code>//Shallow copy example&#xA;//Assume we're in C++ because it's standard behavior is to shallow copy objects if you do not have a constructor written for an operation.&#xA;//Now let's assume I do not have any code for the assignment or copy operations like I do above...with those now gone, C++ will use the default.&#xA;&#xA; Car car1 = new Car("ford", "mustang", "red"); &#xA; Car car2 = car1; &#xA; car2.changePaint("green");//car1 is also now green &#xA; delete car2;/*I get rid of my car which is also really your car...I told C++ to resolve &#xA; the address of where car2 exists and delete the memory...which is also&#xA; the memory associated with your car.*/&#xA; car1.changePaint("red");/*program will likely crash because this area is&#xA; no longer allocated to the program.*/&#xA;</code></pre>&#xA;&#xA;<p>So regardless of what language you're writing in, be very careful about what you mean when it comes to copying objects because most of the time you want a deep copy.</p>&#xA;&#xA;<p>What are the copy constructor and the copy assignment operator?&#xA;I have already used them above.  The copy constructor is called when you type code such as <code>Car car2 = car1;</code>  Essentially if you declare a variable and assign it in one line, that's when the copy constructor is called.  The assignment operator is what happens when you use an equal sign--<code>car2 = car1;</code>.  Notice <code>car2</code> isn't declared in the same statement.  The two chunks of code you write for these operations are likely very similar.  In fact the typical design pattern has another function you call to set everything once you're satisfied the initial copy/assignment is legitimate--if you look at the longhand code I wrote, the functions are nearly identical.</p>&#xA;&#xA;<p>When do I need to declare them myself? &#xA;If you are not writing code that is to be shared or for production in some manner, you really only need to declare them when you need them.  You do need to be aware of what your program language does if you choose to use it 'by accident' and didn't make one--i.e. you get the compiler default.  I rarely use copy constructors for instance, but assignment operator overrides are very common.  Did you know you can override what addition, subtraction, etc. mean as well?</p>&#xA;&#xA;<p>How can I prevent my objects from being copied?&#xA;Override all of the ways you're allowed to allocate memory for your object with a private function is a reasonable start.  If you really don't want people copying them, you could make it public and alert the programmer by throwing an exception and also not copying the object.  </p>&#xA;
   117173 |    1 | <p><strong>I do not currently have this issue</strong>, but you never know, and thought experiments are always fun.</p>&#xA;&#xA;<p><strong>Ignoring the obvious problems that you would have to have with your architecture to even be attempting this</strong>, let's assume that you had some horribly-written code of someone else's design, and you needed to do a bunch of wide and varied operations in the same code block, e.g.:</p>&#xA;&#xA;<pre><code>WidgetMaker.SetAlignment(57);&#xA;contactForm["Title"] = txtTitle.Text;&#xA;Casserole.Season(true, false);&#xA;((RecordKeeper)Session["CasseroleTracker"]).Seasoned = true;&#xA;</code></pre>&#xA;&#xA;<p>Multiplied by a hundred.  Some of these might work, others might go badly wrong.  What you need is the C# equivalent of "on error resume next", otherwise you're going to end up copying and pasting try-catches around the many lines of code.</p>&#xA;&#xA;<p>How would you attempt to tackle this problem?</p>&#xA;
   407446 |    1 | <p><strong>Code layout does matter</strong></p>&#xA;&#xA;<p>Maybe specifics of brace position should remain purely religious arguments - but it doesn't mean that all layout styles are equal, or that there are no objective factors at all!</p>&#xA;&#xA;<p>The trouble is that the uber-rule for layout, namely: "be consistent", sound as it is, is used as a crutch by many to never try to see if their default style can be improved on - and that, furthermore, it <em>doesn't even matter</em>.</p>&#xA;&#xA;<p>A few years ago I was studying Speed Reading techniques, and some of the things I learned about how the eye takes in information in "fixations", can most optimally scan pages, and the role of subconsciously picking up context, got me thinking about how this applied to code - and writing code with it in mind especially.</p>&#xA;&#xA;<p>It led me to a style that tended to be columnar in nature, with identifiers logically grouped and aligned where possible (in particular I became strict about having each method argument on its own line). However, rather than long columns of unchanging structure it's actually beneficial to vary the structure in blocks so that you end up with rectangular islands that the eye can take in in a single fixture - even if you don't consciously read every character.</p>&#xA;&#xA;<p>The net result is that, once you get used to it (which typically takes 1-3 days) it becomes pleasing to the eye, easier and faster to comprehend, and is less taxing on the eyes and brain because it's laid out in a way that makes it easier to take in.</p>&#xA;&#xA;<p>Almost without exception, everyone I have asked to try this style (including myself) initially said, "ugh I hate it!", but after a day or two said, "I love it - I'm finding it hard not to go back and rewrite all my old stuff this way!".</p>&#xA;&#xA;<p>I've been hoping to find the time to do more controlled experiments to collect together enough evidence to write a paper on, but as ever have been too busy with other things. However this seemed like a good opportunity to mention it to people interested in controversial techniques :-)</p>&#xA;&#xA;<p>[Edit]</p>&#xA;&#xA;<p>I finally got around to blogging about this (after many years parked in the "meaning to" phase): <a href="http://www.levelofindirection.com/journal/2009/9/24/code-formatting-in-c-part-one.html" rel="nofollow">Part one</a>, <a href="http://www.levelofindirection.com/journal/2009/10/5/code-formatting-in-c-part-two.html" rel="nofollow">Part two</a>, <a href="http://www.levelofindirection.com/journal/2009/11/11/code-formatting-in-c-part-three.html" rel="nofollow">Part three</a>.</p>&#xA;
    26003 |    1 | <p>This is just one of those silly discussions that lead to nowhere. If you like regions, use them. If you don't, configure your editor to turn them off. There, everybody is happy.</p>&#xA;
  1736801 |    1 | <p><strong>Disclaimer</strong>: use a parser if you have the option. That said...</p>&#xA;&#xA;<p>This is the regex I use (!) to match HTML tags:</p>&#xA;&#xA;<pre><code>&lt;(?:"[^"]*"['"]*|'[^']*'['"]*|[^'"&gt;])+&gt;&#xA;</code></pre>&#xA;&#xA;<p>It may not be perfect, but I ran this code through a <em>lot</em> of HTML. Note that it even catches strange things like <code>&lt;a name="badgenerator""&gt;</code>, which show up on the web.</p>&#xA;&#xA;<p>I guess to make it not match self contained tags, you'd either want to use <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732395#1732395">Kobi</a>'s negative look-behind:</p>&#xA;&#xA;<pre><code>&lt;(?:"[^"]*"['"]*|'[^']*'['"]*|[^'"&gt;])+(?&lt;!/\s*)&gt;&#xA;</code></pre>&#xA;&#xA;<p>or just combine if and if not.</p>&#xA;&#xA;<p><strong>To downvoters:</strong> This is working code from an actual product. I doubt anyone reading this page will get the impression that it is socially acceptable to use regexes on HTML. </p>&#xA;&#xA;<p><strong>Caveat</strong>: I should note that this regex still breaks down in the presence of CDATA blocks, comments, and script and style elements. Good news is, you can get rid of those using a regex...  </p>&#xA;
    64956 |    1 | <p>A lot of the magic you see in Rubyland has to do with metaprogramming, which is simply writing code that writes code for you. Ruby's <code>attr_accessor</code>, <code>attr_reader</code>, and <code>attr_writer</code> are all simple metaprogramming, in that they create two methods in one line, following a standard pattern. Rails does a whole lot of metaprogramming with their relationship-management methods like <code>has_one</code> and <code>belongs_to</code>.</p>&#xA;&#xA;<p>But it's pretty simple to create your own metaprogramming tricks using <code>class_eval</code> to execute dynamically-written code.</p>&#xA;&#xA;<p>The following example allows a wrapper object to forwards certain methods along to an internal object:</p>&#xA;&#xA;<pre><code>class Wrapper&#xA;  attr_accessor :internal&#xA;&#xA;  def self.forwards(*methods)&#xA;    methods.each do |method|&#xA;      define_method method do |*arguments, &amp;block|&#xA;        internal.send method, *arguments, &amp;block&#xA;      end&#xA;    end&#xA;  end&#xA;&#xA;  forwards :to_i, :length, :split&#xA;end&#xA;&#xA;w = Wrapper.new&#xA;w.internal = "12 13 14"&#xA;w.to_i        # =&gt; 12&#xA;w.length      # =&gt; 8&#xA;w.split('1')  # =&gt; ["", "2 ", "3 ", "4"]&#xA;</code></pre>&#xA;&#xA;<p>The method <code>Wrapper.forwards</code> takes symbols for the names of methods and stores them in the <code>methods</code> array. Then, for each of those given, we use <code>define_method</code> to create a new method whose job it is to send the message along, including all arguments and blocks.</p>&#xA;&#xA;<p>A great resource for metaprogramming issues is <a href="http://viewsourcecode.org/why/hacking/seeingMetaclassesClearly.html">Why the Lucky Stiff's "Seeing Metaprogramming Clearly"</a>.</p>&#xA;
(220 rows)

Time: 378,805 ms


-- D6

SELECT * from best_match_weighted('chocolate', 'regions');

  postid  | rank  |body

     5953 | 0.150 | <p>While I understand the problem that Jeff, et. al. have with regions, what I <em>don't</em> understand is why hitting CTRL-M,CTRL-L to expand all regions in a file is so difficult to deal with.</p>
     5962 | 0.150 | <p>I prefer partial classes as opposed to regions.</p>&#xD;&#xA;&#xD;&#xA;<p>Extensive use of regions by others also give me the impression that someone, somewhere, is violating the Single Responsibility Principle and is trying to do too many things with one object.</p>
     5971 | 0.150 | <p>I'm not a fan of partial classes - I try to develop my classes such that each class has a very clear, single issue for which it's responsible. To that end, I don't believe that something with a clear responsibility should be split across multiple files. That's why I don't like partial classes.</p>&#xD;&#xA;&#xD;&#xA;<p>With that said, I'm on the fence about regions. For the most part, I don't use them; however, I work with code every day that includes regions - some people go really heavy on them (folding up private methods into a region and then each method folded into its own region), and some people go light on them (folding up enums, folding up attributes, etc). My general rule of thumb, as of now, is that I only put code in regions if (a) the data is likely to remain static or will not be touched very often (like enums), or (b) if there are methods that are implemented out of necessity because of subclassing or abstract method implementation, but, again, won't be touched very often.</p>
     6295 | 0.150 | <p>I really don't have a problem with using #region to organize code.  Personally, I'll usually setup different regions for things like properties, event handlers, and public/private methods.</p>
     9049 | 0.150 | <p>Regions must never be used inside methods. They may be used to group methods but this must be handled with extreme caution so that the reader of the code does not go insane. There is no point in folding methods by their modifiers. But sometimes folding may increase readability. For e.g. grouping some methods that you use for working around some issues when using an external library and you won't want to visit too often may be helpful. But the coder must always seek for solutions like wrapping the library with appropriate classes in this particular example. When all else fails, use folding for improving readibility.</p>&#xA;
     9063 | 0.150 | <p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx" rel="nofollow">Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;
    26003 | 0.150 | <p>This is just one of those silly discussions that lead to nowhere. If you like regions, use them. If you don't, configure your editor to turn them off. There, everybody is happy.</p>&#xA;
    33023 | 0.150 | <p>Using regions (or otherwise folding code) <strong>should</strong> have nothing to do with code smells (or hiding them) or any other idea of hiding code you don't want people to "easily" see.</p>&#xA;&#xA;<p>Regions and code folding is really all about providing a way to easily group sections of code that can be collapsed/folded/hidden to minimize the amount of extraneous "noise" around what you are currently working on. If you set things up correctly (meaning actually name your regions something useful, like the name of the method contained) then you can collapse everything except for the function you are currently editing and still maintain some level of context without having to actually see the other code lines.</p>&#xA;&#xA;<p>There probably should be some best practice type guidelines around these ideas, but I use regions extensively to provide a standard structure to my code files (I group events, class-wide fields, private properties/methods, public properties/methods). Each method or property also has a region, where the region name is the method/property name. If I have a bunch of overloaded methods, the region name is the full signature and then that entire group is wrapped in a region that is just the function name.</p>&#xA;
   169288 | 0.150 | <p>Often times, both partials and #regions are used as a crutch for bad design (e.g. class is too big or tries to do too many things).</p>&#xA;&#xA;<p>The <em>best</em> use I've had for #regions so far is the grouping of functionality that is seen in many different classes. For example, value objects that have getters, setters, constructors and supporting fields. I might very well group those ideas into regions. Its a matter of opinion, however, as to whether that makes code cleaner or harder to read.</p>&#xA;
   169296 | 0.150 | <p><a href="http://www.rauchy.net/regionerate/" rel="nofollow">http://www.rauchy.net/regionerate/</a> - Automatically regionised your code ;)</p>&#xA;&#xA;<p>I'm a fan of regions for grouping sections of large classes, say all the properties together, all constances, etc. I'm someone who's constantly collapsing code I don't need to see at that time so I love regions for that.</p>&#xA;&#xA;<p>Also I find regions really useful when implementing interfaces, particularly multiple interfaces. I can group each interfaces methods, properties, events, etc so it's easier at a glance to see what method belongs to what interface.</p>&#xA;
   169307 | 0.150 | <p>Going on with what has been previously said by Russell Myers, if you learn how to refactor your code properly (a skill proficient developers must learn), there really isn't too much of a need for regions.</p>&#xA;&#xA;<p>A couple of weeks ago I thought regions were great because they allowed me to hide my fat code, but after exercising my code skills I was able to make it slimmer and now I fit into a size 7 class (someone should SO make that a measurement for refactoring in the future! :P)</p>&#xA;
   169441 | 0.150 | <p>I find that they obfuscate the code in all but the simplest of uses. The only use we advocate in our projects are the ones the IDE uses (interface implementations and designer code).</p>&#xA;&#xA;<p>The right tools should be used for the right purpose. Code should be written to show intent and function rather than arbitrarily grouping things. Organizing things into access modifier grouping or some other grouping just seems to be illogical. I find the code should be organized in a manner that makes sense for the particular class; after all, there are other tools for viewing class members by access modifier. This is also the case for almost every other use of regions; there is a better way.</p>&#xA;&#xA;<p>For example, grouping properties, events, constants or otherwise together doesn't really make sense either as code is generally more maintainable if the things are grouped together by function (as in, a property that uses a constant should be near that constant, not near other unrelated properties just because it's a property).</p>&#xA;
   169465 | 0.150 | <p>Like any language feature, regions have the potential to be misused and abused but they also have their benefits.</p>&#xA;&#xA;<p>They are great for creating "folding" groups around:</p>&#xA;&#xA;<ul>&#xA;<li>methods, especially if you have a lot of overloaded methods</li>&#xA;<li>interface implementations</li>&#xA;<li>operator overloads</li>&#xA;</ul>&#xA;&#xA;<p>You can also use it to group properties, public/private methods, events, class-wide variables, etc.</p>&#xA;&#xA;<p>I use regions in my code to help create a consistent structure in my code so I always know where things are at a glance. Yes, it makes things a bit harder during refactoring or adding new functions (especially when autogenerated by Visual Studio) but I feel it's a small price to pay to keep things consistent and structured.</p>&#xA;
   217785 | 0.150 | <p>Region folding would be fine if I didn't have to manually maintain region groupings based on features of my code that are intrinsic to the language. For example, the compiler already knows it's a constructor. The IDE's code model already knows it's a constructor. But if I want to see a view of the code where the constructors are grouped together, for some reason I have to restate the fact that these things are constructors, by physically placing them together and then putting a group around them. The same goes for any other way of slicing up a class/struct/interface. What if I change my mind and want to see the public/protected/private stuff separated out into groups first, and then grouped by member kind?</p>&#xA;&#xA;<p>Using regions to mark out public properties (for example) is as bad as entering a redundant comment that adds nothing to what is already discernable from the code itself.</p>&#xA;&#xA;<p>Anyway, to avoid having to use regions for that purpose, I wrote a free, open source Visual Studio 2008 IDE add-in called Ora. It provides a grouped view automatically, making it far less necessary to maintain physical grouping or to use regions. <a href="http://www.codeplex.com/ora" rel="nofollow">You may find it useful</a>.</p>&#xA;
   225330 | 0.150 | <p>I'm writing a tool to report information about .NET applications deployed across environments and regions within my client's systems.</p>&#xA;&#xA;<p>I'd like to read the values of assembly attributes in these assemblies.</p>&#xA;&#xA;<p>This can be achieved using <code>Assembly.ReflectionOnlyLoad</code>, however even this approach keeps the assembly loaded.  The issue here is that I cannot load two assemblies that have the same name from different paths, so naturally I can't compare the same application deployed in different systems.</p>&#xA;&#xA;<p>At this point I'm assuming the solution will involve using temporary <code>AppDomain</code>s.</p>&#xA;&#xA;<p>Can someone detail how to load an assembly into another <code>AppDomain</code>, read the attributes from it and then unload the <code>AppDomain</code>?</p>&#xA;&#xA;<p>This needs to work for assemblies on the file system as well as those at URL addresses.</p>&#xA;
   287371 | 0.150 | <p>There are times when your methods HAVE to be long, especially with web development.  In those cases (such as when I've got a gridview with a large, complex object bound to it) I've found it useful to use regions:</p>&#xA;&#xA;<pre><code>#region Declaring variables for fields and object properties&#xA;&#xA;#region Getting the fields in scope&#xA;&#xA;#region Getting the properties of the object&#xA;&#xA;#region Setting Fields&#xA;</code></pre>&#xA;&#xA;<p>These are discreet sections of the method that COULD be broken out, but it would be difficult (I'd have to use variables with larger scope than I like or pass a LOT of variables as 'out'), and it is basic plumbing.</p>&#xA;&#xA;<p>In this case, regions are perfectly acceptable.  In others, they are needless.</p>&#xA;&#xA;<p>I will also use regions to group methods into logical groups.  I reject partial classes for this purpose, as I tend to have a lot of pages open when I'm debugging, and the fewer partial classes there are in an object (or page, or dialog), the more of them I can have on my tab list (which I limit to one line so I can see more code).</p>&#xA;&#xA;<p>Regions are only a problem when used as a crutch, or when they cover poor code (for instance, if you are nesting regions inside of each other within the same scope, it's a bad sign).</p>&#xA;
   287438 | 0.150 | <p>Nice answers, I agree with them that say it sometimes reflects bad coding and design but #region actually is usefull if you're creating documentation (MSDN style) with the SandCastle.&#xA;Lets say you have a public API and there is some base class that you want to give an example of usage for. Then you would properly document your public methods and add an example region where you could copy and paste some code. Problem with this is that when/if your base class changes you're supposed to change the example eventually. Better solution is to include a sample code project in your solution and build it all together, so everytime you build your solution if the sample code is not up to date it will not compile. So what does that have to do with regions you will be asking your self by now. Well look at this sample: </p>&#xA;&#xA;<pre><code>/// &lt;example&gt;&#xA;    /// The following code sample is an implementation of LoadPublishedVersion() for XmlPageProvider.&#xA;    /// &lt;code source="../CodeSamples/EPiServerNET/PageProvider/XmlPageProvider.cs" region="LoadPublishedVersion" lang="cs"/&gt;&#xA;    /// &lt;/example&gt;&#xA;</code></pre>&#xA;&#xA;<p>Notice there is a link to the source code sample file and region for the method that you want to expose as a sample in your documentation. <a href="http://sdk.episerver.com/library/cms5/html/M_EPiServer_Core_PageProviderBase_LoadPublishedVersion_1.htm" rel="nofollow">See here the result</a>. That method needs to be in a proper region and will be automatically included in your documentation. That's why I wouldn't throw away #region yet.</p>&#xA;
   287444 | 0.150 | <p>I often use them <em>instead of comments</em> to order groups of functionality in the body of a class, e.g. "Configuration public interface", "Status public interface", "internal processing" and "internal worker thread management".</p>&#xA;&#xA;<p>Using the keyboard shortcuts to "collapse to definitions" and "expand current block", I can easily navigate even larger classes. </p>&#xA;&#xA;<p>Unfortunately, Regions are broken for C++, and MS doesn't think it needs to be fixed.</p>&#xA;
   296515 | 0.150 | <p>Our Business Objects all have Regions - and we love them.</p>&#xA;&#xA;<p>We have;</p>&#xA;&#xA;<ul>&#xA;<li>Business Properties and Methods</li>&#xA;<li>Shared Methods</li>&#xA;<li>Constructors</li>&#xA;<li>Authorization</li>&#xA;<li>Data Access</li>&#xA;<li>Events</li>&#xA;</ul>&#xA;&#xA;<p>We have a few others depending on the type of Business Object we are dealing with (Subscriber etc)</p>&#xA;&#xA;<p>For many classes regions just get in the way - but for our standard business objects they save us a ton of time.   These Business Objects are code gen'd, so they are very consistent.  Can get to where I want to be way faster than the clutter if they aren't, and the consistency makes it easy to find each other's stuff.</p>&#xA;
   407790 | 0.150 | <p>I think that using regions in C# is totally acceptable to collapse your code while in VS. Too many people try to say it hides your code and makes it hard to find things. But if you use them properly they can be very helpful to identify sections of code.</p>&#xA;
   444995 | 0.150 | <p>First, I think you already considered using an ORM vs. rolling your own. I won't go into this one.</p>&#xA;&#xA;<p>My thoughts on rolling your own data access code:</p>&#xA;&#xA;<ul>&#xA;<li>Over time, I found it easier not to have separate DAL/BL objects, but rather merge them into a single object (some time later after reaching this conclusion I found out it's a pretty well known pattern - namely ActiveRecord). It might look nice and decoupled to have separate DAL assemblies, but the overhead in maintenance costs will add up. Everytime you add a new feature, you'll have to create more code/modify more classes. In my experience, the team that maintains the application is often way less than the original team of developers that built it, and they'll hate the extra work required.</li>&#xA;<li>For large teams, it might make sense to separate the DAL (and let a group work on it while the others. But this makes a good incentive for code bloat.</li>&#xA;<li>Coming down to your specific sample: how do you use the resulting DataTable? Iterate the rows, create typed objects and get the data from the row? If the answer is yes, think of the extra DataTable you created just for moving data between the DAL and the BL. Why not take it directly from the DataReader?</li>&#xA;<li>Also about the sample: if you return an untyped DataTable, then I guess you have to use the column names (of the result set the SP call returns) way up in the calling code. This means if I have to change something in the database, it might affect both layers.</li>&#xA;</ul>&#xA;&#xA;<p>My suggestion (I tried both methods - the suggestion is the latest working approach I came up with - it sort of evolved over time).</p>&#xA;&#xA;<ul>&#xA;<li>Make a base class for your typed business objects.</li>&#xA;<li>Keep object state in the base class (new, modified etc.)</li>&#xA;<li>Put the main data access methods in this class, as static methods. With a little effort (hint: generic methods + Activator.CreateInstance) you can create one business object per each row returned in the reader.</li>&#xA;<li>make an abstract method in the business object for parsing the row data (directly from the DataReader!) and fill the object.</li>&#xA;<li>make static methods in the derived business objects that prepare the stored proc parameters (depending on various filter criteria) and call the generic data access methods from the base class.</li>&#xA;</ul>&#xA;&#xA;<p>The aim is to end up with usage such as:</p>&#xA;&#xA;<pre><code>List&lt;MyObject&gt; objects = MyObject.FindMyObject(string someParam);&#xA;</code></pre>&#xA;&#xA;<p>The benefit for me was that I only have to change one file in order to cope with changes in the database column names, types etc. (small changes in general). With some well thought regions, you can organize the code so that they're separate "layers" in the same object :). The other benefit is that the base class is really reusable from one project to another. And the code bloat is minimal (well, compared with the benefits. You could also fill datasets and bind them to UI controls :D</p>&#xA;&#xA;<p>The limitations - you end up with one class per domain object (usually per main database table). And you can't load objects in existing transactions (although you could think of passing on the transaction, if you have one).</p>&#xA;&#xA;<p>Let me know if you're interested in more details - I could expand the answer a bit.</p>&#xA;
   578164 | 0.150 | <p>I love regions because it helps me focus on just what I am working on.  I use them even if the class just has a method.  </p>&#xA;&#xA;<p>I use code snippets with regions already pre-populated, which is less typing.  I feel the class is more organized and does what Code Complete talks about make it nicer for other people to read.  The compiler just ignores them, they are now to make code more readable.</p>&#xA;
   676627 | 0.150 | <p>My working day starts with opening files in editor and clicking on "Expand All" to hide all regions. After that I can begin to work.</p>&#xA;
  3138257 | 0.150 | <p>Also useful, but not commonly used : <a href="http://msdn.microsoft.com/en-us/library/ms228973.aspx" rel="nofollow">Constrained Execution Regions</a>.</p>&#xA;&#xA;<p>A quote from BCL Team blog :</p>&#xA;&#xA;<blockquote>&#xA;  <p>Constrained execution regions (CER's)&#xA;  exist to help a developer write her&#xA;  code to maintain consistency.  The CLR&#xA;  doesn't guarantee that the developer's&#xA;  code is correct, but the CLR does&#xA;  hoist all of the runtime-induced&#xA;  failure points (ie, async exceptions)&#xA;  to either before the code runs, or&#xA;  after it has completed.  Combined with&#xA;  constraints on what the developer can&#xA;  put in a CER, these are a useful way&#xA;  of making strong guarantees about&#xA;  whether your code will execute.  CER's&#xA;  are eagerly prepared, meaning that&#xA;  when we see one, we will eagerly JIT&#xA;  any code found in its&#xA;  statically-discoverable call graph. &#xA;  If the CLR's host cares about stack&#xA;  overflow, we'll probe for some amount&#xA;  of stack space as well (though perhaps&#xA;  not enough stack space for any&#xA;  arbitrary method*).  We also delay&#xA;  thread aborts until the CER has&#xA;  finished running.</p>&#xA;</blockquote>&#xA;&#xA;<p>It can be useful when making edits to more than one field of a data structure in an atomic fashion. So it helps to have transactions on objects.</p>&#xA;&#xA;<p>Also <a href="http://msdn.microsoft.com/en-us/library/system.runtime.constrainedexecution.criticalfinalizerobject.aspx" rel="nofollow">CriticalFinalizerObject</a> seems to be hidden(at least who are not writing unsafe code).&#xA;A CriticalFinalizerObject guarantees that garbage collection will execute the finalizer. Upon allocation, the finalizer and its call graph are prepared in advance. </p>&#xA;
  6875294 | 0.150 | <p>In developing my first ASP.NET MVC 3 app using the jqGrid to display some data, I'm using the column header filters and also allowing for the advanced filter toolbar filtering to be done.  Independently these things work pretty well.</p>&#xA;&#xA;<p><strong>First question -</strong> Has anyone a solution for communicating the current column header filter settings to the advanced filters?  </p>&#xA;&#xA;<p>As an example, a user can filter on the "Ice Cream Name" column, entering a partial name, e.g., "Chocolate", and it'll filter down to "Chocolate Explosion", "Dark Chocolate", etc. - great.  What would be nice would be to open the advanced filter and have that "contains 'Chocolate'" column filter automatically populated in the advanced filter.  I recognize that the other direction (where someone could AND or OR two values for the same column, e.g. 'Chocolate' OR 'Caramel') becomes problematic but in the other direction, it seems like it might be possible.  Perhaps this is just a setting of the grid I'm missing.  Anyone solved this?</p>&#xA;&#xA;<p><strong>Second question -</strong> I currently can do some filtering with the column header filters, show some result set in the grid and then go into the advanced filter dialog and set up a different filter.  That will display the correct results but the column header filters are not cleared, giving the impression that the filtering is not working.  How can I reset those column header filters after the use clicks the "Find" button on the dialog?</p>&#xA;
  7401218 | 0.150 | <p>I just checked this for another question: <a href="http://stackoverflow.com/questions/242841/javascript-foreach-vs-for/6442930#6442930">JavaScript foreach Vs for</a>.</p>&#xA;&#xA;<p>On kangax's <a href="http://kangax.github.com/es5-compat-table/">ECMAScript 5 compatibility table</a>, Array.forEach gets a 'yes' for all browsers except IE8. </p>&#xA;&#xA;<p>As of September 2011, IE browser share on desktop devices is <a href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#Summary_table">less than 40%</a>, and <a href="http://marketshare.hitslink.com/browser-market-share.aspx?qprid=2&amp;qpcustomd=0">at least 8% of browsers are IE 9</a>. </p>&#xA;&#xA;<p>In other words, Array.forEach is now supported by around 70% of desktop browsers. Obviously, this figure varies considerably, depending on territory and other factors -- some regions or countries (such as Brasil) have a higher proportion of Chrome users, for example, and some (such as China) have far more users on IE6 and IE8.</p>&#xA;&#xA;<p>I haven't checked, but mobile support (on WebKit and Opera browsers) may be even higher.</p>&#xA;
  8728042 | 0.150 | <p>Great List!</p>&#xA;&#xA;<p>I found another interesting solution for UI testing iOS applications.</p>&#xA;&#xA;<p><a href="http://www.zucchiniframework.org/" rel="nofollow">Zucchini Framework</a></p>&#xA;&#xA;<p>It is based on <code>UIAutomation</code>. &#xA;The framework let you write screen centric scenarios in Cucumber like style.&#xA;The scenarios can be executed in Simulator and on device from a console (it is CI friendly).</p>&#xA;&#xA;<p>The assertions are screenshot based. Sounds inflexible, but it gets you nice HTML report, with highlighted screen comparison and you can provide masks which define the regions you want to have pixel exact assertion.</p>&#xA;&#xA;<p>Each screen has to be described in <code>CoffeScript</code> and the tool it self is written in ruby. &#xA;It is kind of polyglott nightmare, but the tool provides a nice abstraction for <code>UIAutomation</code> and when the screens are described it is manageable even for QA person.</p>&#xA;
  9030438 | 0.150 | <p>I personally hate regions. The only code that should be in regions in my opinion is generated code.&#xA;When I open file I always start with Ctrl+M+O. This folds to method level. When you have regions you see nothing but region names.</p>&#xA;&#xA;<p>Before checking in I group methods/fields logically so that it looks ok after Ctrl+M+O.&#xA;If you need regions you have to much lines in your class. I also find that this is very common.</p>&#xA;&#xA;<h1>region ThisLooksLikeWellOrganizedCodeBecauseIUseRegions</h1>&#xA;&#xA;<p>// total garbage, no structure here</p>&#xA;&#xA;<h1>endregion</h1>&#xA;
 10930280 | 0.150 | <p>I am using Spring, Hibernate and JPA Entity Manager. When fetching different regions of the UI concurrently (via jquery/ajax) , I would like to synchronise access to JPA Entity Manager, as otherwise it results in shared references to collections exception. How do I achieve this ? I have a controller that calls service methods in the backend which are responsible for calling get/save etc on entitymanager.</p>&#xA;
 11211519 | 0.150 | <p>Using <code>memcpy</code> to copy between overlapping memory regions.  For example:</p>&#xA;&#xA;<pre><code>char a[256] = {};&#xA;memcpy(a, a, sizeof(a));&#xA;</code></pre>&#xA;&#xA;<p>The behavior is undefined according to the C Standard, which is subsumed by the C++03 Standard.</p>&#xA;&#xA;<h2>7.21.2.1 The memcpy function</h2>&#xA;&#xA;<blockquote>&#xA;  <p>Synopsis </p>&#xA;  &#xA;  <p>1/ #include  void *memcpy(void * restrict s1, const&#xA;  void * restrict s2, size_t n); </p>&#xA;  &#xA;  <p>Description </p>&#xA;  &#xA;  <p>2/ The memcpy function&#xA;  copies n characters from the object pointed to by s2 into the object&#xA;  pointed to by s1. If copying takes place between objects that overlap,&#xA;  the behavior is undefined. Returns 3 The memcpy function returns the&#xA;  value of s1.</p>&#xA;</blockquote>&#xA;&#xA;<h2>7.21.2.2 The memmove function</h2>&#xA;&#xA;<blockquote>&#xA;  <p>Synopsis</p>&#xA;  &#xA;  <p>1 #include  void *memmove(void *s1, const void *s2, size_t&#xA;  n);</p>&#xA;  &#xA;  <p>Description</p>&#xA;  &#xA;  <p>2 The memmove function copies n characters from the object pointed to&#xA;  by s2 into the object pointed to by s1. Copying takes place as if the&#xA;  n characters from the object pointed to by s2 are first copied into a&#xA;  temporary array of n characters that does not overlap the objects&#xA;  pointed to by s1 and s2, and then the n characters from the temporary&#xA;  array are copied into the object pointed to by s1. Returns</p>&#xA;  &#xA;  <p>3 The memmove function returns the value of s1.</p>&#xA;</blockquote>&#xA;
 11730161 | 0.150 | <p>I don't generally use code regions, except in one specific case - dependency properties.  Although dependecy properties are a pleasure to work with in most respects, their declaraions are an eyesore and they quickly clutter your code.  (As if managing GUI code was not already enough of a challenge...)</p>&#xA;&#xA;<p>I like to give the region the same exact name as the CLR property declaration (copy/paste it in there).  That way you can see the scope, type and name when it's collapsed - which is really all you care about 95% of the time.</p>&#xA;&#xA;<pre><code>   #region public int ObjectDepthThreshold&#xA;&#xA;    public int ObjectDepthThreshold&#xA;    {&#xA;        get { return (int)GetValue(ObjectDepthThresholdProperty); }&#xA;        set { SetValue(ObjectDepthThresholdProperty, value); }&#xA;    }&#xA;&#xA;    public static readonly DependencyProperty ObjectDepthThresholdProperty = DependencyProperty.Register(&#xA;        &amp;quot;ObjectDepthThreshold&amp;quot;,&#xA;        typeof(int),&#xA;        typeof(GotoXControls),&#xA;        new FrameworkPropertyMetadata((int)GotoXServiceState.OBJECT_DEPTH_THRESHOLD_DEFAULT,&#xA;            FrameworkPropertyMetadataOptions.AffectsRender,&#xA;            new PropertyChangedCallback(OnControlValueChanged)&#xA;        )&#xA;    );&#xA;&#xA;    #endregion&#xA;</code></pre>&#xA;&#xA;<p>When it's collapsed you just see</p>&#xA;&#xA;<pre><code>public int ObjectDepthThreshold&#xA;</code></pre>&#xA;&#xA;<p>If I have more than one dependency property, I like to start the next #region on the very next line.  That way you end up with all of them grouped together in your class, and the code is compact and readable.</p>&#xA;&#xA;<p>BTW if you just want to peek at the declaration, mouse hover over it.</p>&#xA;
 11977522 | 0.150 | <p>If you just want to verify you don't have random garbage in the field (i.e., from form spammers) this regex should do nicely:</p>&#xA;&#xA;<pre><code>^[0-9+\(\)#\.\s\/ext-]+$&#xA;</code></pre>&#xA;&#xA;<p>Note that it doesn't have any special rules for how many digits, or what numbers are valid in those digits, it just verifies that only digits, parenthesis, dashes, plus, space, pound,  asterisk, period, comma, or the letters <code>e</code>, <code>x</code>, <code>t</code> are present.</p>&#xA;&#xA;<p>It should be compatible with international numbers and localization formats. Do you foresee any need to allow square, curly, or angled brackets for some regions? (currently they aren't included).</p>&#xA;&#xA;<p>If you want to maintain per digit rules (such as in US Area Codes and Prefixes (exchange codes) must fall in the range of 200-999) well, good luck to you. Maintaining a complex rule-set which could be outdated at any point in the future by any country in the world does not sound fun.</p>&#xA;&#xA;<p>And while stripping all/most non-numeric characters may work well on the server side (especially if you are planning on passing these values to a dialer), you may not want to thrash the user's input during validation, particularly if you want them to make corrections in another field.</p>&#xA;
 12123020 | 0.150 | <p>Finally its done with <code>prawn</code> and <code>prawn-rails</code>. Here are the details. </p>&#xA;&#xA;<p>To make my system ready</p>&#xA;&#xA;<pre><code># Add this to your Gemfile&#xA;gem 'prawn'&#xA;gem 'prawn_rails'&#xA;&#xA;# run&#xA;bundle install&#xA;</code></pre>&#xA;&#xA;<p>I hit the url <code>http://localhost:3000/regions</code> i.e. to hit the <code>index</code> of <code>RegionsController</code> and it shows the page as pdf format.</p>&#xA;&#xA;<p>I have a <code>Region</code> Model with a single attribute <code>name</code>. Has two entries in <code>regions</code> table.</p>&#xA;&#xA;<pre><code>[&#xA; #&lt;Region id: 1, name: "Region 1", ... &gt;,&#xA; #&lt;Region id: 2, name: "Region 2", ... &gt;&#xA;]&#xA;</code></pre>&#xA;&#xA;<p>My Controller Method:</p>&#xA;&#xA;<pre><code>def index&#xA;    @regions = Region.all # Should return two region objects :)&#xA;&#xA;    respond_to do |format|&#xA;        format.html # index.html.erb&#xA;        format.json { render json: @regions }&#xA;        format.pdf    # &lt;---------- This will handle the pdf response&#xA;    end&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>I have created a view file in <code>views/regions/index.pdf.prawn</code>. Anyway the view file name format is <code>:action.pdf.prawn</code> and the view file is containing</p>&#xA;&#xA;<pre><code>prawn_document() do |pdf|&#xA;    @regions.each {|r| pdf.text r.name}&#xA;end&#xA;</code></pre>&#xA;&#xA;<p>This will just output the name of Regions. </p>&#xA;&#xA;<p>Thats it. You have your page in pdf format. Now just play with all other options provided by <code>Prawn</code> and <code>Prawn-Rails</code>. You can find some here - <a href="http://prawn-rails-demo.heroku.com/" rel="nofollow">http://prawn-rails-demo.heroku.com/</a></p>&#xA;&#xA;<p>Just thinking to write a series of blogs guiding how to use different pdf generation tool with rails 3.</p>&#xA;&#xA;<p>Let me know if it solves your problem.</p>&#xA;
 14829202 | 0.150 | <p>Enumerations</p>&#xA;&#xA;<p>Properties</p>&#xA;&#xA;<p>.ctors</p>&#xA;&#xA;<p>Methods</p>&#xA;&#xA;<p>Event Handlers</p>&#xA;&#xA;<p>That's all I use regions for.  I had no idea you could use them inside of methods.</p>&#xA;&#xA;<p>Sounds like a terrible idea :)</p>&#xA;
 18193533 | 0.150 | <p>You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.</p>&#xA;&#xA;<pre><code>var myElement = "chocolate";&#xA;var myArray = ['chocolate', 'poptart', 'poptart', 'poptart', 'chocolate', 'poptart', 'poptart', 'chocolate'];&#xA;&#xA;/* Important code */&#xA;for (var i = myArray.length - 1; i &gt;= 0; i--) {&#xA;    if (myArray[i] == myElement) myArray.splice(i, 1);&#xA;}&#xA;</code></pre>&#xA;&#xA;<h2><a href="http://jsfiddle.net/lun471k/7m6G9/" rel="nofollow">Live Demo</a></h2>&#xA;
 19941412 | 0.150 | <p>here's the VB equivalent code to Samuel's answer that i use. notice i actually have 2 extensions functions, but i must admit i don't know why they are there. i copied my C# version years ago (maybe from this site) and it had both extension functions, but for what reason, i don't fully understand. i just copied it and how to use it, and i half understand all that goes on 'under the hood' with these complicated functions.</p>&#xA;&#xA;<pre><code>#Const System_ComponentModel = True&#xA;#Const System_Drawing = False&#xA;&#xA;Option Compare Binary&#xA;Option Explicit On&#xA;Option Strict On&#xA;&#xA;Imports System.Collections&#xA;Imports System.Runtime.CompilerServices ' for Extension() attribute&#xA;Imports System.Text&#xA;#If System_ComponentModel Then&#xA;Imports System.ComponentModel&#xA;#End If&#xA;#If System_Drawing Then&#xA;Imports System.Drawing&#xA;#End If&#xA;&#xA;Public Module MyExtensions&#xA;&#xA;    ' other #Region blocks are removed. i use many in my Extensions&#xA;    ' module/class. the below code is only the 2 relevant extension&#xA;    ' for this 'SafeInvoke' functionality. but i use other regions&#xA;    ' such as "String extensions" and "Numeric extensions". i use&#xA;    ' the above System_ComponentModel and System_Drawing compiler&#xA;    ' directives to include or exclude blocks of code that i want&#xA;    ' to either include or exclude in a project, which allows me to&#xA;    ' easily compare my code in one project with the same file in&#xA;    ' other projects to syncronise new changes across projects.&#xA;    ' you can scrap pretty much all the code above,&#xA;    ' but i'm giving it here so you see it in the full context.&#xA;&#xA;    #Region "ISynchronizeInvoke extensions"&#xA;&#xA;    #If System_ComponentModel Then&#xA;&#xA;        &lt;Extension()&gt;&#xA;        Public Function SafeInvoke(Of T As ISynchronizeInvoke, TResult)(isi As T, callFunction As Func(Of T, TResult)) As TResult&#xA;            If (isi.InvokeRequired) Then&#xA;                Dim result As IAsyncResult = isi.BeginInvoke(callFunction, New Object() {isi})&#xA;                Dim endresult As Object = isi.EndInvoke(result)&#xA;                Return DirectCast(endresult, TResult)&#xA;            Else&#xA;                Return callFunction(isi)&#xA;            End If&#xA;        End Function&#xA;&#xA;        ''' &lt;summary&gt;&#xA;        ''' This can be used in VB with:&#xA;        ''' txtMyTextBox.SafeInvoke(Sub(d) d.Text = "This is my new Text value.")&#xA;        ''' or:&#xA;        ''' txtMyTextBox.SafeInvoke(Sub(d) d.Text = myTextStringVariable)&#xA;        ''' &lt;/summary&gt;&#xA;        ''' &lt;typeparam name="T"&gt;&lt;/typeparam&gt;&#xA;        ''' &lt;param name="isi"&gt;&lt;/param&gt;&#xA;        ''' &lt;param name="callFunction"&gt;&lt;/param&gt;&#xA;        ''' &lt;remarks&gt;&lt;/remarks&gt;&#xA;        &lt;Extension()&gt;&#xA;        Public Sub SafeInvoke(Of T As ISynchronizeInvoke)(isi As T, callFunction As Action(Of T))&#xA;            If isi.InvokeRequired Then&#xA;                isi.BeginInvoke(callFunction, New Object() {isi})&#xA;            Else&#xA;                callFunction(isi)&#xA;            End If&#xA;        End Sub&#xA;&#xA;    #End If&#xA;&#xA;    #End Region&#xA;&#xA;    ' other #Region blocks are removed from here too.&#xA;&#xA;End Module&#xA;</code></pre>&#xA;&#xA;<p>And the C# version is:</p>&#xA;&#xA;<pre><code>#define System_ComponentModel&#xA;#undef  System_Drawing&#xA;&#xA;using System;&#xA;using System.Collections.Generic;&#xA;using System.Linq;&#xA;using System.Text;&#xA;&#xA;#if System_ComponentModel&#xA;using System.ComponentModel;&#xA;#endif&#xA;#if System_Drawing&#xA;using System.Drawing;&#xA;#endif&#xA;&#xA;namespace MyCompany.Extensions&#xA;{&#xA;    static partial class MyExtensions&#xA;    {&#xA;&#xA;        // other #Region blocks are removed. i use many in my Extensions&#xA;        // module/class. the below code is only the 2 relevant extension&#xA;        // for this 'SafeInvoke' functionality. but i use other regions&#xA;        // such as "String extensions" and "Numeric extensions". i use&#xA;        // the above System_ComponentModel and System_Drawing compiler&#xA;        // directives to include or exclude blocks of code that i want&#xA;        // to either include or exclude in a project, which allows me to&#xA;        // easily compare my code in one project with the same file in&#xA;        // other projects to syncronise new changes across projects.&#xA;        // you can scrap pretty much all the code above,&#xA;        // but i'm giving it here so you see it in the full context.&#xA;&#xA;        #region ISynchronizeInvoke extensions&#xA;#if System_ComponentModel&#xA;&#xA;        public static TResult SafeInvoke&lt;T, TResult&gt;(this T isi, Func&lt;T, TResult&gt; callFunction) where T : ISynchronizeInvoke&#xA;        {&#xA;            if (isi.InvokeRequired)&#xA;            {&#xA;                IAsyncResult result = isi.BeginInvoke(callFunction, new object[] { isi });&#xA;                object endResult = isi.EndInvoke(result); return (TResult)endResult;&#xA;            }&#xA;            else&#xA;                return callFunction(isi);&#xA;        }&#xA;&#xA;        /// &lt;summary&gt;&#xA;        /// This can be used in C# with:&#xA;        /// txtMyTextBox.SafeInvoke(d =&gt; d.Text = "This is my new Text value.");&#xA;        /// or:&#xA;        /// txtMyTextBox.SafeInvoke(d =&gt; d.Text = myTextStringVariable);&#xA;        /// &lt;/summary&gt;&#xA;        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;&#xA;        /// &lt;param name="isi"&gt;&lt;/param&gt;&#xA;        /// &lt;param name="callFunction"&gt;&lt;/param&gt;&#xA;        public static void SafeInvoke&lt;T&gt;(this T isi, Action&lt;T&gt; callFunction) where T : ISynchronizeInvoke&#xA;        {&#xA;            if (isi.InvokeRequired) isi.BeginInvoke(callFunction, new object[] { isi });&#xA;            else&#xA;                callFunction(isi);&#xA;        }&#xA;&#xA;#endif&#xA;        #endregion&#xA;&#xA;        // other #Region blocks are removed from here too.&#xA;&#xA;    } // static class MyExtensions&#xA;&#xA;} // namespace&#xA;</code></pre>&#xA;&#xA;<p>Happy coding!</p>&#xA;
 24996118 | 0.150 | <p>I have two CSV files with 10 columns each where the first column is called the "Primary Key". </p>&#xA;&#xA;<p>I need to use Python to find the common region between the two CSV files. For example, I should be able to detect that rows 27-45 in CSV1 is equal to rows 125-145 in CSV2 and so on. </p>&#xA;&#xA;<p>I am only comparing the Primary Key (Column One). The rest of the data is not considered for comparison. I need to extract these common regions in two separate CSV files (one for CSV1 and one for CSV2).</p>&#xA;&#xA;<p>I have already parsed and stored the rows of the two CSV files in two 'list of lists',  <code>lstCAN_LOG_TABLE</code> and <code>lstSHADOW_LOG_TABLE</code>, so the problem reduces down to comparing these two list of lists.</p>&#xA;&#xA;<p>I am currently assuming is that if there are 10 subsequent matches (<code>MAX_COMMON_THRESHOLD</code>), I have reached the beginning of a common region. I must not log single rows (comparing to true) because there would be regions equal (As per primary key) and those regions I need to identify.  </p>&#xA;&#xA;<pre><code>for index in range(len(lstCAN_LOG_TABLE)):&#xA;    for l_index in range(len(lstSHADOW_LOG_TABLE)):&#xA;        if(lstSHADOW_LOG_TABLE[l_index][1] == lstCAN_LOG_TABLE[index][1]):  #Consider for comparison only CAN IDs&#xA;            index_can_log = index                                           #Position where CAN Log is to be compared&#xA;            index_shadow_log = l_index                                      #Position from where CAN Shadow Log is to be considered&#xA;            start = index_shadow_log&#xA;            if((index_shadow_log + MAX_COMMON_THRESHOLD) &lt;= (input_file_two_row_count-1)):&#xA;                end = index_shadow_log + MAX_COMMON_THRESHOLD&#xA;            else:&#xA;                end = (index_shadow_log) + ((input_file_two_row_count-1) - (index_shadow_log))&#xA;            can_index = index&#xA;            bPreScreened = 1&#xA;            for num in range(start,end):&#xA;                if(lstSHADOW_LOG_TABLE[num][1] == lstCAN_LOG_TABLE[can_index][1]):&#xA;                    if((can_index + 1) &lt; (input_file_one_row_count-1)):&#xA;                        can_index = can_index + 1                           &#xA;                    else:&#xA;                        break   &#xA;                else:&#xA;                    bPreScreened = 0&#xA;                    print("No Match")&#xA;                    break&#xA;            #we might have found start of common region         &#xA;            if(bPreScreened == 1):      &#xA;                print("Start={0} End={1} can_index={2}".format(start,end,can_index))&#xA;                for number in range(start,end):&#xA;                    if(lstSHADOW_LOG_TABLE[number][1] == lstCAN_LOG_TABLE[index][1]):                           &#xA;                        writer_two.writerow(lstSHADOW_LOG_TABLE[number][0])&#xA;                        writer_one.writerow(lstCAN_LOG_TABLE[index][0])&#xA;                        if((index + 1) &lt; (input_file_one_row_count-1)):&#xA;                            index = index + 1                           &#xA;                        else:&#xA;                            dump_file.close()   &#xA;                            print("\nCommon Region in Two CSVs identifed and recorded\n")                           &#xA;                            return&#xA;dump_file.close()   &#xA;print("\nCommon Region in Two CSVs identifed and recorded\n")&#xA;</code></pre>&#xA;&#xA;<p>I am getting strange output. Even the first CSV file has only 1880 Rows but in the common region CSV for the first CSV I am getting many more entries. I am not getting desired output.</p>&#xA;&#xA;<p><strong>EDITED FROM HERE</strong></p>&#xA;&#xA;<p><strong>CSV1:</strong></p>&#xA;&#xA;<pre><code>216 0.000238225 F4  41  C0  FB  28  0   0   0   MS CAN&#xA;109 0.0002256   15  8B  31  0   8   43  58  0   HS CAN&#xA;216 0.000238025 FB  47  C6  1   28  0   0   0   MS CAN&#xA;340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>CSV2:</strong></p>&#xA;&#xA;<pre><code>216 0.0002361   0F  5C  DB  14  28  0   0   0   MS CAN&#xA;216 0.000236225 16  63  E2  1B  28  0   0   0   MS CAN&#xA;109 0.0001412   16  A3  31  0   8   63  58  0   HS CAN&#xA;216 0.000234075 1C  6A  E9  22  28  0   0   0   MS CAN&#xA;40A 0.000259925 C1  1   46  54  30  44  47  36  HS CAN&#xA;4A  0.000565975 2   0   0   0   0   0   0   C0  MS CAN&#xA;340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>EXPECTED OUTPUT CSV1:</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>EXPECTED OUTPUT CSV2:</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p><strong>OBSERVED OUTPUT CSV1</strong></p>&#xA;&#xA;<pre><code>340 0.000240175 0A  18  0   C2  0   0   6F  FF  MS CAN&#xA;216 0.000240225 24  70  EF  28  28  0   0   0   MS CAN&#xA;216 0.000236225 2B  77  F7  2F  28  0   0   0   MS CAN&#xA;216 0.0002278   31  7D  FD  35  28  0   0   0   MS CAN&#xA;</code></pre>&#xA;&#xA;<p>And many thousands of redundant row data </p>&#xA;&#xA;<p><strong>EDITED - SOLVED AS PER ADVICE (CHANGED FOR TO WHILE):</strong></p>&#xA;&#xA;<p><strong>LEARNING:</strong> <em>In Python FOR Loop Index cannot be changed at RunTime</em></p>&#xA;&#xA;<pre><code>dump_file=open("MATCH_PATTERN.txt",'w+')&#xA;print("Number of Entries CAN LOG={0}".format(len(lstCAN_LOG_TABLE)))&#xA;print("Number of Entries SHADOW LOG={0}".format(len(lstSHADOW_LOG_TABLE)))  &#xA;index = 0   &#xA;while(index &lt; (input_file_one_row_count - 1)):&#xA;    l_index = 0&#xA;    while(l_index &lt; (input_file_two_row_count - 1)):&#xA;        if(lstSHADOW_LOG_TABLE[l_index][1] == lstCAN_LOG_TABLE[index][1]):  #Consider for comparison only CAN IDs&#xA;            index_can_log = index                                           #Position where CAN Log is to be compared&#xA;            index_shadow_log = l_index                                      #Position from where CAN Shadow Log is to be considered&#xA;            start = index_shadow_log&#xA;            can_index = index&#xA;            if((index_shadow_log + MAX_COMMON_THRESHOLD) &lt;= (input_file_two_row_count-1)):&#xA;                end = index_shadow_log + MAX_COMMON_THRESHOLD&#xA;            else:&#xA;                end = (index_shadow_log) + ((input_file_two_row_count-1) - (index_shadow_log))              &#xA;            bPreScreened = 1&#xA;            for num in range(start,end):&#xA;                if(lstSHADOW_LOG_TABLE[num][1] == lstCAN_LOG_TABLE[can_index][1]):                      &#xA;                    if((can_index + 1) &lt; (input_file_one_row_count-1)):&#xA;                        can_index = can_index + 1                           &#xA;                    else:&#xA;                        break   &#xA;                else:&#xA;                    bPreScreened = 0&#xA;                    break&#xA;            #we might have found start of common region         &#xA;            if(bPreScreened == 1):      &#xA;                print("Shadow Start={0} Shadow End={1} CAN INDEX={2}".format(start,end,index))&#xA;                for number in range(start,end):&#xA;                    if(lstSHADOW_LOG_TABLE[number][1] == lstCAN_LOG_TABLE[index][1]):                           &#xA;                        writer_two.writerow(lstSHADOW_LOG_TABLE[number][0])&#xA;                        writer_one.writerow(lstCAN_LOG_TABLE[index][0])&#xA;                        if((index + 1) &lt; (input_file_one_row_count-1)):&#xA;                            index = index + 1&#xA;                        if((l_index + 1) &lt; (input_file_two_row_count-1)):&#xA;                            l_index = l_index + 1                               &#xA;                        else:&#xA;                            dump_file.close()   &#xA;                            print("\nCommon Region in Two CSVs identifed and recorded\n")                           &#xA;                            return&#xA;            else:&#xA;                l_index = l_index + 1&#xA;        else:&#xA;            l_index = l_index + 1&#xA;    index = index + 1   &#xA;dump_file.close()   &#xA;print("\nCommon Region in Two CSVs identifed and recorded\n")&#xA;</code></pre>&#xA;
 26849599 | 0.150 | <p>An alternative to packed bitmaps and wheels - but equally efficient in certain contexts - is storing the differences between consecutive primes. If you leave out the number 2 as usual then all differences are even. Storing difference/2 you can get up to 2^40ish regions (just before 1999066711391) using byte-sized variables. </p>&#xA;&#xA;<p>The primes up 2^32 require only 194 MByte, compared to 256 MByte for an odds-only packed bitmap. Iterating over delta-stored primes is much faster than for wheeled storage, which includes the modulo-2 wheel known as odds-only bitmap. </p>&#xA;&#xA;<p>For ranges from 1999066711391 onwards, bigger cell size or variable-length storage are needed. The latter can be extremely efficient even if very simple schemes are used (e.g. keep adding until a byte &lt; 255 has been added, like in <a href="http://en.wikipedia.org/wiki/LZ4_%28compression_algorithm%29" rel="nofollow">LZ4</a>-style compression), because of the extremely low frequency of gaps longer than 510/2.</p>&#xA;&#xA;<p>For efficiency's sake it is best to divide the range into sections (pages) and manage them B-Tree style.</p>&#xA;&#xA;<p>Entropy-coding the differences (Huffmann or arithmetic coding) cuts permanent storage requirements to a bit less than half, which is close to the theoretical optimum and better than lists or wheels compressed using the best available packers. </p>&#xA;&#xA;<p>If the data is stored uncompressed then it is still much more compact than files of binary or textual numbers, by an order of magnitude or more. With a B-Tree style index in place it is easy to simply map sections into memory as needed and iterate over them at blazing speed.</p>&#xA;
 27637752 | 0.150 | <p><strong>As to the correct way of finding the last used cell, one has first to decide what is considered <em>used</em>, and then select a suitable method</strong>. I conceive at least two meanings:</p>&#xA;&#xA;<ol>&#xA;<li><p>Used = non-blank, i.e., having <strong>data</strong>.</p></li>&#xA;<li><p>Used = "... in use, meaning the section that contains <strong>data or formatting</strong>."&#xA;<a href="http://support.microsoft.com/kb/244435" rel="nofollow">This is the criterion used by Excel at the time of saving</a>. See also <a href="https://support.office.com/en-sg/article/Locate-and-reset-the-last-cell-on-a-worksheet-c9e468a8-0fc3-4f69-8038-b3c1d86e99e9" rel="nofollow">this</a>.&#xA;This criterion usually produces unexpected results, but it may also be intentionally exploited (less often, surely), e.g., to highlight or print specific regions, which may eventually have no data. And, of course, it is desirable as a criterion for the range to use when saving a workbook.</p></li>&#xA;</ol>&#xA;&#xA;<p><strong>How to find the last used cell depends on what <em>you</em> want (your criterion)</strong>.</p>&#xA;&#xA;<p><em>For criterion 1, I suggest reading <a href="http://stackoverflow.com/a/11169920/2707864">this answer</a></em>.</p>&#xA;&#xA;<p><em>For criterion 2, <code>UsedRange</code> is the most reliable option</em>. It even makes it unnecessary to save a workbook to make sure that the last cell is updated.&#xA;<kbd>Ctrl</kbd>+<kbd>End</kbd> will go to a wrong cell prior to saving&#xA;(ΓÇ£The last cell is not reset until you save the worksheetΓÇ¥, from&#xA;<a href="http://msdn.microsoft.com/en-us/library/aa139976%28v=office.10%29.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa139976%28v=office.10%29.aspx</a>.&#xA;It is an old reference, but in this respect valid).</p>&#xA;&#xA;<p>There is yet another pitfall:<br>&#xA;Criterion 2 does not account for Conditional Formatting. One may have formatted cells, based on formulas, which are not detected by <code>UsedRange</code> or <kbd>Ctrl</kbd>+<kbd>End</kbd>.&#xA;In the figure, the last cell is B3, since formatting was applied explicitly to it. Cells B6:D7 have a format derived from a Conditional Formatting rule, and this is not detected even by <code>UsedRange</code>.</p>&#xA;&#xA;<p><img src="http://i.stack.imgur.com/vhayX.jpg" alt="enter image description here"></p>&#xA;&#xA;<hr>&#xA;&#xA;<p><strong>As to your specific question</strong>:&#xA;<em>What's the reason behind this?</em></p>&#xA;&#xA;<p>Your code uses the first cell in your range E4:E48 as a trampoline, for <em>jumping</em> down with <code>End(xlDown)</code>.</p>&#xA;&#xA;<p>The "erroneous" output will obtain if there are no <em>non-blank</em> cells in your range other than perhaps the first. Then, you are <em>leaping in the dark</em>, i.e., down the worksheet&#xA;(you should note the difference between <em>blank</em> and <em>empty string</em>!). </p>&#xA;&#xA;<p>Note that:</p>&#xA;&#xA;<ol>&#xA;<li><p>If your range contains non-contiguous non-blank cells, then it will also give a wrong result.</p></li>&#xA;<li><p>If there is only one non-blank cell, but it is not the first one, your code will still give you the correct result.</p></li>&#xA;</ol>&#xA;
(39 rows)

Time: 461,838 ms


-- D7

SELECT * from word_2_words('regions');

 weight |                       word                       
--------+--------------------------------------------------
     42 | regions
     24 | code
     13 | methods
     13 | region
     11 | method
     11 | class
     11 | find
     10 | properties
      9 | classes
      9 | group
      9 | file
      8 | make
      8 | things
      8 | end
      7 | data
      7 | objects
      7 | makes
      7 | object
      7 | public
      6 | work
      6 | events
      6 | problem
      6 | return
      5 | files
      5 | time
      5 | expand
      5 | working
      5 | sections
      5 | index
      5 | grouping
      5 | folding
      5 | found
      5 | single
      4 | output
      4 | collapse
      4 | set
      4 | maintain
      4 | structure
      4 | fields
      4 | groups
      4 | partial
      4 | function
      4 | people
      4 | range
      4 | interface
      4 | lot
      4 | list
      4 | start
      4 | constructors
      4 | functionality
      4 | result
      4 | bad
      4 | open
      4 | access
      4 | static
      4 | give
      3 | inside
      3 | common
      3 | compare
      3 | column
      3 | type
      3 | easily
      3 | coding
      3 | standard
      3 | specific
      3 | garbage
      3 | meaning
      3 | change
      3 | approach
      3 | wo
      3 | number
      3 | considered
      3 | stored
      3 | read
      3 | style
      3 | write
      3 | reason
      3 | returns
      3 | entries
      3 | ctrl
      3 | case
      3 | nice
      3 | love
      3 | grouped
      3 | depending
      3 | format
      3 | table
      3 | ui
      3 | business
      3 | properly
      3 | solution
      3 | system
      3 | great
      3 | organize
      3 | put
      3 | compiler
      3 | property
      3 | large
      3 | order
      3 | tool
      3 | string
      3 | answer
      3 | compared
      3 | project
      3 | based
      3 | add
      3 | automatically
      3 | point
      3 | note
      3 | log
      3 | purpose
      3 | bit
      3 | variables
      3 | rows
      2 | assemblies
      2 | call
      2 | helps
      2 | line
      2 | exact
      2 | projects
      2 | private
      2 | personally
      2 | entitymanager
      2 | refactoring
      2 | functions
      2 | visual
      2 | separate
      2 | url
      2 | size
      2 | stuff
      2 | numbers
      2 | formatting
      2 | writing
      2 | lists
      2 | provide
      2 | compact
      2 | codes
      2 | understand
      2 | sample
      2 | general
      2 | consistency
      2 | pretty
      2 | helpful
      2 | larger
      2 | characters
      2 | issue
      2 | cell
      2 | generally
      2 | passing
      2 | place
      2 | handlers
      2 | values
      2 | copying
      2 | feature
      2 | row
      2 | transactions
      2 | future
      2 | responsibility
      2 | current
      2 | memory
      2 | changed
      2 | opinion
      2 | ms
      2 | applications
      2 | eventually
      2 | broken
      2 | storing
      2 | pages
      2 | application
      2 | organized
      2 | ideas
      2 | developers
      2 | glance
      2 | extensions
      2 | key
      2 | include
      2 | clutter
      2 | source
      2 | everytime
      2 | copied
      2 | feel
      2 | level
      2 | attribute
      2 | thread
      2 | called
      2 | iterate
      2 | criterion
      2 | editor
      2 | calling
      2 | save
      2 | half
      2 | sounds
      2 | model
      2 | cells
      2 | small
      2 | option
      2 | adding
      2 | shared
      2 | hate
      2 | framework
      2 | python
      2 | execution
      2 | hide
      2 | temporary
      2 | harder
      2 | reader
      2 | results
      2 | print
      2 | attributes
      2 | space
      2 | correct
      2 | comparison
      2 | prawn
      2 | fan
      2 | multiple
      2 | kind
      2 | ide
      2 | included
      2 | scope
      2 | thought
      2 | names
      2 | keyboard
      2 | blog
      2 | implementation
      2 | created
      2 | event
      2 | easier
      2 | readable
      2 | binary
      2 | copy
      2 | close
      2 | details
      2 | full
      2 | good
      2 | valid
      2 | language
      2 | page
      2 | redundant
      2 | primary
      2 | years
      2 | controller
      2 | studio
      2 | design
      2 | blocks
      2 | endresult
      2 | question
      2 | team
      2 | ago
      2 | support
      2 | lines
      2 | rule
      2 | context
      2 | usage
      2 | report
      2 | extension
      2 | complex
      2 | void
      2 | notice
      2 | assuming
      2 | crutch
      2 | includes
      2 | sense
      2 | day
      2 | implementations
      2 | clr
      2 | figure
      2 | view
      2 | making
      2 | written
      2 | derived
      2 | base
      2 | abstract
      2 | overloaded
      2 | easy
      2 | ca
      2 | amount
      2 | difficult
      2 | happy
      2 | acceptable
      2 | times
      2 | creating
      2 | idea
      2 | identify
      2 | benefits
      2 | shadow
      2 | load
      2 | faster
      2 | true
      2 | field
      2 | create
      2 | responsible
      2 | consistent
      1 | dialer
      1 | action
      1 | updated
      1 | reaching
      1 | polyglott
      1 | writer_two
      1 | produces
      1 | typing
      1 | overflow
      1 | roland
      1 | obfuscate
      1 | hint
      1 | gridview
      1 | uiautomation
      1 | violating
      1 | permanent
      1 | transaction
      1 | collapsing
      1 | testing
      1 | highlight
      1 | principle
      1 | fat
      1 | total
      1 | outdated
      1 | jeff
      1 | impression
      1 | deployed
      1 | failure
      1 | entry
      1 | asterisk
      1 | interesting
      1 | points
      1 | potential
      1 | heavy
      1 | simplest
      1 | detected
      1 | nightmare
      1 | slimmer
      1 | extract
      1 | contained
      1 | weigelt
      1 | commonly
      1 | groupings
      1 | original
      1 | foresee
      1 | worksheet
      1 | issues
      1 | editing
      1 | datasets
      1 | slicing
      1 | b6
      1 | side
      1 | minimal
      1 | brackets
      1 | operator
      1 | configuration
      1 | agree
      1 | wheeled
      1 | workbook
      1 | affect
      1 | limitations
      1 | numeric
      1 | bunch
      1 | web
      1 | qa
      1 | assertion
      1 | brasil
      1 | id
      1 | russell
      1 | pass
      1 | b3
      1 | main
      1 | handle
      1 | version
      1 | objectdepththresholdproperty
      1 | folded
      1 | entire
      1 | minimize
      1 | input_file_one_row_count
      1 | parsed
      1 | index_can_log
      1 | allowed
      1 | similar
      1 | china
      1 | friendly
      1 | authorization
      1 | c0
      1 | readibility
      1 | loadpublishedversion
      1 | comparing
      1 | memcpy
      1 | part
      1 | hitting
      1 | factors
      1 | strange
      1 | types
      1 | compatibility
      1 | stack
      1 | onwards
      1 | html
      1 | pleasure
      1 | formulas
      1 | depth_threshold_default
      1 | dialog
      1 | simply
      1 | extensively
      1 | gui
      1 | adds
      1 | myers
      1 | system_drawing
      1 | gemfile
      1 | state
      1 | development
      1 | peek
      1 | gen
      1 | frequency
      1 | physically
      1 | probe
      1 | reject
      1 | external
      1 | entity
      1 | ncommon
      1 | collapsed
      1 | tools
      1 | isynchronizeinvoke
      1 | excellent
      1 | matches
      1 | exploited
      1 | dashes
      1 | guarantee
      1 | provided
      1 | exclude
      1 | wrapping
      1 | organizing
      1 | separated
      1 | country
      1 | answers
      1 | solved
      1 | scrap
      1 | recorded
      1 | dealing
      1 | verifies
      1 | masks
      1 | expected
      1 | paste
      1 | complete
      1 | writerow
      1 | directives
      1 | bprescreened
      1 | constances
      1 | physical
      1 | ids
      1 | implementing
      1 | internal
      1 | varies
      1 | discernable
      1 | exist
      1 | arbitrary
      1 | comma
      1 | unsafe
      1 | hides
      1 | msdn
      1 | long
      1 | opera
      1 | executed
      1 | sort
      1 | array
      1 | regex
      1 | tresult
      1 | ef
      1 | wheel
      1 | remain
      1 | surely
      1 | terrible
      1 | vb
      1 | subsumed
      1 | references
      1 | deal
      1 | documentation
      1 | execute
      1 | words
      1 | s2
      1 | blazing
      1 | f4
      1 | unnecessary
      1 | javascript
      1 | practice
      1 | aim
      1 | ruby
      1 | intent
      1 | calls
      1 | wrapped
      1 | learning
      1 | date
      1 | shortcuts
      1 | int
      1 | dump_file
      1 | dal
      1 | reading
      1 | hoist
      1 | document
      1 | ci
      1 | columns
      1 | ff
      1 | equally
      1 | schemes
      1 | moving
      1 | cares
      1 | solves
      1 | collection
      1 | setup
      1 | e48
      1 | service
      1 | takes
      1 | fb
      1 | graph
      1 | guess
      1 | regionscontroller
      1 | jumping
      1 | measurement
      1 | sp
      1 | aborts
      1 | guiding
      1 | bigger
      1 | imports
      1 | letters
      1 | bundle
      1 | checking
      1 | block
      1 | gaps
      1 | xldown
      1 | strong
      1 | pointed
      1 | spammers
      1 | clear
      1 | coder
      1 | luck
      1 | couple
      1 | xmlpageprovider
      1 | touched
      1 | strict
      1 | perfectly
      1 | eagerly
      1 | pattern
      1 | e9
      1 | lets
      1 | fall
      1 | host
      1 | autogenerated
      1 | screens
      1 | pay
      1 | snippets
      1 | match
      1 | digit
      1 | require
      1 | equal
      1 | usual
      1 | run
      1 | opposed
      1 | build
      1 | samuel
      1 | previously
      1 | coffescript
      1 | benefit
      1 | completed
      1 | cer
      1 | trampoline
      1 | a3
      1 | prefer
      1 | fill
      1 | mobile
      1 | maintaining
      1 | conclusion
      1 | namespace
      1 | needed
      1 | reliable
      1 | correctly
      1 | interfaces
      1 | false
      1 | bcl
      1 | abstraction
      1 | description
      1 | caution
      1 | packed
      1 | systems
      1 | insane
      1 | edits
      1 | c2
      1 | ton
      1 | international
      1 | usefull
      1 | untyped
      1 | async
      1 | naturally
      1 | assembly
      1 | proper
      1 | s1
      1 | achieve
      1 | overlapping
      1 | primes
      1 | allocation
      1 | l_index
      1 | len
      1 | theoretical
      1 | suggest
      1 | higher
      1 | relevant
      1 | frameworkpropertymetadata
      1 | edited
      1 | structured
      1 | running
      1 | supporting
      1 | detail
      1 | desirable
      1 | members
      1 | show
      1 | define
      1 | management
      1 | const
      1 | curly
      1 | kangax
      1 | verify
      1 | prawn_document
      1 | limit
      1 | cuts
      1 | rolling
      1 | resulting
      1 | sizeof
      1 | desktop
      1 | shows
      1 | suitable
      1 | storage
      1 | big
      1 | hibernate
      1 | world
      1 | needless
      1 | exceptions
      1 | declaration
      1 | optimum
      1 | existing
      1 | spring
      1 | person
      1 | synchronise
      1 | begin
      1 | oncontrolvaluechanged
      1 | mbyte
      1 | avoid
      1 | subsequent
      1 | incentive
      1 | controls
      1 | loaded
      1 | activerecord
      1 | device
      1 | square
      1 | worker
      1 | hidden
      1 | maintenance
      1 | max_common_threshold
      1 | providing
      1 | equivalent
      1 | reduces
      1 | manager
      1 | reusable
      1 | giving
      1 | regionised
      1 | constants
      1 | constraints
      1 | thumb
      1 | def
      1 | constantly
      1 | manner
      1 | iasyncresult
      1 | func
      1 | body
      1 | expose
      1 | prefixes
      1 | light
      1 | runs
      1 | price
      1 | collections
      1 | efficiency
      1 | ie6
      1 | directly
      1 | proportion
      1 | centric
      1 | loop
      1 | built
      1 | unrelated
      1 | identifed
      1 | differences
      1 | blank
      1 | dependency
      1 | c6
      1 | develop
      1 | constrained
      1 | prepared
      1 | teams
      1 | experience
      1 | quote
      1 | modifiers
      1 | someparam
      1 | coming
      1 | september
      1 | reference
      1 | site
      1 | csvs
      1 | subscriber
      1 | assertions
      1 | manageable
      1 | directcast
      1 | ranges
      1 | subclassing
      1 | silly
      1 | speed
      1 | fails
      1 | e2
      1 | maintainable
      1 | parameters
      1 | suggestion
      1 | respects
      1 | complicated
      1 | erroneous
      1 | bloat
      1 | setvalue
      1 | json
      1 | conceive
      1 | extraneous
      1 | api
      1 | generated
      1 | observed
      1 | reflects
      1 | member
      1 | merge
      1 | library
      1 | reset
      1 | writer_one
      1 | cases
      1 | low
      1 | illogical
      1 | digits
      1 | thrash
      1 | special
      1 | default
      1 | layers
      1 | ignores
      1 | entering
      1 | necessity
      1 | foreach
      1 | overlap
      1 | packers
      1 | exercising
      1 | interested
      1 | arithmetic
      1 | respect
      1 | features
      1 | getvalue
      1 | sandcastle
      1 | generic
      1 | starts
      1 | guarantees
      1 | hood
      1 | browsers
      1 | dark
      1 | turn
      1 | series
      1 | text
      1 | mytextstringvariable
      1 | talks
      1 | behavior
      1 | enumerations
      1 | prepare
      1 | undefined
      1 | status
      1 | random
      1 | leaping
      1 | account
      1 | considerably
      1 | overloads
      1 | obtain
      1 | csv1
      1 | webkit
      1 | byte
      1 | parenthesis
      1 | extra
      1 | finalizer
      1 | logically
      1 | decoupled
      1 | pixel
      1 | throw
      1 | split
      1 | overhead
      1 | ios
      1 | formatted
      1 | reflection
      1 | conditional
      1 | compatible
      1 | dependecy
      1 | setters
      1 | lstcan_log_table
      1 | depends
      1 | implemented
      1 | txt
      1 | quickly
      1 | backend
      1 | restate
      1 | c1
      1 | nesting
      1 | visit
      1 | pdf
      1 | bound
      1 | num
      1 | dependencyproperty
      1 | desired
      1 | nicely
      1 | devices
      1 | thoughts
      1 | supported
      1 | managing
      1 | break
      1 | abused
      1 | seek
      1 | planning
      1 | detect
      1 | rails
      1 | weeks
      1 | input_file_two_row_count
      1 | proc
      1 | readability
      1 | net
      1 | difference
      1 | contexts
      1 | compile
      1 | syncronise
      1 | cover
      1 | maintains
      1 | eyesore
      1 | fit
      1 | manually
      1 | screen
      1 | added
      1 | totally
      1 | delay
      1 | thousands
      1 | thinking
      1 | misused
      1 | viewing
      1 | form
      1 | refactor
      1 | reached
      1 | client
      1 | mind
      1 | pitfall
      1 | applied
      1 | handled
      1 | exception
      1 | mapping
      1 | options
      1 | ctors
      1 | guidelines
      1 | placing
      1 | sign
      1 | uncompressed
      1 | usedrange
      1 | simple
      1 | response
      1 | paths
      1 | constructor
      1 | involve
      1 | lead
      1 | learn
      1 | btw
      1 | screenshot
      1 | link
      1 | longer
      1 | iterating
      1 | extensive
      1 | discussions
      1 | gotoxcontrols
      1 | enums
      1 | orm
      1 | safeinvoke
      1 | database
      1 | exchange
      1 | developer
      1 | territory
      1 | atomic
      1 | chrome
      1 | synopsis
      1 | processing
      1 | meanings
      1 | parsing
      1 | browser
      1 | present
      1 | dim
      1 | fence
      1 | cleaner
      1 | users
      1 | modifier
      1 | alternative
      1 | putting
      1 | designer
      1 | can_index
      1 | prior
      1 | free
      1 | costs
      1 | solutions
      1 | increase
      1 | f7
      1 | noise
      1 | play
      1 | pound
      1 | admit
      1 | match_pattern
      1 | empty
      1 | readonly
      1 | datatable
      1 | hit
      1 | callfunction
      1 | unexpected
      1 | environments
      1 | decide
      1 | compression
      1 | supposed
      1 | corrections
      1 | consecutive
      1 | intentionally
      1 | advance
      1 | stripping
      1 | removed
      1 | declaring
      1 | isi
      1 | generation
      1 | fd
      1 | fact
      1 | appdomains
      1 | rest
      1 | required
      1 | signature
      1 | explicit
      1 | definitions
      1 | char
      1 | comments
      1 | datareader
      1 | appdomain
      1 | scenarios
      1 | discreet
      1 | evolved
      1 | unload
      1 | intrinsic
      1 | gem
      1 | fewer
      1 | effort
      1 | beginning
      1 | myextensions
      1 | share
      1 | select
      1 | size_t
      1 | focus
      1 | addresses
      1 | thislookslikewellorganizedcodebecauseiuseregions
      1 | prawn_rails
      1 | period
      1 | textual
      1 | plumbing
      1 | setting
      1 | ecmascript
      1 | basic
      1 | criteria
      1 | poor
      1 | declaraions
      1 | bl
      1 | d7
      1 | console
      1 | combined
      1 | blogs
      1 | bitmaps
      1 | fetching
      1 | fun
      1 | typed
      1 | operations
      1 | folds
      1 | concurrently
      1 | debugging
      1 | ora
      1 | install
      1 | excel
      1 | navigate
      1 | module
      1 | bitmap
      1 | ready
      1 | validation
      1 | render
      1 | cope
      1 | tend
      1 | jit
      1 | wheels
      1 | extreme
      1 | copies
      1 | synchronize
      1 | care
      1 | typeof
      1 | achieved
      1 | angled
      1 | sake
      1 | finding
      1 | filter
      1 | inflexible
      1 | skills
      1 | system_componentmodel
      1 | belongs
      1 | jpa
      1 | hover
      1 | server
      1 | efficient
      1 | macros
      1 | clicking
      1 | ie8
      1 | arbitrarily
      1 | means
      1 | improving
      1 | input
      1 | lstshadow_log_table
      1 | rules
      1 | user
      1 | countries
      1 | csv2
      1 | hiding
      1 | mouse
      1 | huffmann
      1 | mark
      1 | fixed
      1 | domain
      1 | criticalfinalizerobject
      1 | tab
      1 | advice
      1 | matter
      1 | nicer
      1 | fully
      1 | works
      1 | comment
      1 | respond_to
      1 | finished
      1 | simulator
      1 | divide
      1 | opening
      1 | section
      1 | endregion
      1 | extremely
      1 | logical
      1 | fashion
      1 | instance
      1 | db
      1 | zucchini
      1 | objectdepththreshold
      1 | leave
      1 | magnitude
      1 | map
      1 | hard
      1 | hs
      1 | latest
      1 | challenge
      1 | smells
      1 | subsequently
      1 | cucumber
      1 | area
      1 | advocate
      1 | restrict
      1 | requirements
      1 | e4
      1 | sound
      1 | getters
      1 | highlighted
      1 | skill
      1 | fine
      1 | finally
      1 | propertychangedcallback
      1 | partials
      1 | explicitly
      1 | configure
      1 | proficient
      1 | returned
      1 | compressed
      1 | information
      1 | formats
      1 | memmove
      1 | bind
      1 | manage
      1 | checked
      1 | wrote
      1 | runtime
      1 | index_shadow_log
      1 | wrong
      1 | modified
      1 | localization
      1 | constant
      1 | saving
      1 | csv
(1089 rows)

Time: 379,146 ms


-- E.

-- testing with script of D3 without indexing

drop index if exists wi_word_inx;

DROP INDEX
Time: 24,411 ms
SELECT * from exact_match('regions', 'blocks', 'constructors');

 postid |                                                                                                                                                                                                                                                                                                      postbody                                                                                                                                                                                                                                                                                                       

   9063 | <p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx" rel="nofollow">Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;
(1 row)

Time: 591,332 ms


-- testing with script of D3 with indexing

create index wi_word_inx on wi (word);

CREATE INDEX
Time: 1985,096 ms (00:01,985)
SELECT * from exact_match('regions', 'blocks', 'constructors');

 postid |                                                                                                                                                                                                                                                                                                      postbody                                                                                                                                                                                                                                                                                                       

   9063 | <p>My approach is similar to a few others here, using regions to organize code blocks into constructors, properties, events, etc.</p>&#xA;&#xA;<p>There's an excellent set of VS.NET macros by Roland Weigelt available from his blog entry, <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/06/9741.aspx" rel="nofollow">Better Keyboard Support for #region ... #endregion</a>.  I've been using these for years, mapping ctrl+. to collapse the current region and ctrl++ to expand it.  Find that it works a lot better that the default VS.NET functionality which folds/unfolds everything.</p>&#xA;
(1 row)

Time: 7,506 ms
